new:173:33:void* operator new(std::size_t, void*)	16	static
gthr-default.h:229:1:int __gthread_key_delete(__gthread_key_t)	16	static
shared_ptr_base.h:308:5:void std::_Sp_counted_base<_Lp>::_M_release() [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:508:5:static const std::type_info& std::_Sp_make_shared_tag::_S_ti()	4	static
Renderable.h:4:7:constexpr Renderable::Renderable()	16	static
Updatable.h:4:7:constexpr Updatable::Updatable()	16	static
shared_ptr_base.h:1169:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr.h:103:11:std::shared_ptr<StateManager>::~shared_ptr()	16	static
tuple:918:12:constexpr std::tuple<_T1, _T2>::tuple() [with _U1 = Prog*; _U2 = std::default_delete<Prog>; typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>, std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous> = true; _T1 = Prog*; _T2 = std::default_delete<Prog>]	16	static
tuple:206:17:>::_Tuple_impl() [with unsigned int _Idx = 0; _Head = Prog*; _Tail = {std::default_delete<Prog>}]	16	static
tuple:339:17:constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl() [with unsigned int _Idx = 1; _Head = std::default_delete<Prog>]	16	static
tuple:76:17:constexpr std::_Head_base<_Idx, _Head, true>::_Head_base() [with unsigned int _Idx = 1; _Head = std::default_delete<Prog>]	16	static
tuple:122:17:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with unsigned int _Idx = 0; _Head = Prog*]	16	static
shared_ptr_base.h:1169:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = Flat; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr.h:103:11:std::shared_ptr<Flat>::~shared_ptr()	16	static
Prog.cpp:8:1:Prog::Prog()	24	static
Prog.cpp:14:7:static Prog* Prog::getInstance()	16	static
Prog.cpp:22:6:virtual void Prog::update(float)	16	static
Prog.cpp:27:6:virtual void Prog::render()	16	static
Prog.cpp:32:6:void Prog::processInput(std::pair<unsigned int, unsigned int>)	24	static
shared_ptr_base.h:131:7:void std::_Sp_counted_base<_Lp>::_M_destroy() [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:727:7:std::__shared_count<_Lp>::~__shared_count() [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
unique_ptr.h:286:7:std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = Prog; _Dp = std::default_delete<Prog>]	32	static
shared_ptr.h:127:17:constexpr std::shared_ptr<_Tp>::shared_ptr() [with _Tp = StateManager]	16	static
shared_ptr.h:127:17:constexpr std::shared_ptr<_Tp>::shared_ptr() [with _Tp = Flat]	16	static
unique_ptr.h:374:16:std::unique_ptr<_Tp, _Dp>::operator bool() const [with _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
shared_ptr.h:714:5:) [with _Tp = StateManager; _Args = {}]	24	static
shared_ptr.h:333:7:std::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = StateManager]	24	static
unique_ptr.h:856:5:) [with _Tp = Prog; _Args = {}]	24	static
unique_ptr.h:305:7:std::unique_ptr<_Tp, _Dp>& std::unique_ptr<_Tp, _Dp>::operator=(std::unique_ptr<_Tp, _Dp>&&) [with _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
unique_ptr.h:360:7:std::unique_ptr<_Tp, _Dp>::pointer std::unique_ptr<_Tp, _Dp>::get() const [with _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
shared_ptr_base.h:1012:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:121:7:std::_Sp_counted_base<_Lp>::~_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:121:7:std::_Sp_counted_base<_Lp>::~_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
unique_ptr.h:153:18:std::__uniq_ptr_impl<_Tp, _Dp>::pointer& std::__uniq_ptr_impl<_Tp, _Dp>::_M_ptr() [with _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
unique_ptr.h:365:7:std::unique_ptr<_Tp, _Dp>::deleter_type& std::unique_ptr<_Tp, _Dp>::get_deleter() [with _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = Prog*&]	16	static
Prog.h:21:3:Prog::~Prog()	16	static
unique_ptr.h:75:7:void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = Prog]	24	static
shared_ptr_base.h:1118:17:constexpr std::__shared_ptr<_Tp, _Lp>::__shared_ptr() [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:1118:17:constexpr std::__shared_ptr<_Tp, _Lp>::__shared_ptr() [with _Tp = Flat; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
allocator.h:138:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = StateManager]	16	static
allocator.h:153:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = StateManager]	16	static
shared_ptr.h:699:5:) [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; _Args = {}]	16	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<StateManager>&]	16	static
shared_ptr_base.h:1263:7:std::__shared_ptr<_Tp, _Lp>& std::__shared_ptr<_Tp, _Lp>::operator=(std::__shared_ptr<_Tp, _Lp>&&) [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	24	static
unique_ptr.h:211:2:std::unique_ptr<_Tp, _Dp>::unique_ptr(std::unique_ptr<_Tp, _Dp>::pointer) [with _Del = std::default_delete<Prog>; <template-parameter-2-2> = void; _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
unique_ptr.h:395:7:void std::unique_ptr<_Tp, _Dp>::reset(std::unique_ptr<_Tp, _Dp>::pointer) [with _Tp = Prog; _Dp = std::default_delete<Prog>]	24	static
unique_ptr.h:381:7:std::unique_ptr<_Tp, _Dp>::pointer std::unique_ptr<_Tp, _Dp>::release() [with _Tp = Prog; _Dp = std::default_delete<Prog>]	24	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = std::default_delete<Prog>]	16	static
unique_ptr.h:154:18:std::__uniq_ptr_impl<_Tp, _Dp>::pointer std::__uniq_ptr_impl<_Tp, _Dp>::_M_ptr() const [with _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
shared_ptr_base.h:1020:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single; bool <anonymous> = false; bool <anonymous> = false]	16	static
tuple:1320:5:>&) [with unsigned int __i = 0; _Elements = {Prog*, std::default_delete<Prog>}]	16	static
unique_ptr.h:155:18:_Dp& std::__uniq_ptr_impl<_Tp, _Dp>::_M_deleter() [with _Tp = Prog; _Dp = std::default_delete<Prog>]	16	static
shared_ptr_base.h:616:17:constexpr std::__shared_count<_Lp>::__shared_count() [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
new_allocator.h:80:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = StateManager]	16	static
new_allocator.h:89:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = StateManager]	16	static
shared_ptr.h:358:2:) [with _Alloc = std::allocator<StateManager>; _Args = {}; _Tp = StateManager]	16	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<StateManager, __gnu_cxx::_S_single>&]	16	static
shared_ptr_base.h:1176:7:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Tp, _Lp>&&) [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:1324:7:void std::__shared_ptr<_Tp, _Lp>::swap(std::__shared_ptr<_Tp, _Lp>&) [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
unique_ptr.h:147:7:std::__uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl(std::__uniq_ptr_impl<_Tp, _Dp>::pointer) [with _Tp = Prog; _Dp = std::default_delete<Prog>]	24	static
move.h:182:5:typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type std::swap(_Tp&, _Tp&) [with _Tp = Prog*]	24	static
tuple:1326:5:>&) [with unsigned int __i = 0; _Elements = {Prog*, std::default_delete<Prog>}]	16	static
shared_ptr_base.h:1309:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
tuple:1309:5:>&) [with unsigned int __i = 0; _Head = Prog*; _Tail = {std::default_delete<Prog>}]	16	static
tuple:1320:5:>&) [with unsigned int __i = 1; _Elements = {Prog*, std::default_delete<Prog>}]	16	static
shared_ptr_base.h:1343:2:) [with _Alloc = std::allocator<StateManager>; _Args = {}; _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:756:7:void std::__shared_count<_Lp>::_M_swap(std::__shared_count<_Lp>&) [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	24	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = StateManager*&]	16	static
move.h:182:5:typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type std::swap(_Tp&, _Tp&) [with _Tp = StateManager*]	24	static
tuple:1314:5:>&) [with unsigned int __i = 0; _Head = Prog*; _Tail = {std::default_delete<Prog>}]	16	static
tuple:195:7:>&) [with unsigned int _Idx = 0; _Head = Prog*; _Tail = {std::default_delete<Prog>}]	16	static
tuple:1309:5:>&) [with unsigned int __i = 1; _Head = std::default_delete<Prog>; _Tail = {}]	16	static
shared_ptr_base.h:672:2:) [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; _Args = {}; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	56	static
shared_ptr_base.h:1388:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = StateManager; _Yp2 = StateManager; _Tp = StateManager; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
tuple:198:7:>&) [with unsigned int _Idx = 0; _Head = Prog*; _Tail = {std::default_delete<Prog>}]	16	static
tuple:160:7:static constexpr _Head& std::_Head_base<_Idx, _Head, false>::_M_head(std::_Head_base<_Idx, _Head, false>&) [with unsigned int _Idx = 0; _Head = Prog*]	16	static
tuple:334:7:static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&) [with unsigned int _Idx = 1; _Head = std::default_delete<Prog>]	16	static
allocator.h:151:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = StateManager; _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	16	static
allocator.h:153:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	16	static
allocated_ptr.h:95:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single> >]	16	static
allocator.h:141:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = StateManager]	16	static
shared_ptr_base.h:412:12:std::_Sp_ebo_helper<0, std::allocator<StateManager>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:526:13:std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>::_Impl::~_Impl()	16	static
shared_ptr_base.h:543:2:) [with _Args = {}; _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	32	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single> >]	16	static
shared_ptr_base.h:594:12:_Tp* std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_M_ptr() [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
tuple:163:7:static constexpr const _Head& std::_Head_base<_Idx, _Head, false>::_M_head(const std::_Head_base<_Idx, _Head, false>&) [with unsigned int _Idx = 0; _Head = Prog*]	16	static
tuple:113:7:static constexpr _Head& std::_Head_base<_Idx, _Head, true>::_M_head(std::_Head_base<_Idx, _Head, true>&) [with unsigned int _Idx = 1; _Head = std::default_delete<Prog>]	16	static
new_allocator.h:80:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	16	static
new_allocator.h:89:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	16	static
alloc_traits.h:443:7:static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single> >]	24	static
alloc_traits.h:469:7:static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	24	static
ptr_traits.h:155:5:constexpr _Tp* std::__to_address(_Tp*) [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	16	static
new_allocator.h:83:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = StateManager]	16	static
shared_ptr_base.h:117:7:std::_Sp_counted_base<_Lp>::_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:531:11:std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Impl::_Impl(_Alloc) [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
alloc_traits.h:482:2:) [with _Up = StateManager; _Args = {}; _Tp = StateManager]	16	static
aligned_buffer.h:114:7:_Tp* __gnu_cxx::__aligned_buffer<_Tp>::_M_ptr() [with _Tp = StateManager]	16	static
new_allocator.h:102:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single> >]	16	static
new_allocator.h:119:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	24	static
shared_ptr_base.h:414:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 0; _Tp = std::allocator<StateManager>]	16	static
new_allocator.h:144:2:) [with _Up = StateManager; _Args = {}; _Tp = StateManager]	16	static
aligned_buffer.h:102:7:void* __gnu_cxx::__aligned_buffer<_Tp>::_M_addr() [with _Tp = StateManager]	16	static
new_allocator.h:132:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_ptr_inplace<StateManager, std::allocator<StateManager>, __gnu_cxx::_S_single>]	16	static
Prog.cpp:35:1:void __static_initialization_and_destruction_0(int, int)	16	static
shared_ptr_base.h:552:7:std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::~_Sp_counted_ptr_inplace() [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:552:7:std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::~_Sp_counted_ptr_inplace() [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr_base.h:555:7:void std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_M_dispose() [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	24	static
shared_ptr_base.h:562:7:void std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_M_destroy() [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	32	static
shared_ptr_base.h:575:7:void* std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	24	static
shared_ptr_base.h:533:10:_Alloc& std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Impl::_M_alloc() [with _Tp = StateManager; _Alloc = std::allocator<StateManager>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
alloc_traits.h:495:2:static void std::allocator_traits<std::allocator<_CharT> >::destroy(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*) [with _Up = StateManager; _Tp = StateManager]	16	static
shared_ptr_base.h:418:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 0; _Tp = std::allocator<StateManager>]	16	static
shared_ptr_base.h:1169:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = State; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_single]	16	static
shared_ptr.h:103:11:std::shared_ptr<State>::~shared_ptr()	16	static
StateManager.h:15:3:StateManager::~StateManager()	16	static
new_allocator.h:151:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = StateManager; _Tp = StateManager]	16	static
Prog.cpp:35:1:cpp)	8	static
Prog.cpp:35:1:cpp)	8	static
