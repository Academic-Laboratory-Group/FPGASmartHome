
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037f0  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a8  0800a9a8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9a8  0800a9a8  0001a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9b0  0800a9b0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9b0  0800a9b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000008c  0800aa44  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800aa44  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000516ea  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007b85  00000000  00000000  000717a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00079330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  0007b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b614  00000000  00000000  0007cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245fa  00000000  00000000  000a8154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebfb2  00000000  00000000  000cc74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b8700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092a8  00000000  00000000  001b8754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080071a0 	.word	0x080071a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	080071a0 	.word	0x080071a0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN6ButtonC1E11ButtonShape5Coloriiii>:
#include "Button.h"
#include "LCD_GUI.h"

Button::Button(ButtonShape shape, Color color, int x, int y, int high, int width)
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	72fb      	strb	r3, [r7, #11]
 800051a:	4613      	mov	r3, r2
 800051c:	813b      	strh	r3, [r7, #8]
{
	m_shape = shape;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	701a      	strb	r2, [r3, #0]
	m_color = color;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	893a      	ldrh	r2, [r7, #8]
 8000528:	805a      	strh	r2, [r3, #2]
	m_x = x;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	605a      	str	r2, [r3, #4]
	m_y = y;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	69ba      	ldr	r2, [r7, #24]
 8000534:	609a      	str	r2, [r3, #8]
	m_high = high / 2;
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	0fda      	lsrs	r2, r3, #31
 800053a:	4413      	add	r3, r2
 800053c:	105b      	asrs	r3, r3, #1
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	60da      	str	r2, [r3, #12]
	m_width = width / 2;
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	0fda      	lsrs	r2, r3, #31
 8000548:	4413      	add	r3, r2
 800054a:	105b      	asrs	r3, r3, #1
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	611a      	str	r2, [r3, #16]
}
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <_ZN6Button6renderEv>:
void Button::render()
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af04      	add	r7, sp, #16
 8000566:	6078      	str	r0, [r7, #4]
	if (m_shape == Square)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d12a      	bne.n	80005c6 <_ZN6Button6renderEv+0x66>
		GUI_DrawRectangle(m_x - m_width, m_y - m_high, m_x + m_width, m_y + m_high, m_color, DRAW_FULL, DOT_PIXEL_2X2);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	b29a      	uxth	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	b29b      	uxth	r3, r3
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	b298      	uxth	r0, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	b29a      	uxth	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	b29b      	uxth	r3, r3
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	b299      	uxth	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	b29b      	uxth	r3, r3
 800059c:	4413      	add	r3, r2
 800059e:	b29c      	uxth	r4, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4413      	add	r3, r2
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	885b      	ldrh	r3, [r3, #2]
 80005b4:	2502      	movs	r5, #2
 80005b6:	9502      	str	r5, [sp, #8]
 80005b8:	2501      	movs	r5, #1
 80005ba:	9501      	str	r5, [sp, #4]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4613      	mov	r3, r2
 80005c0:	4622      	mov	r2, r4
 80005c2:	f002 fa1d 	bl	8002a00 <GUI_DrawRectangle>
	if (m_shape == Circle)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d110      	bne.n	80005f0 <_ZN6Button6renderEv+0x90>
		GUI_DrawCircle(m_x, m_y, m_high, m_color, DRAW_FULL, DOT_PIXEL_2X2);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	b298      	uxth	r0, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	b299      	uxth	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	885b      	ldrh	r3, [r3, #2]
 80005e4:	2402      	movs	r4, #2
 80005e6:	9401      	str	r4, [sp, #4]
 80005e8:	2401      	movs	r4, #1
 80005ea:	9400      	str	r4, [sp, #0]
 80005ec:	f002 fa8c 	bl	8002b08 <GUI_DrawCircle>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bdb0      	pop	{r4, r5, r7, pc}

080005f8 <_ZN9UpdatableC1Ev>:
#ifndef _UPDATABLE_H_
#define _UPDATABLE_H_

class Updatable
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <_ZN9UpdatableC1Ev+0x1c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	08007384 	.word	0x08007384

08000618 <_ZN10RenderableC1Ev>:
#ifndef _RENDERABLE_H_
#define _RENDERABLE_H_

class Renderable
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <_ZN10RenderableC1Ev+0x1c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	08007378 	.word	0x08007378

08000638 <_ZN5StateC1EP12StateManager>:
	protected:
		StateManager* m_stateManager;
		GUI* m_gui;
		GUIBuilder m_guiBuilder;
	public:
		State(StateManager* stateManager) : m_stateManager(stateManager){}
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffd7 	bl	80005f8 <_ZN9UpdatableC1Ev>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3304      	adds	r3, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffe2 	bl	8000618 <_ZN10RenderableC1Ev>
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <_ZN5StateC1EP12StateManager+0x44>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <_ZN5StateC1EP12StateManager+0x48>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3310      	adds	r3, #16
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fc3c 	bl	8001ee8 <_ZN10GUIBuilderC1Ev>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	08007354 	.word	0x08007354
 8000680:	0800736c 	.word	0x0800736c

08000684 <_ZN5StateD1Ev>:
		virtual ~State(){};
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <_ZN5StateD1Ev+0x28>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <_ZN5StateD1Ev+0x2c>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3310      	adds	r3, #16
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fc3f 	bl	8001f20 <_ZN10GUIBuilderD1Ev>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08007354 	.word	0x08007354
 80006b0:	0800736c 	.word	0x0800736c

080006b4 <_ZN5StateD0Ev>:
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ffe1 	bl	8000684 <_ZN5StateD1Ev>
 80006c2:	2114      	movs	r1, #20
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f006 fac5 	bl	8006c54 <_ZdlPvj>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_ZN3GUID1Ev>:
#include <vector>
#include "Button.h"
#include "TextBox.h"
#include "Utils.h"

class GUI
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	330c      	adds	r3, #12
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f824 	bl	800072e <_ZNSt6vectorI7TextBoxSaIS0_EED1Ev>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f805 	bl	80006f8 <_ZNSt6vectorI6ButtonSaIS0_EED1Ev>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_ZNSt6vectorI6ButtonSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681c      	ldr	r4, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f854 	bl	80007b8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>
 8000710:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000712:	461a      	mov	r2, r3
 8000714:	4629      	mov	r1, r5
 8000716:	4620      	mov	r0, r4
 8000718:	f000 f859 	bl	80007ce <_ZSt8_DestroyIP6ButtonS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f82c 	bl	800077c <_ZNSt12_Vector_baseI6ButtonSaIS0_EED1Ev>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}

0800072e <_ZNSt6vectorI7TextBoxSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800072e:	b5b0      	push	{r4, r5, r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681c      	ldr	r4, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f87d 	bl	8000840 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>
 8000746:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000748:	461a      	mov	r2, r3
 800074a:	4629      	mov	r1, r5
 800074c:	4620      	mov	r0, r4
 800074e:	f000 f882 	bl	8000856 <_ZSt8_DestroyIP7TextBoxS0_EvT_S2_RSaIT0_E>
      }
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f855 	bl	8000804 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EED1Ev>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bdb0      	pop	{r4, r5, r7, pc}

08000764 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f880 	bl	8000872 <_ZNSaI6ButtonED1Ev>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <_ZNSt12_Vector_baseI6ButtonSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689a      	ldr	r2, [r3, #8]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	109b      	asrs	r3, r3, #2
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <_ZNSt12_Vector_baseI6ButtonSaIS0_EED1Ev+0x38>)
 8000796:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800079a:	461a      	mov	r2, r3
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f874 	bl	800088a <_ZNSt12_Vector_baseI6ButtonSaIS0_EE13_M_deallocateEPS0_j>
      }
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffdd 	bl	8000764 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE12_Vector_implD1Ev>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	cccccccd 	.word	0xcccccccd

080007b8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_ZSt8_DestroyIP6ButtonS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f000 f867 	bl	80008b0 <_ZSt8_DestroyIP6ButtonEvT_S2_>
    }
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f869 	bl	80008ca <_ZNSaI7TextBoxED1Ev>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	10db      	asrs	r3, r3, #3
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <_ZNSt12_Vector_baseI7TextBoxSaIS0_EED1Ev+0x38>)
 800081e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000822:	461a      	mov	r2, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f85c 	bl	80008e2 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE13_M_deallocateEPS0_j>
      }
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ffdc 	bl	80007ea <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE12_Vector_implD1Ev>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	cccccccd 	.word	0xcccccccd

08000840 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZSt8_DestroyIP7TextBoxS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f000 f84f 	bl	8000908 <_ZSt8_DestroyIP7TextBoxEvT_S2_>
    }
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZNSaI6ButtonED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f851 	bl	8000922 <_ZN9__gnu_cxx13new_allocatorI6ButtonED1Ev>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_ZNSt12_Vector_baseI6ButtonSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
	if (__p)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f848 	bl	8000938 <_ZNSt16allocator_traitsISaI6ButtonEE10deallocateERS1_PS0_j>
      }
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_ZSt8_DestroyIP6ButtonEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80008ba:	6839      	ldr	r1, [r7, #0]
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f84a 	bl	8000956 <_ZNSt12_Destroy_auxILb1EE9__destroyIP6ButtonEEvT_S4_>
    }
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_ZNSaI7TextBoxED1Ev>:
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f84a 	bl	800096c <_ZN9__gnu_cxx13new_allocatorI7TextBoxED1Ev>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
	if (__p)
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d005      	beq.n	8000900 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f841 	bl	8000982 <_ZNSt16allocator_traitsISaI7TextBoxEE10deallocateERS1_PS0_j>
      }
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZSt8_DestroyIP7TextBoxEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f843 	bl	80009a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7TextBoxEEvT_S4_>
    }
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_ZN9__gnu_cxx13new_allocatorI6ButtonED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_ZNSt16allocator_traitsISaI6ButtonEE10deallocateERS1_PS0_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f000 f841 	bl	80009d0 <_ZN9__gnu_cxx13new_allocatorI6ButtonE10deallocateEPS1_j>
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_ZNSt12_Destroy_auxILb1EE9__destroyIP6ButtonEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN9__gnu_cxx13new_allocatorI7TextBoxED1Ev>:
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_ZNSt16allocator_traitsISaI7TextBoxEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f000 f829 	bl	80009ea <_ZN9__gnu_cxx13new_allocatorI7TextBoxE10deallocateEPS1_j>
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7TextBoxEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d00a      	beq.n	80009c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7TextBoxEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f826 	bl	8000a04 <_ZSt11__addressofI7TextBoxEPT_RS1_>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f83a 	bl	8000a34 <_ZSt8_DestroyI7TextBoxEvPT_>
	  for (; __first != __last; ++__first)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3328      	adds	r3, #40	; 0x28
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e7f0      	b.n	80009aa <_ZNSt12_Destroy_auxILb0EE9__destroyIP7TextBoxEEvT_S4_+0xa>
	}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_ZN9__gnu_cxx13new_allocatorI6ButtonE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80009dc:	68b8      	ldr	r0, [r7, #8]
 80009de:	f006 f937 	bl	8006c50 <_ZdlPv>
      }
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_ZN9__gnu_cxx13new_allocatorI7TextBoxE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80009f6:	68b8      	ldr	r0, [r7, #8]
 80009f8:	f006 f92a 	bl	8006c50 <_ZdlPv>
      }
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZSt11__addressofI7TextBoxEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_ZN7TextBoxD1Ev>:
#define _TEXTBOX_H_

#include "Utils.h"
#include <string>

class TextBox
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f006 f9bf 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_ZSt8_DestroyI7TextBoxEvPT_>:
    _Destroy(_Tp* __pointer)
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ffec 	bl	8000a1a <_ZN7TextBoxD1Ev>
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <PWM_SetValue>:
{

}

void PWM_SetValue(uint16_t value)
{		
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
////	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	
    TIM_OC_InitTypeDef sConfigOC;
	
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a56:	2360      	movs	r3, #96	; 0x60
 8000a58:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <PWM_SetValue+0x38>)
 8000a70:	f005 fae2 	bl	8006038 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  
 8000a74:	2104      	movs	r1, #4
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <PWM_SetValue+0x38>)
 8000a78:	f005 f90e 	bl	8005c98 <HAL_TIM_PWM_Start>
}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000013c 	.word	0x2000013c

08000a88 <SPI4W_Write_Byte>:
note:
	SPI4W_Write_Byte(value) : 
		Register hardware SPI
*********************************************/	
uint8_t SPI4W_Write_Byte(uint8_t value)                                    
{   
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &value, 1,1000);
 8000a92:	1df9      	adds	r1, r7, #7
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <SPI4W_Write_Byte+0x24>)
 8000a9c:	f004 fcb5 	bl	800540a <HAL_SPI_Transmit>
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000e4 	.word	0x200000e4

08000ab0 <SPI4W_Read_Byte>:

uint8_t SPI4W_Read_Byte(uint8_t value)                                    
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi1, &value, &RxData, 1, 1000);
 8000abe:	f107 020f 	add.w	r2, r7, #15
 8000ac2:	1df9      	adds	r1, r7, #7
 8000ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <SPI4W_Read_Byte+0x2c>)
 8000ace:	f004 fdd8 	bl	8005682 <HAL_SPI_TransmitReceive>
	return RxData;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200000e4 	.word	0x200000e4

08000ae0 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_Delay(xms);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f003 fbb7 	bl	800425c <HAL_Delay>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <Driver_Delay_us>:

void Driver_Delay_us(uint32_t xus)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
	int j;
    for(j=xus; j > 0; j--);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e002      	b.n	8000b0a <Driver_Delay_us+0x14>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dcf9      	bgt.n	8000b04 <Driver_Delay_us+0xe>
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d201      	bcs.n	8000b50 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	e000      	b.n	8000b52 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000b50:	687b      	ldr	r3, [r7, #4]
    }
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d201      	bcs.n	8000b78 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	e000      	b.n	8000b7a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000b78:	687b      	ldr	r3, [r7, #4]
    }
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_ZN3GUI9addButtonE11ButtonShape5Coloriiii>:
#include "GUI.h"

void GUI::addButton(ButtonShape shape, Color color, int x, int y, int high, int width)
{
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b08f      	sub	sp, #60	; 0x3c
 8000b8a:	af04      	add	r7, sp, #16
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	72fb      	strb	r3, [r7, #11]
 8000b94:	4613      	mov	r3, r2
 8000b96:	813b      	strh	r3, [r7, #8]
	
	m_buttons.push_back(Button(shape, color, x, y, high, width));
 8000b98:	68fc      	ldr	r4, [r7, #12]
 8000b9a:	893a      	ldrh	r2, [r7, #8]
 8000b9c:	7af9      	ldrb	r1, [r7, #11]
 8000b9e:	f107 0014 	add.w	r0, r7, #20
 8000ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f7ff fcac 	bl	800050c <_ZN6ButtonC1E11ButtonShape5Coloriiii>
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f000 f879 	bl	8000cb2 <_ZNSt6vectorI6ButtonSaIS0_EE9push_backEOS0_>
}
 8000bc0:	bf00      	nop
 8000bc2:	372c      	adds	r7, #44	; 0x2c
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}

08000bc8 <_ZN3GUI10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>:

void GUI::addTextBox(std::string text, Color color, int x, int y, int size)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b097      	sub	sp, #92	; 0x5c
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	80fb      	strh	r3, [r7, #6]
	m_textboxes.push_back(TextBox(text, color, x ,y, size));
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f103 040c 	add.w	r4, r3, #12
 8000bde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 f913 	bl	8006e10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000bf0:	f107 0010 	add.w	r0, r7, #16
 8000bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f002 fd8b 	bl	8003718 <_ZN7TextBoxC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4619      	mov	r1, r3
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f000 f863 	bl	8000cd4 <_ZNSt6vectorI7TextBoxSaIS0_EE9push_backEOS0_>
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff01 	bl	8000a1a <_ZN7TextBoxD1Ev>
 8000c18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f006 f8c3 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000c22:	bf00      	nop
 8000c24:	3754      	adds	r7, #84	; 0x54
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}

08000c2a <_ZN3GUI6renderEv>:

void GUI::render()
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < m_buttons.size(); ++i)
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f85d 	bl	8000cf8 <_ZNKSt6vectorI6ButtonSaIS0_EE4sizeEv>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	bf8c      	ite	hi
 8000c46:	2301      	movhi	r3, #1
 8000c48:	2300      	movls	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00d      	beq.n	8000c6c <_ZN3GUI6renderEv+0x42>
		m_buttons[i].render();
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f864 	bl	8000d24 <_ZNSt6vectorI6ButtonSaIS0_EEixEj>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc7e 	bl	8000560 <_ZN6Button6renderEv>
	for (int i = 0; i < m_buttons.size(); ++i)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e7e4      	b.n	8000c36 <_ZN3GUI6renderEv+0xc>

	for (int i = 0; i < m_textboxes.size(); ++i)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	330c      	adds	r3, #12
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f869 	bl	8000d4c <_ZNKSt6vectorI7TextBoxSaIS0_EE4sizeEv>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	bf8c      	ite	hi
 8000c82:	2301      	movhi	r3, #1
 8000c84:	2300      	movls	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00e      	beq.n	8000caa <_ZN3GUI6renderEv+0x80>
		m_textboxes[i].render();
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	330c      	adds	r3, #12
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f86f 	bl	8000d78 <_ZNSt6vectorI7TextBoxSaIS0_EEixEj>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fd5d 	bl	800375c <_ZN7TextBox6renderEv>
	for (int i = 0; i < m_textboxes.size(); ++i)
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	e7e2      	b.n	8000c70 <_ZN3GUI6renderEv+0x46>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZNSt6vectorI6ButtonSaIS0_EE9push_backEOS0_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000cbc:	6838      	ldr	r0, [r7, #0]
 8000cbe:	f000 f86e 	bl	8000d9e <_ZSt4moveIR6ButtonEONSt16remove_referenceIT_E4typeEOS3_>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f874 	bl	8000db4 <_ZNSt6vectorI6ButtonSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZNSt6vectorI7TextBoxSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000cde:	6838      	ldr	r0, [r7, #0]
 8000ce0:	f000 f897 	bl	8000e12 <_ZSt4moveIR7TextBoxEONSt16remove_referenceIT_E4typeEOS3_>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 f89d 	bl	8000e28 <_ZNSt6vectorI7TextBoxSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <_ZNKSt6vectorI6ButtonSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	109b      	asrs	r3, r3, #2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <_ZNKSt6vectorI6ButtonSaIS0_EE4sizeEv+0x28>)
 8000d0e:	fb02 f303 	mul.w	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	cccccccd 	.word	0xcccccccd

08000d24 <_ZNSt6vectorI6ButtonSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
      }
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <_ZNKSt6vectorI7TextBoxSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	10db      	asrs	r3, r3, #3
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <_ZNKSt6vectorI7TextBoxSaIS0_EE4sizeEv+0x28>)
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	cccccccd 	.word	0xcccccccd

08000d78 <_ZNSt6vectorI7TextBoxSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
      }
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_ZSt4moveIR6ButtonEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_ZNSt6vectorI6ButtonSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d012      	beq.n	8000df0 <_ZNSt6vectorI6ButtonSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000dca:	687c      	ldr	r4, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685d      	ldr	r5, [r3, #4]
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f000 f858 	bl	8000e86 <_ZSt7forwardI6ButtonEOT_RNSt16remove_referenceIS1_E4typeE>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4629      	mov	r1, r5
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f000 f85d 	bl	8000e9c <_ZNSt16allocator_traitsISaI6ButtonEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f103 0214 	add.w	r2, r3, #20
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000dee:	e00c      	b.n	8000e0a <_ZNSt6vectorI6ButtonSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f866 	bl	8000ec2 <_ZNSt6vectorI6ButtonSaIS0_EE3endEv>
 8000df6:	4604      	mov	r4, r0
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f000 f844 	bl	8000e86 <_ZSt7forwardI6ButtonEOT_RNSt16remove_referenceIS1_E4typeE>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4621      	mov	r1, r4
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f883 	bl	8000f10 <_ZNSt6vectorI6ButtonSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}

08000e12 <_ZSt4moveIR7TextBoxEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_ZNSt6vectorI7TextBoxSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d012      	beq.n	8000e64 <_ZNSt6vectorI7TextBoxSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000e3e:	687c      	ldr	r4, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685d      	ldr	r5, [r3, #4]
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f000 f92b 	bl	80010a0 <_ZSt7forwardI7TextBoxEOT_RNSt16remove_referenceIS1_E4typeE>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4629      	mov	r1, r5
 8000e50:	4620      	mov	r0, r4
 8000e52:	f000 f930 	bl	80010b6 <_ZNSt16allocator_traitsISaI7TextBoxEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	605a      	str	r2, [r3, #4]
      }
 8000e62:	e00c      	b.n	8000e7e <_ZNSt6vectorI7TextBoxSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f939 	bl	80010dc <_ZNSt6vectorI7TextBoxSaIS0_EE3endEv>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f000 f917 	bl	80010a0 <_ZSt7forwardI7TextBoxEOT_RNSt16remove_referenceIS1_E4typeE>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4621      	mov	r1, r4
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f957 	bl	800112c <_ZNSt6vectorI7TextBoxSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bdb0      	pop	{r4, r5, r7, pc}

08000e86 <_ZSt7forwardI6ButtonEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_ZNSt16allocator_traitsISaI6ButtonEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ffec 	bl	8000e86 <_ZSt7forwardI6ButtonEOT_RNSt16remove_referenceIS1_E4typeE>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f000 fa01 	bl	80012bc <_ZN9__gnu_cxx13new_allocatorI6ButtonE9constructIS1_JS1_EEEvPT_DpOT0_>
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZNSt6vectorI6ButtonSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1d1a      	adds	r2, r3, #4
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fa0a 	bl	80012ee <_ZN9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_ZNSt6vectorI6ButtonSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f805 	bl	8000efa <_ZNSt6vectorI6ButtonSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000ef0:	4603      	mov	r3, r0
      }
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_ZNSt6vectorI6ButtonSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000f02:	2301      	movs	r3, #1
      }
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZNSt6vectorI6ButtonSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8000f1c:	4a5e      	ldr	r2, [pc, #376]	; (8001098 <_ZNSt6vectorI6ButtonSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f9f4 	bl	800130e <_ZNKSt6vectorI6ButtonSaIS0_EE12_M_check_lenEjPKc>
 8000f26:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 fa31 	bl	800139c <_ZNSt6vectorI6ButtonSaIS0_EE5beginEv>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	f107 0214 	add.w	r2, r7, #20
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fa37 	bl	80013bc <_ZN9__gnu_cxxmiIP6ButtonSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa4a 	bl	80013f0 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE11_M_allocateEj>
 8000f5c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000f62:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	189d      	adds	r5, r3, r2
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff86 	bl	8000e86 <_ZSt7forwardI6ButtonEOT_RNSt16remove_referenceIS1_E4typeE>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4629      	mov	r1, r5
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff ff8b 	bl	8000e9c <_ZNSt16allocator_traitsISaI6ButtonEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000f8a:	f7ff ffab 	bl	8000ee4 <_ZNSt6vectorI6ButtonSaIS0_EE15_S_use_relocateEv>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d027      	beq.n	8000fe4 <_ZNSt6vectorI6ButtonSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fa51 	bl	8001440 <_ZNK9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEE4baseEv>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fc07 	bl	80007b8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>
 8000faa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4621      	mov	r1, r4
 8000fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fb2:	f000 fa31 	bl	8001418 <_ZNSt6vectorI6ButtonSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8000fb6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	3314      	adds	r3, #20
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fa3c 	bl	8001440 <_ZNK9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEE4baseEv>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fbf2 	bl	80007b8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>
 8000fd4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd8:	6a39      	ldr	r1, [r7, #32]
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f000 fa1c 	bl	8001418 <_ZNSt6vectorI6ButtonSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8000fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000fe2:	e026      	b.n	8001032 <_ZNSt6vectorI6ButtonSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fa29 	bl	8001440 <_ZNK9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEE4baseEv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fbdf 	bl	80007b8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>
 8000ffa:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4621      	mov	r1, r4
 8001000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001002:	f000 fa28 	bl	8001456 <_ZSt34__uninitialized_move_if_noexcept_aIP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001006:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	3314      	adds	r3, #20
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fa14 	bl	8001440 <_ZNK9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEE4baseEv>
 8001018:	4603      	mov	r3, r0
 800101a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fbca 	bl	80007b8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>
 8001024:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001028:	6a39      	ldr	r1, [r7, #32]
 800102a:	4620      	mov	r0, r4
 800102c:	f000 fa13 	bl	8001456 <_ZSt34__uninitialized_move_if_noexcept_aIP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001030:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001032:	f7ff ff57 	bl	8000ee4 <_ZNSt6vectorI6ButtonSaIS0_EE15_S_use_relocateEv>
 8001036:	4603      	mov	r3, r0
 8001038:	f083 0301 	eor.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d009      	beq.n	8001056 <_ZNSt6vectorI6ButtonSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fbb7 	bl	80007b8 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	6a39      	ldr	r1, [r7, #32]
 8001050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001052:	f7ff fbbc 	bl	80007ce <_ZSt8_DestroyIP6ButtonS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001056:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	109b      	asrs	r3, r3, #2
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <_ZNSt6vectorI6ButtonSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8001064:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001068:	461a      	mov	r2, r3
 800106a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800106c:	f7ff fc0d 	bl	800088a <_ZNSt12_Vector_baseI6ButtonSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800107a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800107c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	461a      	mov	r2, r3
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	441a      	add	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]
    }
 8001090:	bf00      	nop
 8001092:	3730      	adds	r7, #48	; 0x30
 8001094:	46bd      	mov	sp, r7
 8001096:	bdb0      	pop	{r4, r5, r7, pc}
 8001098:	080071b8 	.word	0x080071b8
 800109c:	cccccccd 	.word	0xcccccccd

080010a0 <_ZSt7forwardI7TextBoxEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_ZNSt16allocator_traitsISaI7TextBoxEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffec 	bl	80010a0 <_ZSt7forwardI7TextBoxEOT_RNSt16remove_referenceIS1_E4typeE>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 fa07 	bl	80014e2 <_ZN9__gnu_cxx13new_allocatorI7TextBoxE9constructIS1_JS1_EEEvPT_DpOT0_>
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZNSt6vectorI7TextBoxSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	1d1a      	adds	r2, r3, #4
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fa0f 	bl	8001512 <_ZN9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZNSt6vectorI7TextBoxSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f805 	bl	8001114 <_ZNSt6vectorI7TextBoxSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800110a:	4603      	mov	r3, r0
      }
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZNSt6vectorI7TextBoxSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800111c:	2301      	movs	r3, #1
      }
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <_ZNSt6vectorI7TextBoxSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8001138:	4a5e      	ldr	r2, [pc, #376]	; (80012b4 <_ZNSt6vectorI7TextBoxSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 800113a:	2101      	movs	r1, #1
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 f9f8 	bl	8001532 <_ZNKSt6vectorI7TextBoxSaIS0_EE12_M_check_lenEjPKc>
 8001142:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 fa35 	bl	80015c0 <_ZNSt6vectorI7TextBoxSaIS0_EE5beginEv>
 8001156:	4603      	mov	r3, r0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	f107 0214 	add.w	r2, r7, #20
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fa3b 	bl	80015e0 <_ZN9__gnu_cxxmiIP7TextBoxSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800116a:	4603      	mov	r3, r0
 800116c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fa4e 	bl	8001614 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE11_M_allocateEj>
 8001178:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800117e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	189d      	adds	r5, r3, r2
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff85 	bl	80010a0 <_ZSt7forwardI7TextBoxEOT_RNSt16remove_referenceIS1_E4typeE>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4629      	mov	r1, r5
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff ff8a 	bl	80010b6 <_ZNSt16allocator_traitsISaI7TextBoxEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80011a6:	f7ff ffaa 	bl	80010fe <_ZNSt6vectorI7TextBoxSaIS0_EE15_S_use_relocateEv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d027      	beq.n	8001200 <_ZNSt6vectorI7TextBoxSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fa55 	bl	8001664 <_ZNK9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEE4baseEv>
 80011ba:	4603      	mov	r3, r0
 80011bc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fb3d 	bl	8000840 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>
 80011c6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4621      	mov	r1, r4
 80011cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ce:	f000 fa35 	bl	800163c <_ZNSt6vectorI7TextBoxSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80011d2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80011d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d6:	3328      	adds	r3, #40	; 0x28
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fa40 	bl	8001664 <_ZNK9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEE4baseEv>
 80011e4:	4603      	mov	r3, r0
 80011e6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fb28 	bl	8000840 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>
 80011f0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80011f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011f4:	6a39      	ldr	r1, [r7, #32]
 80011f6:	4620      	mov	r0, r4
 80011f8:	f000 fa20 	bl	800163c <_ZNSt6vectorI7TextBoxSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80011fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80011fe:	e026      	b.n	800124e <_ZNSt6vectorI7TextBoxSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
		(__old_start, __position.base(),
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fa2d 	bl	8001664 <_ZNK9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEE4baseEv>
 800120a:	4603      	mov	r3, r0
 800120c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fb15 	bl	8000840 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>
 8001216:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4621      	mov	r1, r4
 800121c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800121e:	f000 fa2c 	bl	800167a <_ZSt34__uninitialized_move_if_noexcept_aIP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001222:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	3328      	adds	r3, #40	; 0x28
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fa18 	bl	8001664 <_ZNK9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEE4baseEv>
 8001234:	4603      	mov	r3, r0
 8001236:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fb00 	bl	8000840 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>
 8001240:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001244:	6a39      	ldr	r1, [r7, #32]
 8001246:	4620      	mov	r0, r4
 8001248:	f000 fa17 	bl	800167a <_ZSt34__uninitialized_move_if_noexcept_aIP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_>
 800124c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800124e:	f7ff ff56 	bl	80010fe <_ZNSt6vectorI7TextBoxSaIS0_EE15_S_use_relocateEv>
 8001252:	4603      	mov	r3, r0
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <_ZNSt6vectorI7TextBoxSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff faed 	bl	8000840 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	6a39      	ldr	r1, [r7, #32]
 800126c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800126e:	f7ff faf2 	bl	8000856 <_ZSt8_DestroyIP7TextBoxS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8001272:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	10db      	asrs	r3, r3, #3
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <_ZNSt6vectorI7TextBoxSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8001280:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001284:	461a      	mov	r2, r3
 8001286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001288:	f7ff fb2b 	bl	80008e2 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001296:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	461a      	mov	r2, r3
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	441a      	add	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	609a      	str	r2, [r3, #8]
    }
 80012ac:	bf00      	nop
 80012ae:	3730      	adds	r7, #48	; 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}
 80012b4:	080071b8 	.word	0x080071b8
 80012b8:	cccccccd 	.word	0xcccccccd

080012bc <_ZN9__gnu_cxx13new_allocatorI6ButtonE9constructIS1_JS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fddc 	bl	8000e86 <_ZSt7forwardI6ButtonEOT_RNSt16remove_referenceIS1_E4typeE>
 80012ce:	4605      	mov	r5, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4619      	mov	r1, r3
 80012d4:	2014      	movs	r0, #20
 80012d6:	f7ff fc22 	bl	8000b1e <_ZnwjPv>
 80012da:	4603      	mov	r3, r0
 80012dc:	461c      	mov	r4, r3
 80012de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZN9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_ZNKSt6vectorI6ButtonSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800130e:	b590      	push	{r4, r7, lr}
 8001310:	b087      	sub	sp, #28
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f9d3 	bl	80016c6 <_ZNKSt6vectorI6ButtonSaIS0_EE8max_sizeEv>
 8001320:	4604      	mov	r4, r0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fce8 	bl	8000cf8 <_ZNKSt6vectorI6ButtonSaIS0_EE4sizeEv>
 8001328:	4603      	mov	r3, r0
 800132a:	1ae2      	subs	r2, r4, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	bf34      	ite	cc
 8001332:	2301      	movcc	r3, #1
 8001334:	2300      	movcs	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <_ZNKSt6vectorI6ButtonSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f005 fca7 	bl	8006c90 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff fcd8 	bl	8000cf8 <_ZNKSt6vectorI6ButtonSaIS0_EE4sizeEv>
 8001348:	4604      	mov	r4, r0
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff fcd4 	bl	8000cf8 <_ZNKSt6vectorI6ButtonSaIS0_EE4sizeEv>
 8001350:	4603      	mov	r3, r0
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	f107 0208 	add.w	r2, r7, #8
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fbe9 	bl	8000b36 <_ZSt3maxIjERKT_S2_S2_>
 8001364:	4603      	mov	r3, r0
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4423      	add	r3, r4
 800136a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff fcc3 	bl	8000cf8 <_ZNKSt6vectorI6ButtonSaIS0_EE4sizeEv>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4293      	cmp	r3, r2
 8001378:	d306      	bcc.n	8001388 <_ZNKSt6vectorI6ButtonSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f9a3 	bl	80016c6 <_ZNKSt6vectorI6ButtonSaIS0_EE8max_sizeEv>
 8001380:	4602      	mov	r2, r0
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4293      	cmp	r3, r2
 8001386:	d904      	bls.n	8001392 <_ZNKSt6vectorI6ButtonSaIS0_EE12_M_check_lenEjPKc+0x84>
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f99c 	bl	80016c6 <_ZNKSt6vectorI6ButtonSaIS0_EE8max_sizeEv>
 800138e:	4603      	mov	r3, r0
 8001390:	e000      	b.n	8001394 <_ZNKSt6vectorI6ButtonSaIS0_EE12_M_check_lenEjPKc+0x86>
 8001392:	697b      	ldr	r3, [r7, #20]
      }
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}

0800139c <_ZNSt6vectorI6ButtonSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff9e 	bl	80012ee <_ZN9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_ZN9__gnu_cxxmiIP6ButtonSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f83a 	bl	8001440 <_ZNK9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEE4baseEv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	681c      	ldr	r4, [r3, #0]
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f000 f835 	bl	8001440 <_ZNK9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEE4baseEv>
 80013d6:	4603      	mov	r3, r0
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1ae3      	subs	r3, r4, r3
 80013dc:	109b      	asrs	r3, r3, #2
 80013de:	4a03      	ldr	r2, [pc, #12]	; (80013ec <_ZN9__gnu_cxxmiIP6ButtonSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	cccccccd 	.word	0xcccccccd

080013f0 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <_ZNSt12_Vector_baseI6ButtonSaIS0_EE11_M_allocateEj+0x1e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f96f 	bl	80016e8 <_ZNSt16allocator_traitsISaI6ButtonEE8allocateERS1_j>
 800140a:	4603      	mov	r3, r0
 800140c:	e000      	b.n	8001410 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE11_M_allocateEj+0x20>
 800140e:	2300      	movs	r3, #0
      }
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZNSt6vectorI6ButtonSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8001426:	f88d 4000 	strb.w	r4, [sp]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f968 	bl	8001706 <_ZNSt6vectorI6ButtonSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8001436:	4603      	mov	r3, r0
      }
 8001438:	4618      	mov	r0, r3
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}

08001440 <_ZNK9__gnu_cxx17__normal_iteratorIP6ButtonSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_ZSt34__uninitialized_move_if_noexcept_aIP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001456:	b590      	push	{r4, r7, lr}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f960 	bl	800172a <_ZSt32__make_move_if_noexcept_iteratorI6ButtonSt13move_iteratorIPS0_EET0_PT_>
 800146a:	4604      	mov	r4, r0
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f000 f95c 	bl	800172a <_ZSt32__make_move_if_noexcept_iteratorI6ButtonSt13move_iteratorIPS0_EET0_PT_>
 8001472:	4601      	mov	r1, r0
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4620      	mov	r0, r4
 800147a:	f000 f965 	bl	8001748 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP6ButtonES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800147e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}

08001488 <_ZNSt16allocator_traitsISaI6ButtonEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f968 	bl	800176a <_ZN9__gnu_cxx13new_allocatorI6ButtonE7destroyIS1_EEvPT_>
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_ZN7TextBoxC1EOS_>:
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fc5e 	bl	8006d74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	8b1a      	ldrh	r2, [r3, #24]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	831a      	strh	r2, [r3, #24]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	69da      	ldr	r2, [r3, #28]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	61da      	str	r2, [r3, #28]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6a1a      	ldr	r2, [r3, #32]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	621a      	str	r2, [r3, #32]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN9__gnu_cxx13new_allocatorI7TextBoxE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fdd6 	bl	80010a0 <_ZSt7forwardI7TextBoxEOT_RNSt16remove_referenceIS1_E4typeE>
 80014f4:	4604      	mov	r4, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	4619      	mov	r1, r3
 80014fa:	2028      	movs	r0, #40	; 0x28
 80014fc:	f7ff fb0f 	bl	8000b1e <_ZnwjPv>
 8001500:	4603      	mov	r3, r0
 8001502:	4621      	mov	r1, r4
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ffcc 	bl	80014a2 <_ZN7TextBoxC1EOS_>
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}

08001512 <_ZN9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_ZNKSt6vectorI7TextBoxSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8001532:	b590      	push	{r4, r7, lr}
 8001534:	b087      	sub	sp, #28
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f91e 	bl	8001780 <_ZNKSt6vectorI7TextBoxSaIS0_EE8max_sizeEv>
 8001544:	4604      	mov	r4, r0
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff fc00 	bl	8000d4c <_ZNKSt6vectorI7TextBoxSaIS0_EE4sizeEv>
 800154c:	4603      	mov	r3, r0
 800154e:	1ae2      	subs	r2, r4, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	429a      	cmp	r2, r3
 8001554:	bf34      	ite	cc
 8001556:	2301      	movcc	r3, #1
 8001558:	2300      	movcs	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <_ZNKSt6vectorI7TextBoxSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f005 fb95 	bl	8006c90 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff fbf0 	bl	8000d4c <_ZNKSt6vectorI7TextBoxSaIS0_EE4sizeEv>
 800156c:	4604      	mov	r4, r0
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fbec 	bl	8000d4c <_ZNKSt6vectorI7TextBoxSaIS0_EE4sizeEv>
 8001574:	4603      	mov	r3, r0
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fad7 	bl	8000b36 <_ZSt3maxIjERKT_S2_S2_>
 8001588:	4603      	mov	r3, r0
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4423      	add	r3, r4
 800158e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fbdb 	bl	8000d4c <_ZNKSt6vectorI7TextBoxSaIS0_EE4sizeEv>
 8001596:	4602      	mov	r2, r0
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	4293      	cmp	r3, r2
 800159c:	d306      	bcc.n	80015ac <_ZNKSt6vectorI7TextBoxSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f8ee 	bl	8001780 <_ZNKSt6vectorI7TextBoxSaIS0_EE8max_sizeEv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d904      	bls.n	80015b6 <_ZNKSt6vectorI7TextBoxSaIS0_EE12_M_check_lenEjPKc+0x84>
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f8e7 	bl	8001780 <_ZNKSt6vectorI7TextBoxSaIS0_EE8max_sizeEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	e000      	b.n	80015b8 <_ZNKSt6vectorI7TextBoxSaIS0_EE12_M_check_lenEjPKc+0x86>
 80015b6:	697b      	ldr	r3, [r7, #20]
      }
 80015b8:	4618      	mov	r0, r3
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <_ZNSt6vectorI7TextBoxSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff9e 	bl	8001512 <_ZN9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN9__gnu_cxxmiIP7TextBoxSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f83a 	bl	8001664 <_ZNK9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEE4baseEv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	681c      	ldr	r4, [r3, #0]
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f000 f835 	bl	8001664 <_ZNK9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEE4baseEv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1ae3      	subs	r3, r4, r3
 8001600:	10db      	asrs	r3, r3, #3
 8001602:	4a03      	ldr	r2, [pc, #12]	; (8001610 <_ZN9__gnu_cxxmiIP7TextBoxSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	cccccccd 	.word	0xcccccccd

08001614 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE11_M_allocateEj+0x1e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6839      	ldr	r1, [r7, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f8ba 	bl	80017a2 <_ZNSt16allocator_traitsISaI7TextBoxEE8allocateERS1_j>
 800162e:	4603      	mov	r3, r0
 8001630:	e000      	b.n	8001634 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE11_M_allocateEj+0x20>
 8001632:	2300      	movs	r3, #0
      }
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZNSt6vectorI7TextBoxSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800164a:	f88d 4000 	strb.w	r4, [sp]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f8b3 	bl	80017c0 <_ZNSt6vectorI7TextBoxSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 800165a:	4603      	mov	r3, r0
      }
 800165c:	4618      	mov	r0, r3
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}

08001664 <_ZNK9__gnu_cxx17__normal_iteratorIP7TextBoxSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_ZSt34__uninitialized_move_if_noexcept_aIP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800167a:	b590      	push	{r4, r7, lr}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f8ab 	bl	80017e4 <_ZSt32__make_move_if_noexcept_iteratorI7TextBoxSt13move_iteratorIPS0_EET0_PT_>
 800168e:	4604      	mov	r4, r0
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f000 f8a7 	bl	80017e4 <_ZSt32__make_move_if_noexcept_iteratorI7TextBoxSt13move_iteratorIPS0_EET0_PT_>
 8001696:	4601      	mov	r1, r0
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4620      	mov	r0, r4
 800169e:	f000 f8b0 	bl	8001802 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP7TextBoxES2_S1_ET0_T_S5_S4_RSaIT1_E>
 80016a2:	4603      	mov	r3, r0
    }
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}

080016ac <_ZNSt16allocator_traitsISaI7TextBoxEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f8b3 	bl	8001824 <_ZN9__gnu_cxx13new_allocatorI7TextBoxE7destroyIS1_EEvPT_>
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZNKSt6vectorI6ButtonSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f8cf 	bl	8001874 <_ZNKSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f8af 	bl	800183c <_ZNSt6vectorI6ButtonSaIS0_EE11_S_max_sizeERKS1_>
 80016de:	4603      	mov	r3, r0
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZNSt16allocator_traitsISaI6ButtonEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80016f2:	2200      	movs	r2, #0
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8c7 	bl	800188a <_ZN9__gnu_cxx13new_allocatorI6ButtonE8allocateEjPKv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_ZNSt6vectorI6ButtonSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f8d6 	bl	80018cc <_ZSt12__relocate_aIP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001720:	4603      	mov	r3, r0
      }
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZSt32__make_move_if_noexcept_iteratorI6ButtonSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f8e4 	bl	8001906 <_ZNSt13move_iteratorIP6ButtonEC1ES1_>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP6ButtonES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f8e2 	bl	8001924 <_ZSt18uninitialized_copyISt13move_iteratorIP6ButtonES2_ET0_T_S5_S4_>
 8001760:	4603      	mov	r3, r0
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZN9__gnu_cxx13new_allocatorI6ButtonE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_ZNKSt6vectorI7TextBoxSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f8f8 	bl	8001980 <_ZNKSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f8d8 	bl	8001948 <_ZNSt6vectorI7TextBoxSaIS0_EE11_S_max_sizeERKS1_>
 8001798:	4603      	mov	r3, r0
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt16allocator_traitsISaI7TextBoxEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80017ac:	2200      	movs	r2, #0
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f8f0 	bl	8001996 <_ZN9__gnu_cxx13new_allocatorI7TextBoxE8allocateEjPKv>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_ZNSt6vectorI7TextBoxSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f8ff 	bl	80019d8 <_ZSt12__relocate_aIP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_>
 80017da:	4603      	mov	r3, r0
      }
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZSt32__make_move_if_noexcept_iteratorI7TextBoxSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f90d 	bl	8001a12 <_ZNSt13move_iteratorIP7TextBoxEC1ES1_>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP7TextBoxES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f90b 	bl	8001a30 <_ZSt18uninitialized_copyISt13move_iteratorIP7TextBoxES2_ET0_T_S5_S4_>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZN9__gnu_cxx13new_allocatorI7TextBoxE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800182e:	6838      	ldr	r0, [r7, #0]
 8001830:	f7ff f8f3 	bl	8000a1a <_ZN7TextBoxD1Ev>
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZNSt6vectorI6ButtonSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <_ZNSt6vectorI6ButtonSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8001846:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f903 	bl	8001a54 <_ZNSt16allocator_traitsISaI6ButtonEE8max_sizeERKS1_>
 800184e:	4603      	mov	r3, r0
 8001850:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001852:	f107 0208 	add.w	r2, r7, #8
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f97e 	bl	8000b5e <_ZSt3minIjERKT_S2_S2_>
 8001862:	4603      	mov	r3, r0
 8001864:	681b      	ldr	r3, [r3, #0]
      }
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	06666666 	.word	0x06666666

08001874 <_ZNKSt12_Vector_baseI6ButtonSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_ZN9__gnu_cxx13new_allocatorI6ButtonE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f8e8 	bl	8001a6c <_ZNK9__gnu_cxx13new_allocatorI6ButtonE8max_sizeEv>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	bf8c      	ite	hi
 80018a4:	2301      	movhi	r3, #1
 80018a6:	2300      	movls	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <_ZN9__gnu_cxx13new_allocatorI6ButtonE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80018ae:	f005 f9e9 	bl	8006c84 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 f9cb 	bl	8006c58 <_Znwj>
 80018c2:	4603      	mov	r3, r0
      }
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZSt12__relocate_aIP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f8d4 	bl	8001a88 <_ZSt12__niter_baseIP6ButtonET_S2_>
 80018e0:	4604      	mov	r4, r0
 80018e2:	68b8      	ldr	r0, [r7, #8]
 80018e4:	f000 f8d0 	bl	8001a88 <_ZSt12__niter_baseIP6ButtonET_S2_>
 80018e8:	4605      	mov	r5, r0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8cc 	bl	8001a88 <_ZSt12__niter_baseIP6ButtonET_S2_>
 80018f0:	4602      	mov	r2, r0
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4629      	mov	r1, r5
 80018f6:	4620      	mov	r0, r4
 80018f8:	f000 f8d1 	bl	8001a9e <_ZSt14__relocate_a_1IP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_>
 80018fc:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bdb0      	pop	{r4, r5, r7, pc}

08001906 <_ZNSt13move_iteratorIP6ButtonEC1ES1_>:
      move_iterator(iterator_type __i)
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_ZSt18uninitialized_copyISt13move_iteratorIP6ButtonES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001930:	2301      	movs	r3, #1
 8001932:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f8d6 	bl	8001aea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP6ButtonES4_EET0_T_S7_S6_>
 800193e:	4603      	mov	r3, r0
    }
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZNSt6vectorI7TextBoxSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <_ZNSt6vectorI7TextBoxSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8001952:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f8f7 	bl	8001b48 <_ZNSt16allocator_traitsISaI7TextBoxEE8max_sizeERKS1_>
 800195a:	4603      	mov	r3, r0
 800195c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800195e:	f107 0208 	add.w	r2, r7, #8
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f8f8 	bl	8000b5e <_ZSt3minIjERKT_S2_S2_>
 800196e:	4603      	mov	r3, r0
 8001970:	681b      	ldr	r3, [r3, #0]
      }
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	03333333 	.word	0x03333333

08001980 <_ZNKSt12_Vector_baseI7TextBoxSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_ZN9__gnu_cxx13new_allocatorI7TextBoxE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f8dc 	bl	8001b60 <_ZNK9__gnu_cxx13new_allocatorI7TextBoxE8max_sizeEv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	bf8c      	ite	hi
 80019b0:	2301      	movhi	r3, #1
 80019b2:	2300      	movls	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <_ZN9__gnu_cxx13new_allocatorI7TextBoxE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80019ba:	f005 f963 	bl	8006c84 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f005 f945 	bl	8006c58 <_Znwj>
 80019ce:	4603      	mov	r3, r0
      }
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_ZSt12__relocate_aIP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f8c8 	bl	8001b7c <_ZSt12__niter_baseIP7TextBoxET_S2_>
 80019ec:	4604      	mov	r4, r0
 80019ee:	68b8      	ldr	r0, [r7, #8]
 80019f0:	f000 f8c4 	bl	8001b7c <_ZSt12__niter_baseIP7TextBoxET_S2_>
 80019f4:	4605      	mov	r5, r0
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8c0 	bl	8001b7c <_ZSt12__niter_baseIP7TextBoxET_S2_>
 80019fc:	4602      	mov	r2, r0
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4629      	mov	r1, r5
 8001a02:	4620      	mov	r0, r4
 8001a04:	f000 f8c5 	bl	8001b92 <_ZSt14__relocate_a_1IP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001a08:	4603      	mov	r3, r0
    }
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}

08001a12 <_ZNSt13move_iteratorIP7TextBoxEC1ES1_>:
      move_iterator(iterator_type __i)
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_ZSt18uninitialized_copyISt13move_iteratorIP7TextBoxES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f8ca 	bl	8001bde <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP7TextBoxES4_EET0_T_S7_S6_>
 8001a4a:	4603      	mov	r3, r0
    }
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZNSt16allocator_traitsISaI6ButtonEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f805 	bl	8001a6c <_ZNK9__gnu_cxx13new_allocatorI6ButtonE8max_sizeEv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZNK9__gnu_cxx13new_allocatorI6ButtonE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <_ZNK9__gnu_cxx13new_allocatorI6ButtonE8max_sizeEv+0x18>)
      }
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	06666666 	.word	0x06666666

08001a88 <_ZSt12__niter_baseIP6ButtonET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_ZSt14__relocate_a_1IP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b087      	sub	sp, #28
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d013      	beq.n	8001ae0 <_ZSt14__relocate_a_1IP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8001ab8:	6978      	ldr	r0, [r7, #20]
 8001aba:	f000 f8bf 	bl	8001c3c <_ZSt11__addressofI6ButtonEPT_RS1_>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f8bb 	bl	8001c3c <_ZSt11__addressofI6ButtonEPT_RS1_>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4620      	mov	r0, r4
 8001ace:	f000 f8c0 	bl	8001c52 <_ZSt19__relocate_object_aI6ButtonS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3314      	adds	r3, #20
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3314      	adds	r3, #20
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e7e7      	b.n	8001ab0 <_ZSt14__relocate_a_1IP6ButtonS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8001ae0:	697b      	ldr	r3, [r7, #20]
    }
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}

08001aea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP6ButtonES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b087      	sub	sp, #28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8001afa:	f107 0208 	add.w	r2, r7, #8
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f8bf 	bl	8001c88 <_ZStneIP6ButtonEbRKSt13move_iteratorIT_ES6_>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d016      	beq.n	8001b3e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP6ButtonES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8001b10:	6978      	ldr	r0, [r7, #20]
 8001b12:	f000 f893 	bl	8001c3c <_ZSt11__addressofI6ButtonEPT_RS1_>
 8001b16:	4604      	mov	r4, r0
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f8d5 	bl	8001ccc <_ZNKSt13move_iteratorIP6ButtonEdeEv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4619      	mov	r1, r3
 8001b26:	4620      	mov	r0, r4
 8001b28:	f000 f8dc 	bl	8001ce4 <_ZSt10_ConstructI6ButtonJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f8ba 	bl	8001caa <_ZNSt13move_iteratorIP6ButtonEppEv>
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3314      	adds	r3, #20
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e7dd      	b.n	8001afa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP6ButtonES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8001b3e:	697b      	ldr	r3, [r7, #20]
	}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}

08001b48 <_ZNSt16allocator_traitsISaI7TextBoxEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f805 	bl	8001b60 <_ZNK9__gnu_cxx13new_allocatorI7TextBoxE8max_sizeEv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZNK9__gnu_cxx13new_allocatorI7TextBoxE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <_ZNK9__gnu_cxx13new_allocatorI7TextBoxE8max_sizeEv+0x18>)
      }
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	03333333 	.word	0x03333333

08001b7c <_ZSt12__niter_baseIP7TextBoxET_S2_>:
    __niter_base(_Iterator __it)
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_ZSt14__relocate_a_1IP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d013      	beq.n	8001bd4 <_ZSt14__relocate_a_1IP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f7fe ff29 	bl	8000a04 <_ZSt11__addressofI7TextBoxEPT_RS1_>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7fe ff25 	bl	8000a04 <_ZSt11__addressofI7TextBoxEPT_RS1_>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f000 f8a7 	bl	8001d14 <_ZSt19__relocate_object_aI7TextBoxS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3328      	adds	r3, #40	; 0x28
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3328      	adds	r3, #40	; 0x28
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e7e7      	b.n	8001ba4 <_ZSt14__relocate_a_1IP7TextBoxS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8001bd4:	697b      	ldr	r3, [r7, #20]
    }
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}

08001bde <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP7TextBoxES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001bde:	b590      	push	{r4, r7, lr}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8001bee:	f107 0208 	add.w	r2, r7, #8
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f8a6 	bl	8001d4a <_ZStneIP7TextBoxEbRKSt13move_iteratorIT_ES6_>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d016      	beq.n	8001c32 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP7TextBoxES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7fe fefd 	bl	8000a04 <_ZSt11__addressofI7TextBoxEPT_RS1_>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 f8bc 	bl	8001d8e <_ZNKSt13move_iteratorIP7TextBoxEdeEv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 f8c3 	bl	8001da6 <_ZSt10_ConstructI7TextBoxJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f8a1 	bl	8001d6c <_ZNSt13move_iteratorIP7TextBoxEppEv>
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3328      	adds	r3, #40	; 0x28
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e7dd      	b.n	8001bee <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP7TextBoxES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8001c32:	697b      	ldr	r3, [r7, #20]
	}
 8001c34:	4618      	mov	r0, r3
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}

08001c3c <_ZSt11__addressofI6ButtonEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_ZSt19__relocate_object_aI6ButtonS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8001c5e:	68b8      	ldr	r0, [r7, #8]
 8001c60:	f7ff f89d 	bl	8000d9e <_ZSt4moveIR6ButtonEONSt16remove_referenceIT_E4typeEOS3_>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff f916 	bl	8000e9c <_ZNSt16allocator_traitsISaI6ButtonEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8001c70:	68b8      	ldr	r0, [r7, #8]
 8001c72:	f7ff ffe3 	bl	8001c3c <_ZSt11__addressofI6ButtonEPT_RS1_>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fc04 	bl	8001488 <_ZNSt16allocator_traitsISaI6ButtonEE7destroyIS0_EEvRS1_PT_>
    }
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_ZStneIP6ButtonEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f89d 	bl	8001dd4 <_ZSteqIP6ButtonEbRKSt13move_iteratorIT_ES6_>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZNSt13move_iteratorIP6ButtonEppEv>:
      operator++()
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f103 0214 	add.w	r2, r3, #20
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	601a      	str	r2, [r3, #0]
	return *this;
 8001cbe:	687b      	ldr	r3, [r7, #4]
      }
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_ZNKSt13move_iteratorIP6ButtonEdeEv>:
      operator*() const
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_ZSt10_ConstructI6ButtonJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f7ff f8c9 	bl	8000e86 <_ZSt7forwardI6ButtonEOT_RNSt16remove_referenceIS1_E4typeE>
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	2014      	movs	r0, #20
 8001cfc:	f7fe ff0f 	bl	8000b1e <_ZnwjPv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461c      	mov	r4, r3
 8001d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	6023      	str	r3, [r4, #0]
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}

08001d14 <_ZSt19__relocate_object_aI7TextBoxS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff f876 	bl	8000e12 <_ZSt4moveIR7TextBoxEONSt16remove_referenceIT_E4typeEOS3_>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff f9c2 	bl	80010b6 <_ZNSt16allocator_traitsISaI7TextBoxEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	f7fe fe66 	bl	8000a04 <_ZSt11__addressofI7TextBoxEPT_RS1_>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fcb5 	bl	80016ac <_ZNSt16allocator_traitsISaI7TextBoxEE7destroyIS0_EEvRS1_PT_>
    }
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_ZStneIP7TextBoxEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8001d54:	6839      	ldr	r1, [r7, #0]
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f852 	bl	8001e00 <_ZSteqIP7TextBoxEbRKSt13move_iteratorIT_ES6_>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f083 0301 	eor.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZNSt13move_iteratorIP7TextBoxEppEv>:
      operator++()
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]
	return *this;
 8001d80:	687b      	ldr	r3, [r7, #4]
      }
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_ZNKSt13move_iteratorIP7TextBoxEdeEv>:
      operator*() const
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_ZSt10_ConstructI7TextBoxJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8001da6:	b590      	push	{r4, r7, lr}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8001db0:	6838      	ldr	r0, [r7, #0]
 8001db2:	f7ff f975 	bl	80010a0 <_ZSt7forwardI7TextBoxEOT_RNSt16remove_referenceIS1_E4typeE>
 8001db6:	4604      	mov	r4, r0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2028      	movs	r0, #40	; 0x28
 8001dbe:	f7fe feae 	bl	8000b1e <_ZnwjPv>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fb6b 	bl	80014a2 <_ZN7TextBoxC1EOS_>
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}

08001dd4 <_ZSteqIP6ButtonEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f824 	bl	8001e2c <_ZNKSt13move_iteratorIP6ButtonE4baseEv>
 8001de4:	4604      	mov	r4, r0
 8001de6:	6838      	ldr	r0, [r7, #0]
 8001de8:	f000 f820 	bl	8001e2c <_ZNKSt13move_iteratorIP6ButtonE4baseEv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	429c      	cmp	r4, r3
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}

08001e00 <_ZSteqIP7TextBoxEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f81a 	bl	8001e44 <_ZNKSt13move_iteratorIP7TextBoxE4baseEv>
 8001e10:	4604      	mov	r4, r0
 8001e12:	6838      	ldr	r0, [r7, #0]
 8001e14:	f000 f816 	bl	8001e44 <_ZNKSt13move_iteratorIP7TextBoxE4baseEv>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	429c      	cmp	r4, r3
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}

08001e2c <_ZNKSt13move_iteratorIP6ButtonE4baseEv>:
      base() const
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_ZNKSt13move_iteratorIP7TextBoxE4baseEv>:
      base() const
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_ZNSt12_Vector_baseI6ButtonSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f8b8 	bl	8001fdc <_ZNSt12_Vector_baseI6ButtonSaIS0_EE12_Vector_implC1Ev>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_ZNSt6vectorI6ButtonSaIS0_EEC1Ev>:
      vector() = default;
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ffeb 	bl	8001e5c <_ZNSt12_Vector_baseI6ButtonSaIS0_EEC1Ev>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f8ae 	bl	8001ffc <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE12_Vector_implC1Ev>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_ZNSt6vectorI7TextBoxSaIS0_EEC1Ev>:
      vector() = default;
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ffeb 	bl	8001e90 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EEC1Ev>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZN3GUIC1Ev>:
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ffd1 	bl	8001e76 <_ZNSt6vectorI6ButtonSaIS0_EEC1Ev>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	330c      	adds	r3, #12
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ffe6 	bl	8001eaa <_ZNSt6vectorI7TextBoxSaIS0_EEC1Ev>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN10GUIBuilderC1Ev>:
#include "GUIBuilder.h"

GUIBuilder::GUIBuilder()
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
{
	m_gui = new GUI();
 8001ef0:	201c      	movs	r0, #28
 8001ef2:	f004 feb1 	bl	8006c58 <_Znwj>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461c      	mov	r4, r3
 8001efa:	4622      	mov	r2, r4
 8001efc:	2300      	movs	r3, #0
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	6053      	str	r3, [r2, #4]
 8001f02:	6093      	str	r3, [r2, #8]
 8001f04:	60d3      	str	r3, [r2, #12]
 8001f06:	6113      	str	r3, [r2, #16]
 8001f08:	6153      	str	r3, [r2, #20]
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ffd9 	bl	8001ec4 <_ZN3GUIC1Ev>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601c      	str	r4, [r3, #0]
}
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <_ZN10GUIBuilderD1Ev>:

GUIBuilder::~GUIBuilder()
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
{
	delete m_gui;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681c      	ldr	r4, [r3, #0]
 8001f2c:	2c00      	cmp	r4, #0
 8001f2e:	d006      	beq.n	8001f3e <_ZN10GUIBuilderD1Ev+0x1e>
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7fe fbcf 	bl	80006d4 <_ZN3GUID1Ev>
 8001f36:	211c      	movs	r1, #28
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f004 fe8b 	bl	8006c54 <_ZdlPvj>
}
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}

08001f48 <_ZN10GUIBuilder9addButtonE11ButtonShape5Coloriiii>:

void GUIBuilder::addButton(ButtonShape shape, Color color, int x, int y, int high, int width)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af04      	add	r7, sp, #16
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	72fb      	strb	r3, [r7, #11]
 8001f56:	4613      	mov	r3, r2
 8001f58:	813b      	strh	r3, [r7, #8]
	m_gui->addButton(shape, color, x, y, high, width);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	893a      	ldrh	r2, [r7, #8]
 8001f60:	7af9      	ldrb	r1, [r7, #11]
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f7fe fe09 	bl	8000b86 <_ZN3GUI9addButtonE11ButtonShape5Coloriiii>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_ZN10GUIBuilder10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>:

void GUIBuilder::addTextBox(std::string text, Color color, int x, int y, int size)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b08d      	sub	sp, #52	; 0x34
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80fb      	strh	r3, [r7, #6]
	m_gui->addTextBox(text, color, x, y, size);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681c      	ldr	r4, [r3, #0]
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 ff3a 	bl	8006e10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	f107 0110 	add.w	r1, r7, #16
 8001fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7fe fe0b 	bl	8000bc8 <_ZN3GUI10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fef6 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001fbc:	bf00      	nop
 8001fbe:	372c      	adds	r7, #44	; 0x2c
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}

08001fc4 <_ZN10GUIBuilder9getResultEv>:
	delete m_gui;
	m_gui = new GUI();
}

GUI* GUIBuilder::getResult()
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	return m_gui;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_ZNSt12_Vector_baseI6ButtonSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f819 	bl	800201c <_ZNSaI6ButtonEC1Ev>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f821 	bl	8002034 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f829 	bl	800205c <_ZNSaI7TextBoxEC1Ev>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f831 	bl	8002074 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_ZNSaI6ButtonEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f839 	bl	800209c <_ZN9__gnu_cxx13new_allocatorI6ButtonEC1Ev>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZNSt12_Vector_baseI6ButtonSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
	{ }
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_ZNSaI7TextBoxEC1Ev>:
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f824 	bl	80020b2 <_ZN9__gnu_cxx13new_allocatorI7TextBoxEC1Ev>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZNSt12_Vector_baseI7TextBoxSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
	{ }
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_ZN9__gnu_cxx13new_allocatorI6ButtonEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_ZN9__gnu_cxx13new_allocatorI7TextBoxEC1Ev>:
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LCD_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_Reset(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    LCD_RST_1;
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	480e      	ldr	r0, [pc, #56]	; (800210c <LCD_Reset+0x44>)
 80020d4:	f002 fb8c 	bl	80047f0 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 80020d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020dc:	f7fe fd00 	bl	8000ae0 <Driver_Delay_ms>
    LCD_RST_0;
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020e6:	4809      	ldr	r0, [pc, #36]	; (800210c <LCD_Reset+0x44>)
 80020e8:	f002 fb82 	bl	80047f0 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 80020ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020f0:	f7fe fcf6 	bl	8000ae0 <Driver_Delay_ms>
    LCD_RST_1;
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020fa:	4804      	ldr	r0, [pc, #16]	; (800210c <LCD_Reset+0x44>)
 80020fc:	f002 fb78 	bl	80047f0 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8002100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002104:	f7fe fcec 	bl	8000ae0 <Driver_Delay_ms>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020000 	.word	0x40020000

08002110 <LCD_SetBackLight>:

static void LCD_SetBackLight(uint16_t value)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
	PWM_SetValue(value);
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fc95 	bl	8000a4c <PWM_SetValue>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213c:	480a      	ldr	r0, [pc, #40]	; (8002168 <LCD_WriteReg+0x3c>)
 800213e:	f002 fb57 	bl	80047f0 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8002142:	2200      	movs	r2, #0
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4809      	ldr	r0, [pc, #36]	; (800216c <LCD_WriteReg+0x40>)
 8002148:	f002 fb52 	bl	80047f0 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fc9a 	bl	8000a88 <SPI4W_Write_Byte>
    LCD_CS_1;
 8002154:	2201      	movs	r2, #1
 8002156:	2140      	movs	r1, #64	; 0x40
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <LCD_WriteReg+0x40>)
 800215a:	f002 fb49 	bl	80047f0 <HAL_GPIO_WritePin>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400

08002170 <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 800217a:	2201      	movs	r2, #1
 800217c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LCD_WriteData+0x48>)
 8002182:	f002 fb35 	bl	80047f0 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8002186:	2200      	movs	r2, #0
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	480c      	ldr	r0, [pc, #48]	; (80021bc <LCD_WriteData+0x4c>)
 800218c:	f002 fb30 	bl	80047f0 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data >> 8);
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	121b      	asrs	r3, r3, #8
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fc76 	bl	8000a88 <SPI4W_Write_Byte>
    SPI4W_Write_Byte(Data & 0XFF);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fc72 	bl	8000a88 <SPI4W_Write_Byte>
    LCD_CS_1;
 80021a4:	2201      	movs	r2, #1
 80021a6:	2140      	movs	r1, #64	; 0x40
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <LCD_WriteData+0x4c>)
 80021aa:	f002 fb21 	bl	80047f0 <HAL_GPIO_WritePin>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400

080021c0 <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d2:	4813      	ldr	r0, [pc, #76]	; (8002220 <LCD_Write_AllData+0x60>)
 80021d4:	f002 fb0c 	bl	80047f0 <HAL_GPIO_WritePin>
    LCD_CS_0;
 80021d8:	2200      	movs	r2, #0
 80021da:	2140      	movs	r1, #64	; 0x40
 80021dc:	4811      	ldr	r0, [pc, #68]	; (8002224 <LCD_Write_AllData+0x64>)
 80021de:	f002 fb07 	bl	80047f0 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e00e      	b.n	8002206 <LCD_Write_AllData+0x46>
        SPI4W_Write_Byte(Data >> 8);
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fc49 	bl	8000a88 <SPI4W_Write_Byte>
        SPI4W_Write_Byte(Data & 0XFF);
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fc44 	bl	8000a88 <SPI4W_Write_Byte>
    for(i = 0; i < DataLen; i++) {
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d3ec      	bcc.n	80021e8 <LCD_Write_AllData+0x28>
    }
    LCD_CS_1;
 800220e:	2201      	movs	r2, #1
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	4804      	ldr	r0, [pc, #16]	; (8002224 <LCD_Write_AllData+0x64>)
 8002214:	f002 faec 	bl	80047f0 <HAL_GPIO_WritePin>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400

08002228 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 800222c:	20f9      	movs	r0, #249	; 0xf9
 800222e:	f7ff ff7d 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x00);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff ff9c 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x08);
 8002238:	2008      	movs	r0, #8
 800223a:	f7ff ff99 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xC0);
 800223e:	20c0      	movs	r0, #192	; 0xc0
 8002240:	f7ff ff74 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8002244:	2019      	movs	r0, #25
 8002246:	f7ff ff93 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 800224a:	201a      	movs	r0, #26
 800224c:	f7ff ff90 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8002250:	20c1      	movs	r0, #193	; 0xc1
 8002252:	f7ff ff6b 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8002256:	2045      	movs	r0, #69	; 0x45
 8002258:	f7ff ff8a 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff ff87 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 8002262:	20c2      	movs	r0, #194	; 0xc2
 8002264:	f7ff ff62 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x33);
 8002268:	2033      	movs	r0, #51	; 0x33
 800226a:	f7ff ff81 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0XC5);
 800226e:	20c5      	movs	r0, #197	; 0xc5
 8002270:	f7ff ff5c 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x00);
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff ff7b 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 800227a:	2028      	movs	r0, #40	; 0x28
 800227c:	f7ff ff78 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 8002280:	20b1      	movs	r0, #177	; 0xb1
 8002282:	f7ff ff53 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 8002286:	20a0      	movs	r0, #160	; 0xa0
 8002288:	f7ff ff72 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x11);
 800228c:	2011      	movs	r0, #17
 800228e:	f7ff ff6f 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xB4);
 8002292:	20b4      	movs	r0, #180	; 0xb4
 8002294:	f7ff ff4a 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 8002298:	2002      	movs	r0, #2
 800229a:	f7ff ff69 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 800229e:	20b6      	movs	r0, #182	; 0xb6
 80022a0:	f7ff ff44 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff ff63 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 80022aa:	2042      	movs	r0, #66	; 0x42
 80022ac:	f7ff ff60 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x3B);
 80022b0:	203b      	movs	r0, #59	; 0x3b
 80022b2:	f7ff ff5d 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xB7);
 80022b6:	20b7      	movs	r0, #183	; 0xb7
 80022b8:	f7ff ff38 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x07);
 80022bc:	2007      	movs	r0, #7
 80022be:	f7ff ff57 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0xE0);
 80022c2:	20e0      	movs	r0, #224	; 0xe0
 80022c4:	f7ff ff32 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x1F);
 80022c8:	201f      	movs	r0, #31
 80022ca:	f7ff ff51 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x25);
 80022ce:	2025      	movs	r0, #37	; 0x25
 80022d0:	f7ff ff4e 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x22);
 80022d4:	2022      	movs	r0, #34	; 0x22
 80022d6:	f7ff ff4b 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x0B);
 80022da:	200b      	movs	r0, #11
 80022dc:	f7ff ff48 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x06);
 80022e0:	2006      	movs	r0, #6
 80022e2:	f7ff ff45 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x0A);
 80022e6:	200a      	movs	r0, #10
 80022e8:	f7ff ff42 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x4E);
 80022ec:	204e      	movs	r0, #78	; 0x4e
 80022ee:	f7ff ff3f 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0xC6);
 80022f2:	20c6      	movs	r0, #198	; 0xc6
 80022f4:	f7ff ff3c 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x39);
 80022f8:	2039      	movs	r0, #57	; 0x39
 80022fa:	f7ff ff39 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff ff36 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff ff33 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 800230a:	2000      	movs	r0, #0
 800230c:	f7ff ff30 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ff2d 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff ff2a 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff ff27 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0XE1);
 8002322:	20e1      	movs	r0, #225	; 0xe1
 8002324:	f7ff ff02 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8002328:	201f      	movs	r0, #31
 800232a:	f7ff ff21 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x3F);
 800232e:	203f      	movs	r0, #63	; 0x3f
 8002330:	f7ff ff1e 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8002334:	203f      	movs	r0, #63	; 0x3f
 8002336:	f7ff ff1b 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x0F);
 800233a:	200f      	movs	r0, #15
 800233c:	f7ff ff18 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x1F);
 8002340:	201f      	movs	r0, #31
 8002342:	f7ff ff15 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8002346:	200f      	movs	r0, #15
 8002348:	f7ff ff12 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x46);
 800234c:	2046      	movs	r0, #70	; 0x46
 800234e:	f7ff ff0f 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x49);
 8002352:	2049      	movs	r0, #73	; 0x49
 8002354:	f7ff ff0c 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x31);
 8002358:	2031      	movs	r0, #49	; 0x31
 800235a:	f7ff ff09 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x05);
 800235e:	2005      	movs	r0, #5
 8002360:	f7ff ff06 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x09);
 8002364:	2009      	movs	r0, #9
 8002366:	f7ff ff03 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x03);
 800236a:	2003      	movs	r0, #3
 800236c:	f7ff ff00 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x1C);
 8002370:	201c      	movs	r0, #28
 8002372:	f7ff fefd 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x1A);
 8002376:	201a      	movs	r0, #26
 8002378:	f7ff fefa 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 800237c:	2000      	movs	r0, #0
 800237e:	f7ff fef7 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0XF1);
 8002382:	20f1      	movs	r0, #241	; 0xf1
 8002384:	f7ff fed2 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x36);
 8002388:	2036      	movs	r0, #54	; 0x36
 800238a:	f7ff fef1 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x04);
 800238e:	2004      	movs	r0, #4
 8002390:	f7ff feee 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff feeb 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x3C);
 800239a:	203c      	movs	r0, #60	; 0x3c
 800239c:	f7ff fee8 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80023a0:	200f      	movs	r0, #15
 80023a2:	f7ff fee5 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80023a6:	200f      	movs	r0, #15
 80023a8:	f7ff fee2 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0xA4);
 80023ac:	20a4      	movs	r0, #164	; 0xa4
 80023ae:	f7ff fedf 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x02);
 80023b2:	2002      	movs	r0, #2
 80023b4:	f7ff fedc 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0XF2);
 80023b8:	20f2      	movs	r0, #242	; 0xf2
 80023ba:	f7ff feb7 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x18);
 80023be:	2018      	movs	r0, #24
 80023c0:	f7ff fed6 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0xA3);
 80023c4:	20a3      	movs	r0, #163	; 0xa3
 80023c6:	f7ff fed3 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x12);
 80023ca:	2012      	movs	r0, #18
 80023cc:	f7ff fed0 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x02);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f7ff fecd 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x32);
 80023d6:	2032      	movs	r0, #50	; 0x32
 80023d8:	f7ff feca 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x12);
 80023dc:	2012      	movs	r0, #18
 80023de:	f7ff fec7 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0xFF);
 80023e2:	20ff      	movs	r0, #255	; 0xff
 80023e4:	f7ff fec4 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x32);
 80023e8:	2032      	movs	r0, #50	; 0x32
 80023ea:	f7ff fec1 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7ff febe 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0XF4);
 80023f4:	20f4      	movs	r0, #244	; 0xf4
 80023f6:	f7ff fe99 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x40);
 80023fa:	2040      	movs	r0, #64	; 0x40
 80023fc:	f7ff feb8 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff feb5 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x08);
 8002406:	2008      	movs	r0, #8
 8002408:	f7ff feb2 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x91);
 800240c:	2091      	movs	r0, #145	; 0x91
 800240e:	f7ff feaf 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x04);
 8002412:	2004      	movs	r0, #4
 8002414:	f7ff feac 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0XF8);
 8002418:	20f8      	movs	r0, #248	; 0xf8
 800241a:	f7ff fe87 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x21);
 800241e:	2021      	movs	r0, #33	; 0x21
 8002420:	f7ff fea6 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(0x04);
 8002424:	2004      	movs	r0, #4
 8002426:	f7ff fea3 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 800242a:	203a      	movs	r0, #58	; 0x3a
 800242c:	f7ff fe7e 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0x55);
 8002430:	2055      	movs	r0, #85	; 0x55
 8002432:	f7ff fe9d 	bl	8002170 <LCD_WriteData>

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 8002446:	2300      	movs	r3, #0
 8002448:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 800244a:	2300      	movs	r3, #0
 800244c:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b07      	cmp	r3, #7
 8002452:	d83b      	bhi.n	80024cc <LCD_SetGramScanWay+0x90>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <LCD_SetGramScanWay+0x20>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800247d 	.word	0x0800247d
 8002460:	08002487 	.word	0x08002487
 8002464:	08002491 	.word	0x08002491
 8002468:	0800249b 	.word	0x0800249b
 800246c:	080024a5 	.word	0x080024a5
 8002470:	080024af 	.word	0x080024af
 8002474:	080024b9 	.word	0x080024b9
 8002478:	080024c3 	.word	0x080024c3
    case L2R_U2D:
        MemoryAccessReg_Data = 0x08;//0x08 | 0X8
 800247c:	2308      	movs	r3, #8
 800247e:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 8002480:	2322      	movs	r3, #34	; 0x22
 8002482:	81bb      	strh	r3, [r7, #12]
        break;
 8002484:	e022      	b.n	80024cc <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;
 8002486:	2308      	movs	r3, #8
 8002488:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 800248a:	2362      	movs	r3, #98	; 0x62
 800248c:	81bb      	strh	r3, [r7, #12]
        break;
 800248e:	e01d      	b.n	80024cc <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;
 8002490:	2308      	movs	r3, #8
 8002492:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 8002494:	2302      	movs	r3, #2
 8002496:	81bb      	strh	r3, [r7, #12]
        break;
 8002498:	e018      	b.n	80024cc <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC
        MemoryAccessReg_Data = 0x08;
 800249a:	2308      	movs	r3, #8
 800249c:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 800249e:	2342      	movs	r3, #66	; 0x42
 80024a0:	81bb      	strh	r3, [r7, #12]
        break;
 80024a2:	e013      	b.n	80024cc <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;
 80024a4:	2328      	movs	r3, #40	; 0x28
 80024a6:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 80024a8:	2322      	movs	r3, #34	; 0x22
 80024aa:	81bb      	strh	r3, [r7, #12]
        break;
 80024ac:	e00e      	b.n	80024cc <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6
        MemoryAccessReg_Data = 0x28;
 80024ae:	2328      	movs	r3, #40	; 0x28
 80024b0:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 80024b2:	2302      	movs	r3, #2
 80024b4:	81bb      	strh	r3, [r7, #12]
        break;
 80024b6:	e009      	b.n	80024cc <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA
        MemoryAccessReg_Data = 0x28;
 80024b8:	2328      	movs	r3, #40	; 0x28
 80024ba:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 80024bc:	2362      	movs	r3, #98	; 0x62
 80024be:	81bb      	strh	r3, [r7, #12]
        break;
 80024c0:	e004      	b.n	80024cc <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;
 80024c2:	2328      	movs	r3, #40	; 0x28
 80024c4:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 80024c6:	2342      	movs	r3, #66	; 0x42
 80024c8:	81bb      	strh	r3, [r7, #12]
        break;
 80024ca:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <LCD_SetGramScanWay+0x100>)
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <LCD_SetGramScanWay+0xae>
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d005      	beq.n	80024ea <LCD_SetGramScanWay+0xae>
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d002      	beq.n	80024ea <LCD_SetGramScanWay+0xae>
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d108      	bne.n	80024fc <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <LCD_SetGramScanWay+0x100>)
 80024ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024f0:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <LCD_SetGramScanWay+0x100>)
 80024f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024f8:	805a      	strh	r2, [r3, #2]
 80024fa:	e007      	b.n	800250c <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <LCD_SetGramScanWay+0x100>)
 80024fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002502:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <LCD_SetGramScanWay+0x100>)
 8002506:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800250a:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 800250c:	20b6      	movs	r0, #182	; 0xb6
 800250e:	f7ff fe0d 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(0X00);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff fe2c 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8002518:	89bb      	ldrh	r3, [r7, #12]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe27 	bl	8002170 <LCD_WriteData>

    LCD_WriteReg(0x36);
 8002522:	2036      	movs	r0, #54	; 0x36
 8002524:	f7ff fe02 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fe1f 	bl	8002170 <LCD_WriteData>
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200000d8 	.word	0x200000d8

08002540 <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	460a      	mov	r2, r1
 800254a:	71fb      	strb	r3, [r7, #7]
 800254c:	4613      	mov	r3, r2
 800254e:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 8002550:	f7ff fdba 	bl	80020c8 <LCD_Reset>

	if(LCD_BLval > 1000)
 8002554:	88bb      	ldrh	r3, [r7, #4]
 8002556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800255a:	d902      	bls.n	8002562 <LCD_Init+0x22>
		LCD_BLval = 1000;
 800255c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002560:	80bb      	strh	r3, [r7, #4]
	LCD_SetBackLight(LCD_BLval);
 8002562:	88bb      	ldrh	r3, [r7, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fdd3 	bl	8002110 <LCD_SetBackLight>
	
    //Set the initialization register
    LCD_InitReg();
 800256a:	f7ff fe5d 	bl	8002228 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff63 	bl	800243c <LCD_SetGramScanWay>
    Driver_Delay_ms(200);
 8002576:	20c8      	movs	r0, #200	; 0xc8
 8002578:	f7fe fab2 	bl	8000ae0 <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 800257c:	2011      	movs	r0, #17
 800257e:	f7ff fdd5 	bl	800212c <LCD_WriteReg>
    Driver_Delay_ms(120);
 8002582:	2078      	movs	r0, #120	; 0x78
 8002584:	f7fe faac 	bl	8000ae0 <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 8002588:	2029      	movs	r0, #41	; 0x29
 800258a:	f7ff fdcf 	bl	800212c <LCD_WriteReg>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 8002596:	b590      	push	{r4, r7, lr}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	4604      	mov	r4, r0
 800259e:	4608      	mov	r0, r1
 80025a0:	4611      	mov	r1, r2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	80fb      	strh	r3, [r7, #6]
 80025a8:	4603      	mov	r3, r0
 80025aa:	80bb      	strh	r3, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 80025b4:	202a      	movs	r0, #42	; 0x2a
 80025b6:	f7ff fdb9 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b29b      	uxth	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fdd4 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fdcf 	bl	8002170 <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	121b      	asrs	r3, r3, #8
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fdc8 	bl	8002170 <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fdc1 	bl	8002170 <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 80025ee:	202b      	movs	r0, #43	; 0x2b
 80025f0:	f7ff fd9c 	bl	800212c <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 80025f4:	88bb      	ldrh	r3, [r7, #4]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fdb7 	bl	8002170 <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fdb2 	bl	8002170 <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 800260c:	883b      	ldrh	r3, [r7, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	121b      	asrs	r3, r3, #8
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fdab 	bl	8002170 <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 800261a:	883b      	ldrh	r3, [r7, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fda4 	bl	8002170 <LCD_WriteData>
    LCD_WriteReg(0x2C);
 8002628:	202c      	movs	r0, #44	; 0x2c
 800262a:	f7ff fd7f 	bl	800212c <LCD_WriteReg>
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bd90      	pop	{r4, r7, pc}

08002636 <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	460a      	mov	r2, r1
 8002640:	80fb      	strh	r3, [r7, #6]
 8002642:	4613      	mov	r3, r2
 8002644:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 8002646:	88bb      	ldrh	r3, [r7, #4]
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	88b9      	ldrh	r1, [r7, #4]
 800264c:	88f8      	ldrh	r0, [r7, #6]
 800264e:	f7ff ffa2 	bl	8002596 <LCD_SetWindow>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	80fb      	strh	r3, [r7, #6]
 8002664:	460b      	mov	r3, r1
 8002666:	80bb      	strh	r3, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 800266c:	88bb      	ldrh	r3, [r7, #4]
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	fb02 f203 	mul.w	r2, r2, r3
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fda1 	bl	80021c0 <LCD_Write_AllData>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
 8002692:	460b      	mov	r3, r1
 8002694:	80bb      	strh	r3, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <LCD_SetPointlColor+0x48>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d810      	bhi.n	80026c6 <LCD_SetPointlColor+0x3e>
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <LCD_SetPointlColor+0x48>)
 80026a6:	885b      	ldrh	r3, [r3, #2]
 80026a8:	88ba      	ldrh	r2, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d80b      	bhi.n	80026c6 <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 80026ae:	88ba      	ldrh	r2, [r7, #4]
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ffbe 	bl	8002636 <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	2201      	movs	r2, #1
 80026be:	2101      	movs	r1, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ffca 	bl	800265a <LCD_SetColor>
    }
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200000d8 	.word	0x200000d8

080026d4 <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	80fb      	strh	r3, [r7, #6]
 80026e6:	4603      	mov	r3, r0
 80026e8:	80bb      	strh	r3, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]
 80026ee:	4613      	mov	r3, r2
 80026f0:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d915      	bls.n	8002726 <LCD_SetArealColor+0x52>
 80026fa:	883a      	ldrh	r2, [r7, #0]
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d911      	bls.n	8002726 <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 8002702:	883b      	ldrh	r3, [r7, #0]
 8002704:	887a      	ldrh	r2, [r7, #2]
 8002706:	88b9      	ldrh	r1, [r7, #4]
 8002708:	88f8      	ldrh	r0, [r7, #6]
 800270a:	f7ff ff44 	bl	8002596 <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	b299      	uxth	r1, r3
 8002716:	883a      	ldrh	r2, [r7, #0]
 8002718:	88bb      	ldrh	r3, [r7, #4]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	b29a      	uxth	r2, r3
 800271e:	8b3b      	ldrh	r3, [r7, #24]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff9a 	bl	800265a <LCD_SetColor>
    }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bd90      	pop	{r4, r7, pc}
	...

08002730 <LCD_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_Clear(COLOR  Color)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af02      	add	r7, sp, #8
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <LCD_Clear+0x28>)
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <LCD_Clear+0x28>)
 8002740:	8859      	ldrh	r1, [r3, #2]
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	460b      	mov	r3, r1
 8002748:	2100      	movs	r1, #0
 800274a:	2000      	movs	r0, #0
 800274c:	f7ff ffc2 	bl	80026d4 <LCD_SetArealColor>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200000d8 	.word	0x200000d8

0800275c <GUI_Swop>:
extern LCD_DIS sLCD_DIS;
/******************************************************************************
function:	Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	460a      	mov	r2, r1
 8002766:	80fb      	strh	r3, [r7, #6]
 8002768:	4613      	mov	r3, r2
 800276a:	80bb      	strh	r3, [r7, #4]
    POINT Temp;
    Temp = Point1;
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	81fb      	strh	r3, [r7, #14]
    Point1 = Point2;
 8002770:	88bb      	ldrh	r3, [r7, #4]
 8002772:	80fb      	strh	r3, [r7, #6]
    Point2 = Temp;
 8002774:	89fb      	ldrh	r3, [r7, #14]
 8002776:	80bb      	strh	r3, [r7, #4]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <GUI_DrawPoint>:
	Color		:   Set color
	Dot_Pixel	:	point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	4604      	mov	r4, r0
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	461a      	mov	r2, r3
 8002792:	4623      	mov	r3, r4
 8002794:	80fb      	strh	r3, [r7, #6]
 8002796:	4603      	mov	r3, r0
 8002798:	80bb      	strh	r3, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	807b      	strh	r3, [r7, #2]
 800279e:	4613      	mov	r3, r2
 80027a0:	707b      	strb	r3, [r7, #1]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <GUI_DrawPoint+0xec>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d85c      	bhi.n	8002866 <GUI_DrawPoint+0xe2>
 80027ac:	4b30      	ldr	r3, [pc, #192]	; (8002870 <GUI_DrawPoint+0xec>)
 80027ae:	885b      	ldrh	r3, [r3, #2]
 80027b0:	88ba      	ldrh	r2, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d857      	bhi.n	8002866 <GUI_DrawPoint+0xe2>
        //DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
        return;
    }

    uint16_t XDir_Num , YDir_Num;
    if(DOT_STYLE == DOT_STYLE_DFT) {
 80027b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d12c      	bne.n	8002818 <GUI_DrawPoint+0x94>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80027be:	2300      	movs	r3, #0
 80027c0:	81fb      	strh	r3, [r7, #14]
 80027c2:	e022      	b.n	800280a <GUI_DrawPoint+0x86>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80027c4:	2300      	movs	r3, #0
 80027c6:	81bb      	strh	r3, [r7, #12]
 80027c8:	e016      	b.n	80027f8 <GUI_DrawPoint+0x74>
                LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	4413      	add	r3, r2
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	787b      	ldrb	r3, [r7, #1]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	b298      	uxth	r0, r3
 80027da:	88ba      	ldrh	r2, [r7, #4]
 80027dc:	89bb      	ldrh	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	787b      	ldrb	r3, [r7, #1]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7ff ff4b 	bl	8002688 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80027f2:	89bb      	ldrh	r3, [r7, #12]
 80027f4:	3301      	adds	r3, #1
 80027f6:	81bb      	strh	r3, [r7, #12]
 80027f8:	89ba      	ldrh	r2, [r7, #12]
 80027fa:	787b      	ldrb	r3, [r7, #1]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	3b01      	subs	r3, #1
 8002800:	429a      	cmp	r2, r3
 8002802:	dbe2      	blt.n	80027ca <GUI_DrawPoint+0x46>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8002804:	89fb      	ldrh	r3, [r7, #14]
 8002806:	3301      	adds	r3, #1
 8002808:	81fb      	strh	r3, [r7, #14]
 800280a:	89fa      	ldrh	r2, [r7, #14]
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	429a      	cmp	r2, r3
 8002814:	dbd6      	blt.n	80027c4 <GUI_DrawPoint+0x40>
 8002816:	e027      	b.n	8002868 <GUI_DrawPoint+0xe4>
            }
        }
    } else {
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8002818:	2300      	movs	r3, #0
 800281a:	81fb      	strh	r3, [r7, #14]
 800281c:	e01d      	b.n	800285a <GUI_DrawPoint+0xd6>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800281e:	2300      	movs	r3, #0
 8002820:	81bb      	strh	r3, [r7, #12]
 8002822:	e012      	b.n	800284a <GUI_DrawPoint+0xc6>
                LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	4413      	add	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b298      	uxth	r0, r3
 8002830:	88ba      	ldrh	r2, [r7, #4]
 8002832:	89bb      	ldrh	r3, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	887a      	ldrh	r2, [r7, #2]
 800283e:	4619      	mov	r1, r3
 8002840:	f7ff ff22 	bl	8002688 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8002844:	89bb      	ldrh	r3, [r7, #12]
 8002846:	3301      	adds	r3, #1
 8002848:	81bb      	strh	r3, [r7, #12]
 800284a:	787b      	ldrb	r3, [r7, #1]
 800284c:	b29b      	uxth	r3, r3
 800284e:	89ba      	ldrh	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d3e7      	bcc.n	8002824 <GUI_DrawPoint+0xa0>
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	3301      	adds	r3, #1
 8002858:	81fb      	strh	r3, [r7, #14]
 800285a:	787b      	ldrb	r3, [r7, #1]
 800285c:	b29b      	uxth	r3, r3
 800285e:	89fa      	ldrh	r2, [r7, #14]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3dc      	bcc.n	800281e <GUI_DrawPoint+0x9a>
 8002864:	e000      	b.n	8002868 <GUI_DrawPoint+0xe4>
        return;
 8002866:	bf00      	nop
            }
        }
    }
}
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	200000d8 	.word	0x200000d8

08002874 <GUI_DrawLine>:
	Yend   ：End point y coordinate
	Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b08d      	sub	sp, #52	; 0x34
 8002878:	af02      	add	r7, sp, #8
 800287a:	4604      	mov	r4, r0
 800287c:	4608      	mov	r0, r1
 800287e:	4611      	mov	r1, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4623      	mov	r3, r4
 8002884:	80fb      	strh	r3, [r7, #6]
 8002886:	4603      	mov	r3, r0
 8002888:	80bb      	strh	r3, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	807b      	strh	r3, [r7, #2]
 800288e:	4613      	mov	r3, r2
 8002890:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8002892:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <GUI_DrawLine+0x184>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	429a      	cmp	r2, r3
 800289a:	f200 80a4 	bhi.w	80029e6 <GUI_DrawLine+0x172>
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <GUI_DrawLine+0x184>)
 80028a0:	885b      	ldrh	r3, [r3, #2]
 80028a2:	88ba      	ldrh	r2, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f200 809e 	bhi.w	80029e6 <GUI_DrawLine+0x172>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80028aa:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <GUI_DrawLine+0x184>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f200 8098 	bhi.w	80029e6 <GUI_DrawLine+0x172>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80028b6:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <GUI_DrawLine+0x184>)
 80028b8:	885b      	ldrh	r3, [r3, #2]
 80028ba:	883a      	ldrh	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f200 8092 	bhi.w	80029e6 <GUI_DrawLine+0x172>
//        DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    if(Xstart > Xend)
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d905      	bls.n	80028d6 <GUI_DrawLine+0x62>
        GUI_Swop(Xstart, Xend);
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff43 	bl	800275c <GUI_Swop>
    if(Ystart > Yend)
 80028d6:	88ba      	ldrh	r2, [r7, #4]
 80028d8:	883b      	ldrh	r3, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d905      	bls.n	80028ea <GUI_DrawLine+0x76>
        GUI_Swop(Ystart, Yend);
 80028de:	883a      	ldrh	r2, [r7, #0]
 80028e0:	88bb      	ldrh	r3, [r7, #4]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff39 	bl	800275c <GUI_Swop>

    POINT Xpoint = Xstart;
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	84fb      	strh	r3, [r7, #38]	; 0x26
    POINT Ypoint = Ystart;
 80028ee:	88bb      	ldrh	r3, [r7, #4]
 80028f0:	84bb      	strh	r3, [r7, #36]	; 0x24
    int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bfb8      	it	lt
 80028fc:	425b      	neglt	r3, r3
 80028fe:	61bb      	str	r3, [r7, #24]
    int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8002900:	883a      	ldrh	r2, [r7, #0]
 8002902:	88bb      	ldrh	r3, [r7, #4]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfb8      	it	lt
 800290a:	425b      	neglt	r3, r3
 800290c:	425b      	negs	r3, r3
 800290e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int32_t XAddway = Xstart < Xend ? 1 : -1;
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	429a      	cmp	r2, r3
 8002916:	d201      	bcs.n	800291c <GUI_DrawLine+0xa8>
 8002918:	2301      	movs	r3, #1
 800291a:	e001      	b.n	8002920 <GUI_DrawLine+0xac>
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	613b      	str	r3, [r7, #16]
    int32_t YAddway = Ystart < Yend ? 1 : -1;
 8002922:	88ba      	ldrh	r2, [r7, #4]
 8002924:	883b      	ldrh	r3, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d201      	bcs.n	800292e <GUI_DrawLine+0xba>
 800292a:	2301      	movs	r3, #1
 800292c:	e001      	b.n	8002932 <GUI_DrawLine+0xbe>
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int32_t Esp = dx + dy;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	4413      	add	r3, r2
 800293a:	623b      	str	r3, [r7, #32]
    int8_t Line_Style_Temp = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]

    for(;;) {
        Line_Style_Temp++;
 8002940:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if(Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 800294c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d11a      	bne.n	800298a <GUI_DrawLine+0x116>
 8002954:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <GUI_DrawLine+0x188>)
 800295a:	fb83 3102 	smull	r3, r1, r3, r2
 800295e:	17d3      	asrs	r3, r2, #31
 8002960:	1ac9      	subs	r1, r1, r3
 8002962:	460b      	mov	r3, r1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	440b      	add	r3, r1
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b25b      	sxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10c      	bne.n	800298a <GUI_DrawLine+0x116>
            //DEBUG("LINE_DOTTED\r\n");
            GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 8002970:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002974:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002976:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002978:	2201      	movs	r2, #1
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002980:	f7ff ff00 	bl	8002784 <GUI_DrawPoint>
            Line_Style_Temp = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e008      	b.n	800299c <GUI_DrawLine+0x128>
        } else {
            GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 800298a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800298e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002990:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002992:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002994:	2401      	movs	r4, #1
 8002996:	9400      	str	r4, [sp, #0]
 8002998:	f7ff fef4 	bl	8002784 <GUI_DrawPoint>
        }
        if(2 * Esp >= dy) {
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dc0c      	bgt.n	80029c0 <GUI_DrawLine+0x14c>
            if(Xpoint == Xend) break;
 80029a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d01d      	beq.n	80029ea <GUI_DrawLine+0x176>
            Esp += dy;
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4413      	add	r3, r2
 80029b4:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029bc:	4413      	add	r3, r2
 80029be:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if(2 * Esp <= dx) {
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbba      	blt.n	8002940 <GUI_DrawLine+0xcc>
            if(Ypoint == Yend) break;
 80029ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029cc:	883b      	ldrh	r3, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d00d      	beq.n	80029ee <GUI_DrawLine+0x17a>
            Esp += dx;
 80029d2:	6a3a      	ldr	r2, [r7, #32]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029e0:	4413      	add	r3, r2
 80029e2:	84bb      	strh	r3, [r7, #36]	; 0x24
        Line_Style_Temp++;
 80029e4:	e7ac      	b.n	8002940 <GUI_DrawLine+0xcc>
        return;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <GUI_DrawLine+0x17c>
            if(Xpoint == Xend) break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <GUI_DrawLine+0x17c>
            if(Ypoint == Yend) break;
 80029ee:	bf00      	nop
        }
    }
}
 80029f0:	372c      	adds	r7, #44	; 0x2c
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200000d8 	.word	0x200000d8
 80029fc:	55555556 	.word	0x55555556

08002a00 <GUI_DrawRectangle>:
	Color  ：The color of the Rectangular segment
	Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af04      	add	r7, sp, #16
 8002a06:	4604      	mov	r4, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	80fb      	strh	r3, [r7, #6]
 8002a12:	4603      	mov	r3, r0
 8002a14:	80bb      	strh	r3, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <GUI_DrawRectangle+0x104>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d868      	bhi.n	8002afa <GUI_DrawRectangle+0xfa>
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <GUI_DrawRectangle+0x104>)
 8002a2a:	885b      	ldrh	r3, [r3, #2]
 8002a2c:	88ba      	ldrh	r2, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d863      	bhi.n	8002afa <GUI_DrawRectangle+0xfa>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8002a32:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <GUI_DrawRectangle+0x104>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d85e      	bhi.n	8002afa <GUI_DrawRectangle+0xfa>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8002a3c:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <GUI_DrawRectangle+0x104>)
 8002a3e:	885b      	ldrh	r3, [r3, #2]
 8002a40:	883a      	ldrh	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d859      	bhi.n	8002afa <GUI_DrawRectangle+0xfa>
//        DEBUG("Input exceeds the normal display range\r\n");
        return;
    }

    if(Xstart > Xend)
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d905      	bls.n	8002a5a <GUI_DrawRectangle+0x5a>
        GUI_Swop(Xstart, Xend);
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fe81 	bl	800275c <GUI_Swop>
    if(Ystart > Yend)
 8002a5a:	88ba      	ldrh	r2, [r7, #4]
 8002a5c:	883b      	ldrh	r3, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d905      	bls.n	8002a6e <GUI_DrawRectangle+0x6e>
        GUI_Swop(Ystart, Yend);
 8002a62:	883a      	ldrh	r2, [r7, #0]
 8002a64:	88bb      	ldrh	r3, [r7, #4]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe77 	bl	800275c <GUI_Swop>

    
    if(Filled ) {
 8002a6e:	7f3b      	ldrb	r3, [r7, #28]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <GUI_DrawRectangle+0x88>
		POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
	#elif HIGH_Speed_Show
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 8002a74:	883c      	ldrh	r4, [r7, #0]
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	88b9      	ldrh	r1, [r7, #4]
 8002a7a:	88f8      	ldrh	r0, [r7, #6]
 8002a7c:	8b3b      	ldrh	r3, [r7, #24]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4623      	mov	r3, r4
 8002a82:	f7ff fe27 	bl	80026d4 <LCD_SetArealColor>
 8002a86:	e039      	b.n	8002afc <GUI_DrawRectangle+0xfc>
	#endif
    } else {
        GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8002a88:	88bc      	ldrh	r4, [r7, #4]
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	88b9      	ldrh	r1, [r7, #4]
 8002a8e:	88f8      	ldrh	r0, [r7, #6]
 8002a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a94:	9302      	str	r3, [sp, #8]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	8b3b      	ldrh	r3, [r7, #24]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7ff fee8 	bl	8002874 <GUI_DrawLine>
        GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8002aa4:	883c      	ldrh	r4, [r7, #0]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	88b9      	ldrh	r1, [r7, #4]
 8002aaa:	88f8      	ldrh	r0, [r7, #6]
 8002aac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	8b3b      	ldrh	r3, [r7, #24]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4623      	mov	r3, r4
 8002abc:	f7ff feda 	bl	8002874 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8002ac0:	88bc      	ldrh	r4, [r7, #4]
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	8839      	ldrh	r1, [r7, #0]
 8002ac6:	8878      	ldrh	r0, [r7, #2]
 8002ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	8b3b      	ldrh	r3, [r7, #24]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	f7ff fecc 	bl	8002874 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8002adc:	883c      	ldrh	r4, [r7, #0]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	8839      	ldrh	r1, [r7, #0]
 8002ae2:	8878      	ldrh	r0, [r7, #2]
 8002ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ae8:	9302      	str	r3, [sp, #8]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	8b3b      	ldrh	r3, [r7, #24]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	4623      	mov	r3, r4
 8002af4:	f7ff febe 	bl	8002874 <GUI_DrawLine>
 8002af8:	e000      	b.n	8002afc <GUI_DrawRectangle+0xfc>
        return;
 8002afa:	bf00      	nop
    }
}
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200000d8 	.word	0x200000d8

08002b08 <GUI_DrawCircle>:
	Color     ：The color of the ：circle segment
	Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void GUI_DrawCircle(POINT X_Center, POINT Y_Center, LENGTH Radius,
                    COLOR Color, DRAW_FILL  Draw_Fill , DOT_PIXEL Dot_Pixel)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	80fb      	strh	r3, [r7, #6]
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80bb      	strh	r3, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	803b      	strh	r3, [r7, #0]
    if(X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 8002b26:	4b66      	ldr	r3, [pc, #408]	; (8002cc0 <GUI_DrawCircle+0x1b8>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	88fa      	ldrh	r2, [r7, #6]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f200 8171 	bhi.w	8002e14 <GUI_DrawCircle+0x30c>
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <GUI_DrawCircle+0x1b8>)
 8002b34:	885b      	ldrh	r3, [r3, #2]
 8002b36:	88ba      	ldrh	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f080 816b 	bcs.w	8002e14 <GUI_DrawCircle+0x30c>
        return;
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f1c3 0303 	rsb	r3, r3, #3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if(Draw_Fill == DRAW_FULL) {
 8002b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	f040 8153 	bne.w	8002e04 <GUI_DrawCircle+0x2fc>
        while(XCurrent <= YCurrent ) { //Realistic circles
 8002b5e:	e0a6      	b.n	8002cae <GUI_DrawCircle+0x1a6>
            for(sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	813b      	strh	r3, [r7, #8]
 8002b64:	e075      	b.n	8002c52 <GUI_DrawCircle+0x14a>
                GUI_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//1
 8002b66:	89fa      	ldrh	r2, [r7, #14]
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b298      	uxth	r0, r3
 8002b6e:	893a      	ldrh	r2, [r7, #8]
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	b299      	uxth	r1, r3
 8002b76:	883a      	ldrh	r2, [r7, #0]
 8002b78:	2301      	movs	r3, #1
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f7ff fe01 	bl	8002784 <GUI_DrawPoint>
                GUI_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//2
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	b298      	uxth	r0, r3
 8002b8a:	893a      	ldrh	r2, [r7, #8]
 8002b8c:	88bb      	ldrh	r3, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	b299      	uxth	r1, r3
 8002b92:	883a      	ldrh	r2, [r7, #0]
 8002b94:	2301      	movs	r3, #1
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f7ff fdf3 	bl	8002784 <GUI_DrawPoint>
                GUI_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//3
 8002b9e:	893b      	ldrh	r3, [r7, #8]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	b298      	uxth	r0, r3
 8002ba6:	89fa      	ldrh	r2, [r7, #14]
 8002ba8:	88bb      	ldrh	r3, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	b299      	uxth	r1, r3
 8002bae:	883a      	ldrh	r2, [r7, #0]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f7ff fde5 	bl	8002784 <GUI_DrawPoint>
                GUI_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//4
 8002bba:	893b      	ldrh	r3, [r7, #8]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	b298      	uxth	r0, r3
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	88ba      	ldrh	r2, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	b299      	uxth	r1, r3
 8002bca:	883a      	ldrh	r2, [r7, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f7ff fdd7 	bl	8002784 <GUI_DrawPoint>
                GUI_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//5
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	b298      	uxth	r0, r3
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	88ba      	ldrh	r2, [r7, #4]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	b299      	uxth	r1, r3
 8002be6:	883a      	ldrh	r2, [r7, #0]
 8002be8:	2301      	movs	r3, #1
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2301      	movs	r3, #1
 8002bee:	f7ff fdc9 	bl	8002784 <GUI_DrawPoint>
                GUI_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//6
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b298      	uxth	r0, r3
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	88ba      	ldrh	r2, [r7, #4]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	b299      	uxth	r1, r3
 8002c02:	883a      	ldrh	r2, [r7, #0]
 8002c04:	2301      	movs	r3, #1
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f7ff fdbb 	bl	8002784 <GUI_DrawPoint>
                GUI_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//7
 8002c0e:	893a      	ldrh	r2, [r7, #8]
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	4413      	add	r3, r2
 8002c14:	b298      	uxth	r0, r3
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	88ba      	ldrh	r2, [r7, #4]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	883a      	ldrh	r2, [r7, #0]
 8002c20:	2301      	movs	r3, #1
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2301      	movs	r3, #1
 8002c26:	f7ff fdad 	bl	8002784 <GUI_DrawPoint>
                GUI_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );
 8002c2a:	893a      	ldrh	r2, [r7, #8]
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	4413      	add	r3, r2
 8002c30:	b298      	uxth	r0, r3
 8002c32:	89fa      	ldrh	r2, [r7, #14]
 8002c34:	88bb      	ldrh	r3, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	b299      	uxth	r1, r3
 8002c3a:	883a      	ldrh	r2, [r7, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2301      	movs	r3, #1
 8002c42:	f7ff fd9f 	bl	8002784 <GUI_DrawPoint>
            for(sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8002c46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	813b      	strh	r3, [r7, #8]
 8002c52:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	dd83      	ble.n	8002b66 <GUI_DrawCircle+0x5e>
            }
            if(Esp < 0 )
 8002c5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	da09      	bge.n	8002c7a <GUI_DrawCircle+0x172>
                Esp += 4 * XCurrent + 6;
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	897b      	ldrh	r3, [r7, #10]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3306      	adds	r3, #6
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	817b      	strh	r3, [r7, #10]
 8002c78:	e013      	b.n	8002ca2 <GUI_DrawCircle+0x19a>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8002c7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	897b      	ldrh	r3, [r7, #10]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	330a      	adds	r3, #10
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8002c96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8002ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	81fb      	strh	r3, [r7, #14]
        while(XCurrent <= YCurrent ) { //Realistic circles
 8002cae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002cb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	f77f af52 	ble.w	8002b60 <GUI_DrawCircle+0x58>
 8002cbc:	e0ab      	b.n	8002e16 <GUI_DrawCircle+0x30e>
 8002cbe:	bf00      	nop
 8002cc0:	200000d8 	.word	0x200000d8
        }
    } else { //Draw a hollow circle
        while(XCurrent <= YCurrent ) {
            GUI_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//1
 8002cc4:	89fa      	ldrh	r2, [r7, #14]
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	4413      	add	r3, r2
 8002cca:	b298      	uxth	r0, r3
 8002ccc:	89ba      	ldrh	r2, [r7, #12]
 8002cce:	88bb      	ldrh	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cd8:	883a      	ldrh	r2, [r7, #0]
 8002cda:	2401      	movs	r4, #1
 8002cdc:	9400      	str	r4, [sp, #0]
 8002cde:	f7ff fd51 	bl	8002784 <GUI_DrawPoint>
            GUI_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//2
 8002ce2:	89fb      	ldrh	r3, [r7, #14]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b298      	uxth	r0, r3
 8002cea:	89ba      	ldrh	r2, [r7, #12]
 8002cec:	88bb      	ldrh	r3, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b299      	uxth	r1, r3
 8002cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cf6:	883a      	ldrh	r2, [r7, #0]
 8002cf8:	2401      	movs	r4, #1
 8002cfa:	9400      	str	r4, [sp, #0]
 8002cfc:	f7ff fd42 	bl	8002784 <GUI_DrawPoint>
            GUI_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//3
 8002d00:	89bb      	ldrh	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	b298      	uxth	r0, r3
 8002d08:	89fa      	ldrh	r2, [r7, #14]
 8002d0a:	88bb      	ldrh	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b299      	uxth	r1, r3
 8002d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d14:	883a      	ldrh	r2, [r7, #0]
 8002d16:	2401      	movs	r4, #1
 8002d18:	9400      	str	r4, [sp, #0]
 8002d1a:	f7ff fd33 	bl	8002784 <GUI_DrawPoint>
            GUI_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//4
 8002d1e:	89bb      	ldrh	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	b298      	uxth	r0, r3
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	88ba      	ldrh	r2, [r7, #4]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	b299      	uxth	r1, r3
 8002d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d32:	883a      	ldrh	r2, [r7, #0]
 8002d34:	2401      	movs	r4, #1
 8002d36:	9400      	str	r4, [sp, #0]
 8002d38:	f7ff fd24 	bl	8002784 <GUI_DrawPoint>
            GUI_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//5
 8002d3c:	89fb      	ldrh	r3, [r7, #14]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	b298      	uxth	r0, r3
 8002d44:	89bb      	ldrh	r3, [r7, #12]
 8002d46:	88ba      	ldrh	r2, [r7, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	b299      	uxth	r1, r3
 8002d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d50:	883a      	ldrh	r2, [r7, #0]
 8002d52:	2401      	movs	r4, #1
 8002d54:	9400      	str	r4, [sp, #0]
 8002d56:	f7ff fd15 	bl	8002784 <GUI_DrawPoint>
            GUI_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//6
 8002d5a:	89fa      	ldrh	r2, [r7, #14]
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b298      	uxth	r0, r3
 8002d62:	89bb      	ldrh	r3, [r7, #12]
 8002d64:	88ba      	ldrh	r2, [r7, #4]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	b299      	uxth	r1, r3
 8002d6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d6e:	883a      	ldrh	r2, [r7, #0]
 8002d70:	2401      	movs	r4, #1
 8002d72:	9400      	str	r4, [sp, #0]
 8002d74:	f7ff fd06 	bl	8002784 <GUI_DrawPoint>
            GUI_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//7
 8002d78:	89ba      	ldrh	r2, [r7, #12]
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b298      	uxth	r0, r3
 8002d80:	89fb      	ldrh	r3, [r7, #14]
 8002d82:	88ba      	ldrh	r2, [r7, #4]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	b299      	uxth	r1, r3
 8002d88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d8c:	883a      	ldrh	r2, [r7, #0]
 8002d8e:	2401      	movs	r4, #1
 8002d90:	9400      	str	r4, [sp, #0]
 8002d92:	f7ff fcf7 	bl	8002784 <GUI_DrawPoint>
            GUI_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//0
 8002d96:	89ba      	ldrh	r2, [r7, #12]
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	b298      	uxth	r0, r3
 8002d9e:	89fa      	ldrh	r2, [r7, #14]
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	b299      	uxth	r1, r3
 8002da6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002daa:	883a      	ldrh	r2, [r7, #0]
 8002dac:	2401      	movs	r4, #1
 8002dae:	9400      	str	r4, [sp, #0]
 8002db0:	f7ff fce8 	bl	8002784 <GUI_DrawPoint>

            if(Esp < 0 )
 8002db4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da09      	bge.n	8002dd0 <GUI_DrawCircle+0x2c8>
                Esp += 4 * XCurrent + 6;
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3306      	adds	r3, #6
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	e013      	b.n	8002df8 <GUI_DrawCircle+0x2f0>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8002dd0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002dd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	4413      	add	r3, r2
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	330a      	adds	r3, #10
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8002dec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8002df8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	81fb      	strh	r3, [r7, #14]
        while(XCurrent <= YCurrent ) {
 8002e04:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	f77f af59 	ble.w	8002cc4 <GUI_DrawCircle+0x1bc>
 8002e12:	e000      	b.n	8002e16 <GUI_DrawCircle+0x30e>
        return;
 8002e14:	bf00      	nop
        }
    }
}
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}

08002e1c <GUI_DisChar>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4603      	mov	r3, r0
 8002e26:	81fb      	strh	r3, [r7, #14]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	81bb      	strh	r3, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	72fb      	strb	r3, [r7, #11]
    POINT Page, Column;

    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <GUI_DisChar+0x158>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	89fa      	ldrh	r2, [r7, #14]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	f200 8097 	bhi.w	8002f6a <GUI_DisChar+0x14e>
 8002e3c:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <GUI_DisChar+0x158>)
 8002e3e:	885b      	ldrh	r3, [r3, #2]
 8002e40:	89ba      	ldrh	r2, [r7, #12]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	f200 8091 	bhi.w	8002f6a <GUI_DisChar+0x14e>
//        DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	3b20      	subs	r3, #32
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	88d2      	ldrh	r2, [r2, #6]
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	8892      	ldrh	r2, [r2, #4]
 8002e58:	08d2      	lsrs	r2, r2, #3
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	8892      	ldrh	r2, [r2, #4]
 8002e62:	f002 0207 	and.w	r2, r2, #7
 8002e66:	b292      	uxth	r2, r2
 8002e68:	2a00      	cmp	r2, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2201      	movne	r2, #1
 8002e6e:	2200      	moveq	r2, #0
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440a      	add	r2, r1
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	4413      	add	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]

    for(Page = 0; Page < Font->Height; Page ++ ) {
 8002e84:	2300      	movs	r3, #0
 8002e86:	83fb      	strh	r3, [r7, #30]
 8002e88:	e069      	b.n	8002f5e <GUI_DisChar+0x142>
        for(Column = 0; Column < Font->Width; Column ++ ) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	83bb      	strh	r3, [r7, #28]
 8002e8e:	e054      	b.n	8002f3a <GUI_DisChar+0x11e>

            //To determine whether the font background color and screen background color is consistent
            if(FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8002e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d11a      	bne.n	8002ed0 <GUI_DisChar+0xb4>
                if(*ptr & (0x80 >> (Column % 8)))
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	8bbb      	ldrh	r3, [r7, #28]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	fa42 f303 	asr.w	r3, r2, r3
 8002eac:	400b      	ands	r3, r1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d037      	beq.n	8002f22 <GUI_DisChar+0x106>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8002eb2:	89fa      	ldrh	r2, [r7, #14]
 8002eb4:	8bbb      	ldrh	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b298      	uxth	r0, r3
 8002eba:	89ba      	ldrh	r2, [r7, #12]
 8002ebc:	8bfb      	ldrh	r3, [r7, #30]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b299      	uxth	r1, r3
 8002ec2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f7ff fc5b 	bl	8002784 <GUI_DrawPoint>
 8002ece:	e028      	b.n	8002f22 <GUI_DisChar+0x106>
            } else {
                if(*ptr & (0x80 >> (Column % 8))) {
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	8bbb      	ldrh	r3, [r7, #28]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	fa42 f303 	asr.w	r3, r2, r3
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <GUI_DisChar+0xea>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8002ee8:	89fa      	ldrh	r2, [r7, #14]
 8002eea:	8bbb      	ldrh	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	b298      	uxth	r0, r3
 8002ef0:	89ba      	ldrh	r2, [r7, #12]
 8002ef2:	8bfb      	ldrh	r3, [r7, #30]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	b299      	uxth	r1, r3
 8002ef8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002efa:	2301      	movs	r3, #1
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2301      	movs	r3, #1
 8002f00:	f7ff fc40 	bl	8002784 <GUI_DrawPoint>
 8002f04:	e00d      	b.n	8002f22 <GUI_DisChar+0x106>
                } else {
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8002f06:	89fa      	ldrh	r2, [r7, #14]
 8002f08:	8bbb      	ldrh	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	b298      	uxth	r0, r3
 8002f0e:	89ba      	ldrh	r2, [r7, #12]
 8002f10:	8bfb      	ldrh	r3, [r7, #30]
 8002f12:	4413      	add	r3, r2
 8002f14:	b299      	uxth	r1, r3
 8002f16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f18:	2301      	movs	r3, #1
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f7ff fc31 	bl	8002784 <GUI_DrawPoint>
                }
            }
            //One pixel is 8 bits
            if(Column % 8 == 7)
 8002f22:	8bbb      	ldrh	r3, [r7, #28]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b07      	cmp	r3, #7
 8002f2c:	d102      	bne.n	8002f34 <GUI_DisChar+0x118>
                ptr++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61bb      	str	r3, [r7, #24]
        for(Column = 0; Column < Font->Width; Column ++ ) {
 8002f34:	8bbb      	ldrh	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	83bb      	strh	r3, [r7, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	889b      	ldrh	r3, [r3, #4]
 8002f3e:	8bba      	ldrh	r2, [r7, #28]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3a5      	bcc.n	8002e90 <GUI_DisChar+0x74>
        }/* Write a line */
        if(Font->Width % 8 != 0)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	889b      	ldrh	r3, [r3, #4]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <GUI_DisChar+0x13c>
            ptr++;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61bb      	str	r3, [r7, #24]
    for(Page = 0; Page < Font->Height; Page ++ ) {
 8002f58:	8bfb      	ldrh	r3, [r7, #30]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	83fb      	strh	r3, [r7, #30]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	88db      	ldrh	r3, [r3, #6]
 8002f62:	8bfa      	ldrh	r2, [r7, #30]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d390      	bcc.n	8002e8a <GUI_DisChar+0x6e>
 8002f68:	e000      	b.n	8002f6c <GUI_DisChar+0x150>
        return;
 8002f6a:	bf00      	nop
    }/* Write all */
}
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200000d8 	.word	0x200000d8

08002f78 <GUI_DisString_EN>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60ba      	str	r2, [r7, #8]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4603      	mov	r3, r0
 8002f84:	81fb      	strh	r3, [r7, #14]
 8002f86:	460b      	mov	r3, r1
 8002f88:	81bb      	strh	r3, [r7, #12]
    POINT Xpoint = Xstart;
 8002f8a:	89fb      	ldrh	r3, [r7, #14]
 8002f8c:	82fb      	strh	r3, [r7, #22]
    POINT Ypoint = Ystart;
 8002f8e:	89bb      	ldrh	r3, [r7, #12]
 8002f90:	82bb      	strh	r3, [r7, #20]

    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <GUI_DisString_EN+0xa0>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	89fa      	ldrh	r2, [r7, #14]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d838      	bhi.n	800300e <GUI_DisString_EN+0x96>
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <GUI_DisString_EN+0xa0>)
 8002f9e:	885b      	ldrh	r3, [r3, #2]
 8002fa0:	89ba      	ldrh	r2, [r7, #12]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d833      	bhi.n	800300e <GUI_DisString_EN+0x96>
//        DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while(* pString != '\0') {
 8002fa6:	e02d      	b.n	8003004 <GUI_DisString_EN+0x8c>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
        if((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 8002fa8:	8afb      	ldrh	r3, [r7, #22]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	8892      	ldrh	r2, [r2, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <GUI_DisString_EN+0xa0>)
 8002fb2:	8812      	ldrh	r2, [r2, #0]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	dd06      	ble.n	8002fc6 <GUI_DisString_EN+0x4e>
            Xpoint = Xstart;
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	88da      	ldrh	r2, [r3, #6]
 8002fc0:	8abb      	ldrh	r3, [r7, #20]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 8002fc6:	8abb      	ldrh	r3, [r7, #20]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	88d2      	ldrh	r2, [r2, #6]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <GUI_DisString_EN+0xa0>)
 8002fd0:	8852      	ldrh	r2, [r2, #2]
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	dd03      	ble.n	8002fde <GUI_DisString_EN+0x66>
            Xpoint = Xstart;
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8002fda:	89bb      	ldrh	r3, [r7, #12]
 8002fdc:	82bb      	strh	r3, [r7, #20]
        }
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	8ab9      	ldrh	r1, [r7, #20]
 8002fe4:	8af8      	ldrh	r0, [r7, #22]
 8002fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	8c3b      	ldrh	r3, [r7, #32]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f7ff ff14 	bl	8002e1c <GUI_DisChar>

        //The next character of the address
        pString ++;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	889a      	ldrh	r2, [r3, #4]
 8002ffe:	8afb      	ldrh	r3, [r7, #22]
 8003000:	4413      	add	r3, r2
 8003002:	82fb      	strh	r3, [r7, #22]
    while(* pString != '\0') {
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1cd      	bne.n	8002fa8 <GUI_DisString_EN+0x30>
 800300c:	e000      	b.n	8003010 <GUI_DisString_EN+0x98>
        return;
 800300e:	bf00      	nop
    }
}
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200000d8 	.word	0x200000d8

0800301c <TP_Read_ADC>:
parameter:
	Channel_Cmd :	0x90: Read channel Y +, select the ADC resolution is 12 bits, set to differential mode
					0xd0: Read channel x +, select the ADC resolution is 12 bits, set to differential mode
*******************************************************************************/
static uint16_t TP_Read_ADC(uint8_t CMD)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
    uint16_t Data = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	81fb      	strh	r3, [r7, #14]

    //A cycle of at least 400ns.
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <TP_Read_ADC+0x78>)
 800302c:	2228      	movs	r2, #40	; 0x28
 800302e:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8003030:	4818      	ldr	r0, [pc, #96]	; (8003094 <TP_Read_ADC+0x78>)
 8003032:	f002 f961 	bl	80052f8 <HAL_SPI_Init>

	TP_CS_0;
 8003036:	2200      	movs	r2, #0
 8003038:	2120      	movs	r1, #32
 800303a:	4817      	ldr	r0, [pc, #92]	; (8003098 <TP_Read_ADC+0x7c>)
 800303c:	f001 fbd8 	bl	80047f0 <HAL_GPIO_WritePin>

	SPI4W_Write_Byte(CMD);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fd20 	bl	8000a88 <SPI4W_Write_Byte>
	Driver_Delay_us(200);
 8003048:	20c8      	movs	r0, #200	; 0xc8
 800304a:	f7fd fd54 	bl	8000af6 <Driver_Delay_us>
	
	Data = SPI4W_Read_Byte(0XFF);
 800304e:	20ff      	movs	r0, #255	; 0xff
 8003050:	f7fd fd2e 	bl	8000ab0 <SPI4W_Read_Byte>
 8003054:	4603      	mov	r3, r0
 8003056:	81fb      	strh	r3, [r7, #14]
	Data <<= 8;//7bit
 8003058:	89fb      	ldrh	r3, [r7, #14]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	81fb      	strh	r3, [r7, #14]
	Data |= SPI4W_Read_Byte(0XFF);
 800305e:	20ff      	movs	r0, #255	; 0xff
 8003060:	f7fd fd26 	bl	8000ab0 <SPI4W_Read_Byte>
 8003064:	4603      	mov	r3, r0
 8003066:	b29a      	uxth	r2, r3
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	4313      	orrs	r3, r2
 800306c:	81fb      	strh	r3, [r7, #14]
	Data >>= 3;//5bit
 800306e:	89fb      	ldrh	r3, [r7, #14]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	81fb      	strh	r3, [r7, #14]
	TP_CS_1;
 8003074:	2201      	movs	r2, #1
 8003076:	2120      	movs	r1, #32
 8003078:	4807      	ldr	r0, [pc, #28]	; (8003098 <TP_Read_ADC+0x7c>)
 800307a:	f001 fbb9 	bl	80047f0 <HAL_GPIO_WritePin>
	
	//LCD SPI speed = 18 MHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <TP_Read_ADC+0x78>)
 8003080:	2208      	movs	r2, #8
 8003082:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <TP_Read_ADC+0x78>)
 8003086:	f002 f937 	bl	80052f8 <HAL_SPI_Init>

    return Data;
 800308a:	89fb      	ldrh	r3, [r7, #14]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200000e4 	.word	0x200000e4
 8003098:	40020400 	.word	0x40020400

0800309c <TP_Read_ADC_Average>:
					0xd0 :Read channel x +
*******************************************************************************/
#define READ_TIMES  5	//Number of readings
#define LOST_NUM    1	//Discard value
static uint16_t TP_Read_ADC_Average(uint8_t Channel_Cmd)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j;
    uint16_t Read_Buff[READ_TIMES];
    uint16_t Read_Sum = 0, Read_Temp = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	82bb      	strh	r3, [r7, #20]
 80030aa:	2300      	movs	r3, #0
 80030ac:	827b      	strh	r3, [r7, #18]

    //Read and save multiple samples
    for(i = 0; i < READ_TIMES; i++){
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
 80030b2:	e012      	b.n	80030da <TP_Read_ADC_Average+0x3e>
		Read_Buff[i] = TP_Read_ADC(Channel_Cmd);
 80030b4:	7dfc      	ldrb	r4, [r7, #23]
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ffaf 	bl	800301c <TP_Read_ADC>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	0063      	lsls	r3, r4, #1
 80030c4:	f107 0118 	add.w	r1, r7, #24
 80030c8:	440b      	add	r3, r1
 80030ca:	f823 2c10 	strh.w	r2, [r3, #-16]
		Driver_Delay_us(200);
 80030ce:	20c8      	movs	r0, #200	; 0xc8
 80030d0:	f7fd fd11 	bl	8000af6 <Driver_Delay_us>
    for(i = 0; i < READ_TIMES; i++){
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	3301      	adds	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d9e9      	bls.n	80030b4 <TP_Read_ADC_Average+0x18>
	}
	
    //Sort from small to large
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 80030e0:	2300      	movs	r3, #0
 80030e2:	75fb      	strb	r3, [r7, #23]
 80030e4:	e03b      	b.n	800315e <TP_Read_ADC_Average+0xc2>
        for (j = i + 1; j < READ_TIMES; j ++) {
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	3301      	adds	r3, #1
 80030ea:	75bb      	strb	r3, [r7, #22]
 80030ec:	e031      	b.n	8003152 <TP_Read_ADC_Average+0xb6>
            if (Read_Buff[i] > Read_Buff[j]) {
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	f107 0218 	add.w	r2, r7, #24
 80030f6:	4413      	add	r3, r2
 80030f8:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80030fc:	7dbb      	ldrb	r3, [r7, #22]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	f107 0118 	add.w	r1, r7, #24
 8003104:	440b      	add	r3, r1
 8003106:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800310a:	429a      	cmp	r2, r3
 800310c:	d91e      	bls.n	800314c <TP_Read_ADC_Average+0xb0>
                Read_Temp = Read_Buff[i];
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	f107 0218 	add.w	r2, r7, #24
 8003116:	4413      	add	r3, r2
 8003118:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800311c:	827b      	strh	r3, [r7, #18]
                Read_Buff[i] = Read_Buff[j];
 800311e:	7dbb      	ldrb	r3, [r7, #22]
 8003120:	7dfa      	ldrb	r2, [r7, #23]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	f107 0118 	add.w	r1, r7, #24
 8003128:	440b      	add	r3, r1
 800312a:	f833 1c10 	ldrh.w	r1, [r3, #-16]
 800312e:	0053      	lsls	r3, r2, #1
 8003130:	f107 0218 	add.w	r2, r7, #24
 8003134:	4413      	add	r3, r2
 8003136:	460a      	mov	r2, r1
 8003138:	f823 2c10 	strh.w	r2, [r3, #-16]
                Read_Buff[j] = Read_Temp;
 800313c:	7dbb      	ldrb	r3, [r7, #22]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	f107 0218 	add.w	r2, r7, #24
 8003144:	4413      	add	r3, r2
 8003146:	8a7a      	ldrh	r2, [r7, #18]
 8003148:	f823 2c10 	strh.w	r2, [r3, #-16]
        for (j = i + 1; j < READ_TIMES; j ++) {
 800314c:	7dbb      	ldrb	r3, [r7, #22]
 800314e:	3301      	adds	r3, #1
 8003150:	75bb      	strb	r3, [r7, #22]
 8003152:	7dbb      	ldrb	r3, [r7, #22]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d9ca      	bls.n	80030ee <TP_Read_ADC_Average+0x52>
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	3301      	adds	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d9c0      	bls.n	80030e6 <TP_Read_ADC_Average+0x4a>
            }
        }
    }

    //Exclude the largest and the smallest
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
 8003168:	e00c      	b.n	8003184 <TP_Read_ADC_Average+0xe8>
        Read_Sum += Read_Buff[i];
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	f107 0218 	add.w	r2, r7, #24
 8003172:	4413      	add	r3, r2
 8003174:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8003178:	8abb      	ldrh	r3, [r7, #20]
 800317a:	4413      	add	r3, r2
 800317c:	82bb      	strh	r3, [r7, #20]
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800317e:	7dfb      	ldrb	r3, [r7, #23]
 8003180:	3301      	adds	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d9ef      	bls.n	800316a <TP_Read_ADC_Average+0xce>

    //Averaging
    Read_Temp = Read_Sum / (READ_TIMES - 2 * LOST_NUM);
 800318a:	8abb      	ldrh	r3, [r7, #20]
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <TP_Read_ADC_Average+0x104>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	827b      	strh	r3, [r7, #18]

    return Read_Temp;
 8003196:	8a7b      	ldrh	r3, [r7, #18]
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	aaaaaaab 	.word	0xaaaaaaab

080031a4 <TP_Read_ADC_XY>:
parameter:
	Channel_Cmd :	0x90 :Read channel Y +
					0xd0 :Read channel x +
*******************************************************************************/
static void TP_Read_ADC_XY(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
    *pXCh_Adc = TP_Read_ADC_Average(0xD0);
 80031ae:	20d0      	movs	r0, #208	; 0xd0
 80031b0:	f7ff ff74 	bl	800309c <TP_Read_ADC_Average>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	801a      	strh	r2, [r3, #0]
    *pYCh_Adc = TP_Read_ADC_Average(0x90);
 80031bc:	2090      	movs	r0, #144	; 0x90
 80031be:	f7ff ff6d 	bl	800309c <TP_Read_ADC_Average>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	801a      	strh	r2, [r3, #0]
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <TP_GetAdFac>:
/*******************************************************************************
function:
		Use the default calibration factor
*******************************************************************************/
void TP_GetAdFac(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af02      	add	r7, sp, #8
    if(	sTP_DEV.TP_Scan_Dir == D2U_L2R ) { //SCAN_DIR_DFT = D2U_L2R
 80031da:	4b2f      	ldr	r3, [pc, #188]	; (8003298 <TP_GetAdFac+0xc4>)
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d10e      	bne.n	8003200 <TP_GetAdFac+0x2c>
        sTP_DEV.fXfac = -0.132443F ;
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <TP_GetAdFac+0xc4>)
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <TP_GetAdFac+0xc8>)
 80031e6:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.089997F ;
 80031e8:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <TP_GetAdFac+0xc4>)
 80031ea:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <TP_GetAdFac+0xcc>)
 80031ec:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 516L ;
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <TP_GetAdFac+0xc4>)
 80031f0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80031f4:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -22L ;
 80031f6:	4b28      	ldr	r3, [pc, #160]	; (8003298 <TP_GetAdFac+0xc4>)
 80031f8:	f64f 72ea 	movw	r2, #65514	; 0xffea
 80031fc:	819a      	strh	r2, [r3, #12]
        LCD_Clear(LCD_BACKGROUND);
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
						calibration in this direction",
                         &Font16, FONT_BACKGROUND, RED);
    }
}
 80031fe:	e048      	b.n	8003292 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == L2R_U2D ) {
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <TP_GetAdFac+0xc4>)
 8003202:	7e1b      	ldrb	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10e      	bne.n	8003226 <TP_GetAdFac+0x52>
        sTP_DEV.fXfac = 0.089697F ;
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <TP_GetAdFac+0xc4>)
 800320a:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <TP_GetAdFac+0xd0>)
 800320c:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.134792F ;
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <TP_GetAdFac+0xc4>)
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <TP_GetAdFac+0xd4>)
 8003212:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -21L ;
 8003214:	4b20      	ldr	r3, [pc, #128]	; (8003298 <TP_GetAdFac+0xc4>)
 8003216:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800321a:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -39L ;
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <TP_GetAdFac+0xc4>)
 800321e:	f64f 72d9 	movw	r2, #65497	; 0xffd9
 8003222:	819a      	strh	r2, [r3, #12]
}
 8003224:	e035      	b.n	8003292 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == R2L_D2U ) {
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <TP_GetAdFac+0xc4>)
 8003228:	7e1b      	ldrb	r3, [r3, #24]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d10e      	bne.n	800324c <TP_GetAdFac+0x78>
        sTP_DEV.fXfac = 0.089915F ;
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <TP_GetAdFac+0xc4>)
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <TP_GetAdFac+0xd8>)
 8003232:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac =  0.133178F ;
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <TP_GetAdFac+0xc4>)
 8003236:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <TP_GetAdFac+0xdc>)
 8003238:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -22L ;
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <TP_GetAdFac+0xc4>)
 800323c:	f64f 72ea 	movw	r2, #65514	; 0xffea
 8003240:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -38L ;
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <TP_GetAdFac+0xc4>)
 8003244:	f64f 72da 	movw	r2, #65498	; 0xffda
 8003248:	819a      	strh	r2, [r3, #12]
}
 800324a:	e022      	b.n	8003292 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == U2D_R2L ) {
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <TP_GetAdFac+0xc4>)
 800324e:	7e1b      	ldrb	r3, [r3, #24]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d10e      	bne.n	8003272 <TP_GetAdFac+0x9e>
        sTP_DEV.fXfac = -0.132906F ;
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <TP_GetAdFac+0xc4>)
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <TP_GetAdFac+0xe0>)
 8003258:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.087964F ;
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <TP_GetAdFac+0xc4>)
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <TP_GetAdFac+0xe4>)
 800325e:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 517L ;
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <TP_GetAdFac+0xc4>)
 8003262:	f240 2205 	movw	r2, #517	; 0x205
 8003266:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -20L ;
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <TP_GetAdFac+0xc4>)
 800326a:	f64f 72ec 	movw	r2, #65516	; 0xffec
 800326e:	819a      	strh	r2, [r3, #12]
}
 8003270:	e00f      	b.n	8003292 <TP_GetAdFac+0xbe>
        LCD_Clear(LCD_BACKGROUND);
 8003272:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003276:	f7ff fa5b 	bl	8002730 <LCD_Clear>
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
 800327a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <TP_GetAdFac+0xe8>)
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <TP_GetAdFac+0xec>)
 800328a:	213c      	movs	r1, #60	; 0x3c
 800328c:	2000      	movs	r0, #0
 800328e:	f7ff fe73 	bl	8002f78 <GUI_DisString_EN>
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	200000a8 	.word	0x200000a8
 800329c:	be079f23 	.word	0xbe079f23
 80032a0:	3db85059 	.word	0x3db85059
 80032a4:	3db7b310 	.word	0x3db7b310
 80032a8:	3e0a06ea 	.word	0x3e0a06ea
 80032ac:	3db8255b 	.word	0x3db8255b
 80032b0:	3e085fd0 	.word	0x3e085fd0
 80032b4:	be081883 	.word	0xbe081883
 80032b8:	3db42678 	.word	0x3db42678
 80032bc:	20000000 	.word	0x20000000
 80032c0:	080072a4 	.word	0x080072a4

080032c4 <TP_Init>:
/*******************************************************************************
function:
		Touch pad initialization
*******************************************************************************/
void TP_Init( LCD_SCAN_DIR Lcd_ScanDir )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
    TP_CS_1;
 80032ce:	2201      	movs	r2, #1
 80032d0:	2120      	movs	r1, #32
 80032d2:	4807      	ldr	r0, [pc, #28]	; (80032f0 <TP_Init+0x2c>)
 80032d4:	f001 fa8c 	bl	80047f0 <HAL_GPIO_WritePin>

    sTP_DEV.TP_Scan_Dir = Lcd_ScanDir;
 80032d8:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <TP_Init+0x30>)
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	7613      	strb	r3, [r2, #24]

    TP_Read_ADC_XY(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 80032de:	4906      	ldr	r1, [pc, #24]	; (80032f8 <TP_Init+0x34>)
 80032e0:	4806      	ldr	r0, [pc, #24]	; (80032fc <TP_Init+0x38>)
 80032e2:	f7ff ff5f 	bl	80031a4 <TP_Read_ADC_XY>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40020400 	.word	0x40020400
 80032f4:	200000a8 	.word	0x200000a8
 80032f8:	200000ae 	.word	0x200000ae
 80032fc:	200000ac 	.word	0x200000ac

08003300 <_ZN13MainMenuStateC1EP12StateManager>:
#include "MainMenuState.h"
#include "Utils.h"

MainMenuState::MainMenuState(StateManager* stateManager) : State(stateManager)
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b0b1      	sub	sp, #196	; 0xc4
 8003304:	af04      	add	r7, sp, #16
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f992 	bl	8000638 <_ZN5StateC1EP12StateManager>
 8003314:	4a88      	ldr	r2, [pc, #544]	; (8003538 <_ZN13MainMenuStateC1EP12StateManager+0x238>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4a88      	ldr	r2, [pc, #544]	; (800353c <_ZN13MainMenuStateC1EP12StateManager+0x23c>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]
{
	// make new
	m_guiBuilder.addButton(Square, YELLOW, 240, 160, 320, 480);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f103 0010 	add.w	r0, r3, #16
 8003326:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	23a0      	movs	r3, #160	; 0xa0
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	23f0      	movs	r3, #240	; 0xf0
 8003338:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800333c:	2100      	movs	r1, #0
 800333e:	f7fe fe03 	bl	8001f48 <_ZN10GUIBuilder9addButtonE11ButtonShape5Coloriiii>

	m_guiBuilder.addTextBox("SmartHome App", BLACK, 240, 40, 24);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f103 0410 	add.w	r4, r3, #16
 8003348:	f107 0320 	add.w	r3, r7, #32
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fc97 	bl	8006c80 <_ZNSaIcEC1Ev>
 8003352:	f107 0220 	add.w	r2, r7, #32
 8003356:	f107 0308 	add.w	r3, r7, #8
 800335a:	4979      	ldr	r1, [pc, #484]	; (8003540 <_ZN13MainMenuStateC1EP12StateManager+0x240>)
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fd8b 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003362:	f107 0108 	add.w	r1, r7, #8
 8003366:	2318      	movs	r3, #24
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2328      	movs	r3, #40	; 0x28
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	23f0      	movs	r3, #240	; 0xf0
 8003370:	2200      	movs	r2, #0
 8003372:	4620      	mov	r0, r4
 8003374:	f7fe fe02 	bl	8001f7c <_ZN10GUIBuilder10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 8003378:	f107 0308 	add.w	r3, r7, #8
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fd13 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fc7b 	bl	8006c82 <_ZNSaIcED1Ev>

	m_guiBuilder.addTextBox("FirstRoom temperature:", BLACK, 215, 140, 20);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0410 	add.w	r4, r3, #16
 8003392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fc72 	bl	8006c80 <_ZNSaIcEC1Ev>
 800339c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a4:	4967      	ldr	r1, [pc, #412]	; (8003544 <_ZN13MainMenuStateC1EP12StateManager+0x244>)
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fd66 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80033ac:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80033b0:	2314      	movs	r3, #20
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	238c      	movs	r3, #140	; 0x8c
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	23d7      	movs	r3, #215	; 0xd7
 80033ba:	2200      	movs	r2, #0
 80033bc:	4620      	mov	r0, r4
 80033be:	f7fe fddd 	bl	8001f7c <_ZN10GUIBuilder10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 80033c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 fcee 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80033cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 fc56 	bl	8006c82 <_ZNSaIcED1Ev>
	m_guiBuilder.addTextBox("23*C", BLACK, 395, 140, 20);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f103 0410 	add.w	r4, r3, #16
 80033dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fc4d 	bl	8006c80 <_ZNSaIcEC1Ev>
 80033e6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80033ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033ee:	4956      	ldr	r1, [pc, #344]	; (8003548 <_ZN13MainMenuStateC1EP12StateManager+0x248>)
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fd41 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80033f6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80033fa:	2314      	movs	r3, #20
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	238c      	movs	r3, #140	; 0x8c
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	f240 138b 	movw	r3, #395	; 0x18b
 8003406:	2200      	movs	r2, #0
 8003408:	4620      	mov	r0, r4
 800340a:	f7fe fdb7 	bl	8001f7c <_ZN10GUIBuilder10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 800340e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fcc8 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003418:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800341c:	4618      	mov	r0, r3
 800341e:	f003 fc30 	bl	8006c82 <_ZNSaIcED1Ev>

	m_guiBuilder.addTextBox("SecondRoom temperature:", BLACK, 210, 170, 20);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f103 0410 	add.w	r4, r3, #16
 8003428:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fc27 	bl	8006c80 <_ZNSaIcEC1Ev>
 8003432:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003436:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800343a:	4944      	ldr	r1, [pc, #272]	; (800354c <_ZN13MainMenuStateC1EP12StateManager+0x24c>)
 800343c:	4618      	mov	r0, r3
 800343e:	f003 fd1b 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003442:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003446:	2314      	movs	r3, #20
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	23aa      	movs	r3, #170	; 0xaa
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	23d2      	movs	r3, #210	; 0xd2
 8003450:	2200      	movs	r2, #0
 8003452:	4620      	mov	r0, r4
 8003454:	f7fe fd92 	bl	8001f7c <_ZN10GUIBuilder10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 8003458:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800345c:	4618      	mov	r0, r3
 800345e:	f003 fca3 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003462:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fc0b 	bl	8006c82 <_ZNSaIcED1Ev>
	m_guiBuilder.addTextBox("23*C", BLACK, 405, 170, 20);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f103 0410 	add.w	r4, r3, #16
 8003472:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003476:	4618      	mov	r0, r3
 8003478:	f003 fc02 	bl	8006c80 <_ZNSaIcEC1Ev>
 800347c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003480:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003484:	4930      	ldr	r1, [pc, #192]	; (8003548 <_ZN13MainMenuStateC1EP12StateManager+0x248>)
 8003486:	4618      	mov	r0, r3
 8003488:	f003 fcf6 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800348c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003490:	2314      	movs	r3, #20
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	23aa      	movs	r3, #170	; 0xaa
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f240 1395 	movw	r3, #405	; 0x195
 800349c:	2200      	movs	r2, #0
 800349e:	4620      	mov	r0, r4
 80034a0:	f7fe fd6c 	bl	8001f7c <_ZN10GUIBuilder10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 80034a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034a8:	4618      	mov	r0, r3
 80034aa:	f003 fc7d 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80034ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fbe5 	bl	8006c82 <_ZNSaIcED1Ev>

	m_guiBuilder.addButton(Square, BLUE, 240, 247, 60, 220);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0010 	add.w	r0, r3, #16
 80034be:	23dc      	movs	r3, #220	; 0xdc
 80034c0:	9302      	str	r3, [sp, #8]
 80034c2:	233c      	movs	r3, #60	; 0x3c
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	23f7      	movs	r3, #247	; 0xf7
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	23f0      	movs	r3, #240	; 0xf0
 80034cc:	221f      	movs	r2, #31
 80034ce:	2100      	movs	r1, #0
 80034d0:	f7fe fd3a 	bl	8001f48 <_ZN10GUIBuilder9addButtonE11ButtonShape5Coloriiii>
	m_guiBuilder.addTextBox("Adjust settings", BLACK, 240, 247, 20);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f103 0410 	add.w	r4, r3, #16
 80034da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 fbce 	bl	8006c80 <_ZNSaIcEC1Ev>
 80034e4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80034e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034ec:	4918      	ldr	r1, [pc, #96]	; (8003550 <_ZN13MainMenuStateC1EP12StateManager+0x250>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 fcc2 	bl	8006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80034f4:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80034f8:	2314      	movs	r3, #20
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	23f7      	movs	r3, #247	; 0xf7
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	23f0      	movs	r3, #240	; 0xf0
 8003502:	2200      	movs	r2, #0
 8003504:	4620      	mov	r0, r4
 8003506:	f7fe fd39 	bl	8001f7c <_ZN10GUIBuilder10addTextBoxENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>
 800350a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800350e:	4618      	mov	r0, r3
 8003510:	f003 fc4a 	bl	8006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003514:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003518:	4618      	mov	r0, r3
 800351a:	f003 fbb2 	bl	8006c82 <_ZNSaIcED1Ev>
	// set pointer to new GUI
	m_gui = m_guiBuilder.getResult();
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3310      	adds	r3, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fd4e 	bl	8001fc4 <_ZN10GUIBuilder9getResultEv>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
}
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	37b4      	adds	r7, #180	; 0xb4
 8003534:	46bd      	mov	sp, r7
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	08007390 	.word	0x08007390
 800353c:	080073ac 	.word	0x080073ac
 8003540:	080072f4 	.word	0x080072f4
 8003544:	08007304 	.word	0x08007304
 8003548:	0800731c 	.word	0x0800731c
 800354c:	08007324 	.word	0x08007324
 8003550:	0800733c 	.word	0x0800733c

08003554 <_ZN13MainMenuStateD1Ev>:

MainMenuState::~MainMenuState()
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <_ZN13MainMenuStateD1Ev+0x44>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <_ZN13MainMenuStateD1Ev+0x48>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	605a      	str	r2, [r3, #4]
{
	// delete old GUI
	if (m_gui != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <_ZN13MainMenuStateD1Ev+0x32>
	{
		delete m_gui;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68dc      	ldr	r4, [r3, #12]
 8003574:	2c00      	cmp	r4, #0
 8003576:	d006      	beq.n	8003586 <_ZN13MainMenuStateD1Ev+0x32>
 8003578:	4620      	mov	r0, r4
 800357a:	f7fd f8ab 	bl	80006d4 <_ZN3GUID1Ev>
 800357e:	211c      	movs	r1, #28
 8003580:	4620      	mov	r0, r4
 8003582:	f003 fb67 	bl	8006c54 <_ZdlPvj>
MainMenuState::~MainMenuState()
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fd f87b 	bl	8000684 <_ZN5StateD1Ev>
	}
}
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	08007390 	.word	0x08007390
 800359c:	080073ac 	.word	0x080073ac

080035a0 <_ZN13MainMenuStateD0Ev>:
MainMenuState::~MainMenuState()
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
}
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ffd3 	bl	8003554 <_ZN13MainMenuStateD1Ev>
 80035ae:	2114      	movs	r1, #20
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f003 fb4f 	bl	8006c54 <_ZdlPvj>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN13MainMenuState6updateEf>:

void MainMenuState::update(float deltaTime)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	ed87 0a00 	vstr	s0, [r7]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_ZN13MainMenuState6renderEv>:

//#include "LCD_Touch.h"
void MainMenuState::render()
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	//TP_DrawBoard();
	m_gui->render();
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fb20 	bl	8000c2a <_ZN3GUI6renderEv>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <_ZThn4_N13MainMenuState6renderEv>:
{
	public:
		MainMenuState(StateManager* stateManager);
		virtual ~MainMenuState();
		virtual void update(float deltaTime);
		virtual void render();
 80035f2:	f1a0 0004 	sub.w	r0, r0, #4
 80035f6:	f7ff bfef 	b.w	80035d8 <_ZN13MainMenuState6renderEv>

080035fa <_ZN13MainMenuState12processInputEv>:

void MainMenuState::processInput()
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <_ZN4ProgC1Ev>:
#include "Prog.h"

Prog::Prog() : m_stateManager()
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ffec 	bl	80005f8 <_ZN9UpdatableC1Ev>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc fff7 	bl	8000618 <_ZN10RenderableC1Ev>
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <_ZN4ProgC1Ev+0x3c>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	4a07      	ldr	r2, [pc, #28]	; (8003650 <_ZN4ProgC1Ev+0x40>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3308      	adds	r3, #8
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f82c 	bl	8003698 <_ZN12StateManagerC1Ev>
{
}
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	080073b8 	.word	0x080073b8
 8003650:	080073c8 	.word	0x080073c8

08003654 <_ZN4Prog6updateEf>:

void Prog::update(float deltaTime)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	ed87 0a00 	vstr	s0, [r7]
	m_stateManager.update(deltaTime);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3308      	adds	r3, #8
 8003664:	ed97 0a00 	vldr	s0, [r7]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f82f 	bl	80036cc <_ZN12StateManager6updateEf>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_ZN4Prog6renderEv>:

void Prog::render()
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
	m_stateManager.render();
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3308      	adds	r3, #8
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f837 	bl	80036f6 <_ZN12StateManager6renderEv>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_ZThn4_N4Prog6renderEv>:
	
	public:    
		Prog();
		~Prog(){};
		virtual void update(float deltaTime);
		virtual void render();
 8003690:	f1a0 0004 	sub.w	r0, r0, #4
 8003694:	f7ff bfef 	b.w	8003676 <_ZN4Prog6renderEv>

08003698 <_ZN12StateManagerC1Ev>:
#include "ChangeRoomNameMenuState.h"
#include "NewDeviceControllingSignalMenuState.h"
#include "RoomChooseMenuState.h"
#include "RoomSettingsMenuState.h"

StateManager::StateManager()
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <_ZN12StateManagerC1Ev+0x30>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
{
	m_currentState = new MainMenuState(this);
 80036a6:	2014      	movs	r0, #20
 80036a8:	f003 fad6 	bl	8006c58 <_Znwj>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461c      	mov	r4, r3
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff fe24 	bl	8003300 <_ZN13MainMenuStateC1EP12StateManager>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	605c      	str	r4, [r3, #4]
}
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	080073d4 	.word	0x080073d4

080036cc <_ZN12StateManager6updateEf>:
{
	delete m_currentState;
}

void StateManager::update(float deltaTime)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	ed87 0a00 	vstr	s0, [r7]
	m_currentState->update(deltaTime);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	461a      	mov	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	ed97 0a00 	vldr	s0, [r7]
 80036ea:	4610      	mov	r0, r2
 80036ec:	4798      	blx	r3
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_ZN12StateManager6renderEv>:

void StateManager::render()
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	m_currentState->render();
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4610      	mov	r0, r2
 800370e:	4798      	blx	r3
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZN7TextBoxC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Coloriii>:
#include "TextBox.h"
#include "LCD_GUI.h"

TextBox::TextBox(std::string text, Color color, int x, int y, int size)
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4618      	mov	r0, r3
 800372c:	f003 fb1b 	bl	8006d66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	m_text = text;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f003 fb3d 	bl	8006db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	m_color = color;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	831a      	strh	r2, [r3, #24]
	X = x;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	61da      	str	r2, [r3, #28]
	Y = y;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	621a      	str	r2, [r3, #32]
	Size = size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZN7TextBox6renderEv>:

void TextBox::render()
{
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af02      	add	r7, sp, #8
 8003762:	6078      	str	r0, [r7, #4]
	if(Size == 16)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b10      	cmp	r3, #16
 800376a:	d126      	bne.n	80037ba <_ZN7TextBox6renderEv+0x5e>
		GUI_DisString_EN(X - ((m_text.length()/2) * 11), Y - 6, m_text.c_str(), &Font16, FONT_BACKGROUND, m_color);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	b29c      	uxth	r4, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fb23 	bl	8006dc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800377a:	4603      	mov	r3, r0
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	441a      	add	r2, r3
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	4413      	add	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	1ae3      	subs	r3, r4, r3
 800378e:	b29c      	uxth	r4, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b06      	subs	r3, #6
 8003798:	b29d      	uxth	r5, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fb11 	bl	8006dc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8b1b      	ldrh	r3, [r3, #24]
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <_ZN7TextBox6renderEv+0x10c>)
 80037b2:	4629      	mov	r1, r5
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fbdf 	bl	8002f78 <GUI_DisString_EN>
	if(Size == 20)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b14      	cmp	r3, #20
 80037c0:	d124      	bne.n	800380c <_ZN7TextBox6renderEv+0xb0>
		GUI_DisString_EN(X - ((m_text.length()/2) * 15), Y - 8, m_text.c_str(), &Font20, FONT_BACKGROUND, m_color);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	b29c      	uxth	r4, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 faf8 	bl	8006dc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	0112      	lsls	r2, r2, #4
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	b29b      	uxth	r3, r3
 80037de:	1ae3      	subs	r3, r4, r3
 80037e0:	b29c      	uxth	r4, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b08      	subs	r3, #8
 80037ea:	b29d      	uxth	r5, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 fae8 	bl	8006dc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8b1b      	ldrh	r3, [r3, #24]
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <_ZN7TextBox6renderEv+0x110>)
 8003804:	4629      	mov	r1, r5
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff fbb6 	bl	8002f78 <GUI_DisString_EN>
	if(Size == 24)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2b18      	cmp	r3, #24
 8003812:	d124      	bne.n	800385e <_ZN7TextBox6renderEv+0x102>
		GUI_DisString_EN(X - ((m_text.length()/2) * 17), Y - 10, m_text.c_str(), &Font24, FONT_BACKGROUND, m_color);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	b29c      	uxth	r4, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4618      	mov	r0, r3
 800381e:	f003 facf 	bl	8006dc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003822:	4603      	mov	r3, r0
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	4413      	add	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	1ae3      	subs	r3, r4, r3
 8003832:	b29c      	uxth	r4, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b0a      	subs	r3, #10
 800383c:	b29d      	uxth	r5, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fabf 	bl	8006dc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8b1b      	ldrh	r3, [r3, #24]
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <_ZN7TextBox6renderEv+0x114>)
 8003856:	4629      	mov	r1, r5
 8003858:	4620      	mov	r0, r4
 800385a:	f7ff fb8d 	bl	8002f78 <GUI_DisString_EN>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bdb0      	pop	{r4, r5, r7, pc}
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000
 800386c:	20000008 	.word	0x20000008
 8003870:	20000010 	.word	0x20000010

08003874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	; 0x28
 8003878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <MX_GPIO_Init+0x130>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a44      	ldr	r2, [pc, #272]	; (80039a4 <MX_GPIO_Init+0x130>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <MX_GPIO_Init+0x130>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a36      	ldr	r2, [pc, #216]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <MX_GPIO_Init+0x130>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_BUSY_Pin|TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80038fa:	2200      	movs	r2, #0
 80038fc:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8003900:	4829      	ldr	r0, [pc, #164]	; (80039a8 <MX_GPIO_Init+0x134>)
 8003902:	f000 ff75 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8003906:	2200      	movs	r2, #0
 8003908:	f44f 7140 	mov.w	r1, #768	; 0x300
 800390c:	4827      	ldr	r0, [pc, #156]	; (80039ac <MX_GPIO_Init+0x138>)
 800390e:	f000 ff6f 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <MX_GPIO_Init+0x13c>)
 800391a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4619      	mov	r1, r3
 8003926:	4823      	ldr	r0, [pc, #140]	; (80039b4 <MX_GPIO_Init+0x140>)
 8003928:	f000 fdce 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TP_BUSY_Pin|TP_CS_Pin|LCD_CS_Pin;
 800392c:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8003930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393a:	2300      	movs	r3, #0
 800393c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	4619      	mov	r1, r3
 8003944:	4818      	ldr	r0, [pc, #96]	; (80039a8 <MX_GPIO_Init+0x134>)
 8003946:	f000 fdbf 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 800394a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800394e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003950:	2301      	movs	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	2300      	movs	r3, #0
 800395a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	4812      	ldr	r0, [pc, #72]	; (80039ac <MX_GPIO_Init+0x138>)
 8003964:	f000 fdb0 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8003968:	2308      	movs	r3, #8
 800396a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	480b      	ldr	r0, [pc, #44]	; (80039a8 <MX_GPIO_Init+0x134>)
 800397c:	f000 fda4 	bl	80044c8 <HAL_GPIO_Init>

	///////////////////SENSORS////////////
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_6 | GPIO_PIN_5;
 8003980:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8003984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398e:	f107 0314 	add.w	r3, r7, #20
 8003992:	4619      	mov	r1, r3
 8003994:	4807      	ldr	r0, [pc, #28]	; (80039b4 <MX_GPIO_Init+0x140>)
 8003996:	f000 fd97 	bl	80044c8 <HAL_GPIO_Init>

}
 800399a:	bf00      	nop
 800399c:	3728      	adds	r7, #40	; 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020000 	.word	0x40020000
 80039b0:	10210000 	.word	0x10210000
 80039b4:	40020800 	.word	0x40020800

080039b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
  /* MCU Configuration---------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick.*/
  HAL_Init();
 80039be:	f000 fbdb 	bl	8004178 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80039c2:	f000 f83b 	bl	8003a3c <_Z18SystemClock_Configv>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039c6:	f7ff ff55 	bl	8003874 <MX_GPIO_Init>
	MX_SPI1_Init();
 80039ca:	f000 f8b5 	bl	8003b38 <MX_SPI1_Init>
  MX_TIM3_Init();
 80039ce:	f000 f9fb 	bl	8003dc8 <MX_TIM3_Init>
	MX_TIM13_Init();
 80039d2:	f000 fa53 	bl	8003e7c <MX_TIM13_Init>
  MX_TIM14_Init();
 80039d6:	f000 fa75 	bl	8003ec4 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80039da:	f000 fb31 	bl	8004040 <MX_USART2_UART_Init>
	
	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R	
 80039de:	2306      	movs	r3, #6
 80039e0:	71fb      	strb	r3, [r7, #7]
	LCD_Init(Lcd_ScanDir, 1000);
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fda9 	bl	8002540 <LCD_Init>
	TP_Init(Lcd_ScanDir);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fc67 	bl	80032c4 <TP_Init>

	TP_GetAdFac();
 80039f6:	f7ff fbed 	bl	80031d4 <TP_GetAdFac>
	
	// Program's engine initialisation
	prog = new Prog();
 80039fa:	2010      	movs	r0, #16
 80039fc:	f003 f92c 	bl	8006c58 <_Znwj>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461c      	mov	r4, r3
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7ff fe03 	bl	8003610 <_ZN4ProgC1Ev>
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <main+0x80>)
 8003a0c:	601c      	str	r4, [r3, #0]
	prog->render();
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <main+0x80>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <main+0x80>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4798      	blx	r3
	while(1)
	{
		//It is one after another temporarily
		prog->update(1);
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <main+0x80>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <main+0x80>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a30:	4610      	mov	r0, r2
 8003a32:	4798      	blx	r3
 8003a34:	e7f4      	b.n	8003a20 <main+0x68>
 8003a36:	bf00      	nop
 8003a38:	200000c4 	.word	0x200000c4

08003a3c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b094      	sub	sp, #80	; 0x50
 8003a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a42:	f107 031c 	add.w	r3, r7, #28
 8003a46:	2234      	movs	r2, #52	; 0x34
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fa94 	bl	8006f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a50:	f107 0308 	add.w	r3, r7, #8
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	2300      	movs	r3, #0
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <_Z18SystemClock_Configv+0xe8>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4a2e      	ldr	r2, [pc, #184]	; (8003b24 <_Z18SystemClock_Configv+0xe8>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a70:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <_Z18SystemClock_Configv+0xe8>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <_Z18SystemClock_Configv+0xec>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a88:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <_Z18SystemClock_Configv+0xec>)
 8003a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <_Z18SystemClock_Configv+0xec>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003aac:	2300      	movs	r3, #0
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ab4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003ab8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003aba:	2304      	movs	r3, #4
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ac6:	f107 031c 	add.w	r3, r7, #28
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 f976 	bl	8004dbc <HAL_RCC_OscConfig>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8003ae0:	f000 f824 	bl	8003b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	2102      	movs	r1, #2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fe8f 	bl	8004824 <HAL_RCC_ClockConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8003b16:	f000 f809 	bl	8003b2c <Error_Handler>
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3750      	adds	r7, #80	; 0x50
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40007000 	.word	0x40007000

08003b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b30:	b672      	cpsid	i
}
 8003b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b34:	e7fe      	b.n	8003b34 <Error_Handler+0x8>
	...

08003b38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b3c:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <MX_SPI1_Init+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7c:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b84:	220a      	movs	r2, #10
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b88:	4804      	ldr	r0, [pc, #16]	; (8003b9c <MX_SPI1_Init+0x64>)
 8003b8a:	f001 fbb5 	bl	80052f8 <HAL_SPI_Init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b94:	f7ff ffca 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	200000e4 	.word	0x200000e4
 8003ba0:	40013000 	.word	0x40013000

08003ba4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_SPI_MspInit+0x84>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d12b      	bne.n	8003c1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <HAL_SPI_MspInit+0x88>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_SPI_MspInit+0x88>)
 8003bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_SPI_MspInit+0x88>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_SPI_MspInit+0x88>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_SPI_MspInit+0x88>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <HAL_SPI_MspInit+0x88>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003bfe:	23e0      	movs	r3, #224	; 0xe0
 8003c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2302      	movs	r3, #2
 8003c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c0e:	2305      	movs	r3, #5
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c12:	f107 0314 	add.w	r3, r7, #20
 8003c16:	4619      	mov	r1, r3
 8003c18:	4805      	ldr	r0, [pc, #20]	; (8003c30 <HAL_SPI_MspInit+0x8c>)
 8003c1a:	f000 fc55 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c1e:	bf00      	nop
 8003c20:	3728      	adds	r7, #40	; 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40013000 	.word	0x40013000
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40020000 	.word	0x40020000

08003c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c72:	2007      	movs	r0, #7
 8003c74:	f000 fbe6 	bl	8004444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800

08003c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <NMI_Handler+0x4>

08003c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c8e:	e7fe      	b.n	8003c8e <HardFault_Handler+0x4>

08003c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <MemManage_Handler+0x4>

08003c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c9a:	e7fe      	b.n	8003c9a <BusFault_Handler+0x4>

08003c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ca0:	e7fe      	b.n	8003ca0 <UsageFault_Handler+0x4>

08003ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd0:	f000 faa4 	bl	800421c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003cde:	f002 f8a3 	bl	8005e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000184 	.word	0x20000184

08003cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
	return 1;
 8003cf0:	2301      	movs	r3, #1
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_kill>:

int _kill(int pid, int sig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d06:	f003 f8ef 	bl	8006ee8 <__errno>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2216      	movs	r2, #22
 8003d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_exit>:

void _exit (int status)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffe7 	bl	8003cfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d2e:	e7fe      	b.n	8003d2e <_exit+0x12>

08003d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <_sbrk+0x5c>)
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <_sbrk+0x60>)
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <_sbrk+0x64>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <_sbrk+0x64>)
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <_sbrk+0x68>)
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <_sbrk+0x64>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d207      	bcs.n	8003d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d60:	f003 f8c2 	bl	8006ee8 <__errno>
 8003d64:	4603      	mov	r3, r0
 8003d66:	220c      	movs	r2, #12
 8003d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e009      	b.n	8003d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <_sbrk+0x64>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <_sbrk+0x64>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <_sbrk+0x64>)
 8003d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20020000 	.word	0x20020000
 8003d90:	00000400 	.word	0x00000400
 8003d94:	200000c8 	.word	0x200000c8
 8003d98:	20000270 	.word	0x20000270

08003d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <SystemInit+0x28>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <SystemInit+0x28>)
 8003da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <SystemInit+0x28>)
 8003db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db6:	609a      	str	r2, [r3, #8]
#endif
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dce:	f107 0320 	add.w	r3, r7, #32
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	611a      	str	r2, [r3, #16]
 8003de6:	615a      	str	r2, [r3, #20]
 8003de8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <MX_TIM3_Init+0xb0>)
 8003dee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1800-1;
 8003df0:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003df2:	f240 7207 	movw	r2, #1799	; 0x707
 8003df6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003e00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e06:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e12:	4818      	ldr	r0, [pc, #96]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003e14:	f001 fef1 	bl	8005bfa <HAL_TIM_PWM_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003e1e:	f7ff fe85 	bl	8003b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e2a:	f107 0320 	add.w	r3, r7, #32
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4810      	ldr	r0, [pc, #64]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003e32:	f002 fc67 	bl	8006704 <HAL_TIMEx_MasterConfigSynchronization>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003e3c:	f7ff fe76 	bl	8003b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e40:	2360      	movs	r3, #96	; 0x60
 8003e42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e50:	1d3b      	adds	r3, r7, #4
 8003e52:	2204      	movs	r2, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4807      	ldr	r0, [pc, #28]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003e58:	f002 f8ee 	bl	8006038 <HAL_TIM_PWM_ConfigChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003e62:	f7ff fe63 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e66:	4803      	ldr	r0, [pc, #12]	; (8003e74 <MX_TIM3_Init+0xac>)
 8003e68:	f000 f8b0 	bl	8003fcc <HAL_TIM_MspPostInit>

}
 8003e6c:	bf00      	nop
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	2000013c 	.word	0x2000013c
 8003e78:	40000400 	.word	0x40000400

08003e7c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <MX_TIM13_Init+0x40>)
 8003e82:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <MX_TIM13_Init+0x44>)
 8003e84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 17999;
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <MX_TIM13_Init+0x40>)
 8003e88:	f244 624f 	movw	r2, #17999	; 0x464f
 8003e8c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <MX_TIM13_Init+0x40>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <MX_TIM13_Init+0x40>)
 8003e96:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e9a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9c:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <MX_TIM13_Init+0x40>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <MX_TIM13_Init+0x40>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003ea8:	4804      	ldr	r0, [pc, #16]	; (8003ebc <MX_TIM13_Init+0x40>)
 8003eaa:	f001 fe57 	bl	8005b5c <HAL_TIM_Base_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003eb4:	f7ff fe3a 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000184 	.word	0x20000184
 8003ec0:	40001c00 	.word	0x40001c00

08003ec4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_TIM14_Init+0x40>)
 8003eca:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <MX_TIM14_Init+0x44>)
 8003ecc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 179;
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <MX_TIM14_Init+0x40>)
 8003ed0:	22b3      	movs	r2, #179	; 0xb3
 8003ed2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <MX_TIM14_Init+0x40>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <MX_TIM14_Init+0x40>)
 8003edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <MX_TIM14_Init+0x40>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_TIM14_Init+0x40>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003eee:	4805      	ldr	r0, [pc, #20]	; (8003f04 <MX_TIM14_Init+0x40>)
 8003ef0:	f001 fe34 	bl	8005b5c <HAL_TIM_Base_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003efa:	f7ff fe17 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200001cc 	.word	0x200001cc
 8003f08:	40002000 	.word	0x40002000

08003f0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10d      	bne.n	8003f3a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_TIM_PWM_MspInit+0x40>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_TIM_PWM_MspInit+0x40>)
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_TIM_PWM_MspInit+0x40>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40023800 	.word	0x40023800

08003f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_TIM_Base_MspInit+0x70>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d116      	bne.n	8003f90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_TIM_Base_MspInit+0x74>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIM_Base_MspInit+0x74>)
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <HAL_TIM_Base_MspInit+0x74>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	202c      	movs	r0, #44	; 0x2c
 8003f84:	f000 fa69 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003f88:	202c      	movs	r0, #44	; 0x2c
 8003f8a:	f000 fa82 	bl	8004492 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8003f8e:	e012      	b.n	8003fb6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <HAL_TIM_Base_MspInit+0x78>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10d      	bne.n	8003fb6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_TIM_Base_MspInit+0x74>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_TIM_Base_MspInit+0x74>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_TIM_Base_MspInit+0x74>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40001c00 	.word	0x40001c00
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40002000 	.word	0x40002000

08003fcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	f107 030c 	add.w	r3, r7, #12
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a12      	ldr	r2, [pc, #72]	; (8004034 <HAL_TIM_MspPostInit+0x68>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d11d      	bne.n	800402a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_TIM_MspPostInit+0x6c>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <HAL_TIM_MspPostInit+0x6c>)
 8003ff8:	f043 0304 	orr.w	r3, r3, #4
 8003ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <HAL_TIM_MspPostInit+0x6c>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400e:	2302      	movs	r3, #2
 8004010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800401a:	2302      	movs	r3, #2
 800401c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	4619      	mov	r1, r3
 8004024:	4805      	ldr	r0, [pc, #20]	; (800403c <HAL_TIM_MspPostInit+0x70>)
 8004026:	f000 fa4f 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800402a:	bf00      	nop
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40000400 	.word	0x40000400
 8004038:	40023800 	.word	0x40023800
 800403c:	40020800 	.word	0x40020800

08004040 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <MX_USART2_UART_Init+0x50>)
 8004048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <MX_USART2_UART_Init+0x4c>)
 800404c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <MX_USART2_UART_Init+0x4c>)
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <MX_USART2_UART_Init+0x4c>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004076:	4805      	ldr	r0, [pc, #20]	; (800408c <MX_USART2_UART_Init+0x4c>)
 8004078:	f002 fbd4 	bl	8006824 <HAL_UART_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004082:	f7ff fd53 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000214 	.word	0x20000214
 8004090:	40004400 	.word	0x40004400

08004094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_UART_MspInit+0x84>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d12b      	bne.n	800410e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	4b18      	ldr	r3, [pc, #96]	; (800411c <HAL_UART_MspInit+0x88>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <HAL_UART_MspInit+0x88>)
 80040c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_UART_MspInit+0x88>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <HAL_UART_MspInit+0x88>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	4a10      	ldr	r2, [pc, #64]	; (800411c <HAL_UART_MspInit+0x88>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6313      	str	r3, [r2, #48]	; 0x30
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <HAL_UART_MspInit+0x88>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040ee:	230c      	movs	r3, #12
 80040f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f2:	2302      	movs	r3, #2
 80040f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fa:	2303      	movs	r3, #3
 80040fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040fe:	2307      	movs	r3, #7
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	4619      	mov	r1, r3
 8004108:	4805      	ldr	r0, [pc, #20]	; (8004120 <HAL_UART_MspInit+0x8c>)
 800410a:	f000 f9dd 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800410e:	bf00      	nop
 8004110:	3728      	adds	r7, #40	; 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40004400 	.word	0x40004400
 800411c:	40023800 	.word	0x40023800
 8004120:	40020000 	.word	0x40020000

08004124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800415c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004128:	480d      	ldr	r0, [pc, #52]	; (8004160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800412a:	490e      	ldr	r1, [pc, #56]	; (8004164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800412c:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800412e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004130:	e002      	b.n	8004138 <LoopCopyDataInit>

08004132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004136:	3304      	adds	r3, #4

08004138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800413a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800413c:	d3f9      	bcc.n	8004132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800413e:	4a0b      	ldr	r2, [pc, #44]	; (800416c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004140:	4c0b      	ldr	r4, [pc, #44]	; (8004170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004144:	e001      	b.n	800414a <LoopFillZerobss>

08004146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004148:	3204      	adds	r2, #4

0800414a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800414a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800414c:	d3fb      	bcc.n	8004146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800414e:	f7ff fe25 	bl	8003d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004152:	f002 fecf 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004156:	f7ff fc2f 	bl	80039b8 <main>
  bx  lr    
 800415a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800415c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004164:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8004168:	0800a9b8 	.word	0x0800a9b8
  ldr r2, =_sbss
 800416c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8004170:	2000026c 	.word	0x2000026c

08004174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004174:	e7fe      	b.n	8004174 <ADC_IRQHandler>
	...

08004178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_Init+0x40>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <HAL_Init+0x40>)
 8004182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_Init+0x40>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_Init+0x40>)
 800418e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004194:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_Init+0x40>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <HAL_Init+0x40>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a0:	2003      	movs	r0, #3
 80041a2:	f000 f94f 	bl	8004444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f000 f808 	bl	80041bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041ac:	f7ff fd42 	bl	8003c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00

080041bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_InitTick+0x54>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_InitTick+0x58>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f967 	bl	80044ae <HAL_SYSTICK_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00e      	b.n	8004208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d80a      	bhi.n	8004206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f0:	2200      	movs	r2, #0
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	f000 f92f 	bl	800445a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041fc:	4a06      	ldr	r2, [pc, #24]	; (8004218 <HAL_InitTick+0x5c>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000018 	.word	0x20000018
 8004214:	20000020 	.word	0x20000020
 8004218:	2000001c 	.word	0x2000001c

0800421c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_IncTick+0x20>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_IncTick+0x24>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4413      	add	r3, r2
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_IncTick+0x24>)
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000020 	.word	0x20000020
 8004240:	20000258 	.word	0x20000258

08004244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return uwTick;
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_GetTick+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000258 	.word	0x20000258

0800425c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7ff ffee 	bl	8004244 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d005      	beq.n	8004282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <HAL_Delay+0x44>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004282:	bf00      	nop
 8004284:	f7ff ffde 	bl	8004244 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d8f7      	bhi.n	8004284 <HAL_Delay+0x28>
  {
  }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000020 	.word	0x20000020

080042a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	60d3      	str	r3, [r2, #12]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <__NVIC_GetPriorityGrouping+0x18>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	f003 0307 	and.w	r3, r3, #7
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db0b      	blt.n	8004332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	4907      	ldr	r1, [pc, #28]	; (8004340 <__NVIC_EnableIRQ+0x38>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2001      	movs	r0, #1
 800432a:	fa00 f202 	lsl.w	r2, r0, r2
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e100 	.word	0xe000e100

08004344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db0a      	blt.n	800436e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	490c      	ldr	r1, [pc, #48]	; (8004390 <__NVIC_SetPriority+0x4c>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	440b      	add	r3, r1
 8004368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800436c:	e00a      	b.n	8004384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4908      	ldr	r1, [pc, #32]	; (8004394 <__NVIC_SetPriority+0x50>)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3b04      	subs	r3, #4
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	440b      	add	r3, r1
 8004382:	761a      	strb	r2, [r3, #24]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	; 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf28      	it	cs
 80043b6:	2304      	movcs	r3, #4
 80043b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3304      	adds	r3, #4
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d902      	bls.n	80043c8 <NVIC_EncodePriority+0x30>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3b03      	subs	r3, #3
 80043c6:	e000      	b.n	80043ca <NVIC_EncodePriority+0x32>
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e0:	f04f 31ff 	mov.w	r1, #4294967295
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	4313      	orrs	r3, r2
         );
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	; 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004410:	d301      	bcc.n	8004416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004412:	2301      	movs	r3, #1
 8004414:	e00f      	b.n	8004436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <SysTick_Config+0x40>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441e:	210f      	movs	r1, #15
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	f7ff ff8e 	bl	8004344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SysTick_Config+0x40>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <SysTick_Config+0x40>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff29 	bl	80042a4 <__NVIC_SetPriorityGrouping>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff ff3e 	bl	80042ec <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff8e 	bl	8004398 <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5d 	bl	8004344 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff31 	bl	8004308 <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ffa2 	bl	8004400 <SysTick_Config>
 80044bc:	4603      	mov	r3, r0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e165      	b.n	80047b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f040 8154 	bne.w	80047aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d005      	beq.n	800451a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004516:	2b02      	cmp	r3, #2
 8004518:	d130      	bne.n	800457c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004550:	2201      	movs	r2, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 0201 	and.w	r2, r3, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d017      	beq.n	80045b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d123      	bne.n	800460c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	220f      	movs	r2, #15
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80ae 	beq.w	80047aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <HAL_GPIO_Init+0x300>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	4a5c      	ldr	r2, [pc, #368]	; (80047c8 <HAL_GPIO_Init+0x300>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800465c:	6453      	str	r3, [r2, #68]	; 0x44
 800465e:	4b5a      	ldr	r3, [pc, #360]	; (80047c8 <HAL_GPIO_Init+0x300>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_GPIO_Init+0x304>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4f      	ldr	r2, [pc, #316]	; (80047d0 <HAL_GPIO_Init+0x308>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d025      	beq.n	80046e2 <HAL_GPIO_Init+0x21a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4e      	ldr	r2, [pc, #312]	; (80047d4 <HAL_GPIO_Init+0x30c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_GPIO_Init+0x216>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4d      	ldr	r2, [pc, #308]	; (80047d8 <HAL_GPIO_Init+0x310>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_GPIO_Init+0x212>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4c      	ldr	r2, [pc, #304]	; (80047dc <HAL_GPIO_Init+0x314>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_Init+0x20e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4b      	ldr	r2, [pc, #300]	; (80047e0 <HAL_GPIO_Init+0x318>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <HAL_GPIO_Init+0x20a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_GPIO_Init+0x31c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_Init+0x206>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a49      	ldr	r2, [pc, #292]	; (80047e8 <HAL_GPIO_Init+0x320>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_GPIO_Init+0x202>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e00c      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046ca:	2307      	movs	r3, #7
 80046cc:	e00a      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046ce:	2305      	movs	r3, #5
 80046d0:	e008      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046d2:	2304      	movs	r3, #4
 80046d4:	e006      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046d6:	2303      	movs	r3, #3
 80046d8:	e004      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046da:	2302      	movs	r3, #2
 80046dc:	e002      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046e2:	2300      	movs	r3, #0
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	f002 0203 	and.w	r2, r2, #3
 80046ea:	0092      	lsls	r2, r2, #2
 80046ec:	4093      	lsls	r3, r2
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f4:	4935      	ldr	r1, [pc, #212]	; (80047cc <HAL_GPIO_Init+0x304>)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004702:	4b3a      	ldr	r3, [pc, #232]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004726:	4a31      	ldr	r2, [pc, #196]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800472c:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <HAL_GPIO_Init+0x324>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800477a:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_GPIO_Init+0x324>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047a4:	4a11      	ldr	r2, [pc, #68]	; (80047ec <HAL_GPIO_Init+0x324>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	f67f ae96 	bls.w	80044e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40013800 	.word	0x40013800
 80047d0:	40020000 	.word	0x40020000
 80047d4:	40020400 	.word	0x40020400
 80047d8:	40020800 	.word	0x40020800
 80047dc:	40020c00 	.word	0x40020c00
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40021400 	.word	0x40021400
 80047e8:	40021800 	.word	0x40021800
 80047ec:	40013c00 	.word	0x40013c00

080047f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
 80047fc:	4613      	mov	r3, r2
 80047fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004800:	787b      	ldrb	r3, [r7, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004806:	887a      	ldrh	r2, [r7, #2]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800480c:	e003      	b.n	8004816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	041a      	lsls	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	619a      	str	r2, [r3, #24]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0cc      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d90c      	bls.n	8004860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0b8      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d020      	beq.n	80048ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004878:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b50      	ldr	r3, [pc, #320]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	494d      	ldr	r1, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d044      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d119      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e06f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e067      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4934      	ldr	r1, [pc, #208]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7ff fc96 	bl	8004244 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7ff fc92 	bl	8004244 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e04f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d20c      	bcs.n	800496c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e032      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4916      	ldr	r1, [pc, #88]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f855 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490a      	ldr	r1, [pc, #40]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fbf6 	bl	80041bc <HAL_InitTick>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	0800a94c 	.word	0x0800a94c
 80049e8:	20000018 	.word	0x20000018
 80049ec:	2000001c 	.word	0x2000001c

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000018 	.word	0x20000018

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a0c:	f7ff fff0 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	0800a95c 	.word	0x0800a95c

08004a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a34:	f7ff ffdc 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0b5b      	lsrs	r3, r3, #13
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	0800a95c 	.word	0x0800a95c

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b088      	sub	sp, #32
 8004a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a74:	4bce      	ldr	r3, [pc, #824]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	f200 818d 	bhi.w	8004d9c <HAL_RCC_GetSysClockFreq+0x344>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_RCC_GetSysClockFreq+0x30>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004d9d 	.word	0x08004d9d
 8004a90:	08004d9d 	.word	0x08004d9d
 8004a94:	08004d9d 	.word	0x08004d9d
 8004a98:	08004ac3 	.word	0x08004ac3
 8004a9c:	08004d9d 	.word	0x08004d9d
 8004aa0:	08004d9d 	.word	0x08004d9d
 8004aa4:	08004d9d 	.word	0x08004d9d
 8004aa8:	08004ac9 	.word	0x08004ac9
 8004aac:	08004d9d 	.word	0x08004d9d
 8004ab0:	08004d9d 	.word	0x08004d9d
 8004ab4:	08004d9d 	.word	0x08004d9d
 8004ab8:	08004c3d 	.word	0x08004c3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4bbd      	ldr	r3, [pc, #756]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004abe:	61bb      	str	r3, [r7, #24]
       break;
 8004ac0:	e16f      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac2:	4bbd      	ldr	r3, [pc, #756]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x360>)
 8004ac4:	61bb      	str	r3, [r7, #24]
      break;
 8004ac6:	e16c      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4bb9      	ldr	r3, [pc, #740]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4bb7      	ldr	r3, [pc, #732]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d053      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4bb4      	ldr	r3, [pc, #720]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	ea02 0400 	and.w	r4, r2, r0
 8004af6:	603c      	str	r4, [r7, #0]
 8004af8:	400b      	ands	r3, r1
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	014b      	lsls	r3, r1, #5
 8004b0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b12:	0142      	lsls	r2, r0, #5
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	4623      	mov	r3, r4
 8004b1a:	1ac0      	subs	r0, r0, r3
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	018b      	lsls	r3, r1, #6
 8004b2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b30:	0182      	lsls	r2, r0, #6
 8004b32:	1a12      	subs	r2, r2, r0
 8004b34:	eb63 0301 	sbc.w	r3, r3, r1
 8004b38:	f04f 0000 	mov.w	r0, #0
 8004b3c:	f04f 0100 	mov.w	r1, #0
 8004b40:	00d9      	lsls	r1, r3, #3
 8004b42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b46:	00d0      	lsls	r0, r2, #3
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	1852      	adds	r2, r2, r1
 8004b50:	4629      	mov	r1, r5
 8004b52:	eb43 0101 	adc.w	r1, r3, r1
 8004b56:	460b      	mov	r3, r1
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	0259      	lsls	r1, r3, #9
 8004b62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b66:	0250      	lsls	r0, r2, #9
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	f7fb fb4c 	bl	8000214 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4613      	mov	r3, r2
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	e04c      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b8a      	ldr	r3, [pc, #552]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	ea02 0a00 	and.w	sl, r2, r0
 8004b9e:	ea03 0b01 	and.w	fp, r3, r1
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	014b      	lsls	r3, r1, #5
 8004bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bb4:	0142      	lsls	r2, r0, #5
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	ebb0 000a 	subs.w	r0, r0, sl
 8004bbe:	eb61 010b 	sbc.w	r1, r1, fp
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	018b      	lsls	r3, r1, #6
 8004bcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bd0:	0182      	lsls	r2, r0, #6
 8004bd2:	1a12      	subs	r2, r2, r0
 8004bd4:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd8:	f04f 0000 	mov.w	r0, #0
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	00d9      	lsls	r1, r3, #3
 8004be2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004be6:	00d0      	lsls	r0, r2, #3
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	eb12 020a 	adds.w	r2, r2, sl
 8004bf0:	eb43 030b 	adc.w	r3, r3, fp
 8004bf4:	f04f 0000 	mov.w	r0, #0
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	0299      	lsls	r1, r3, #10
 8004bfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c02:	0290      	lsls	r0, r2, #10
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	f7fb fafe 	bl	8000214 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c20:	4b63      	ldr	r3, [pc, #396]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	61bb      	str	r3, [r7, #24]
      break;
 8004c3a:	e0b2      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c3c:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c46:	4b5a      	ldr	r3, [pc, #360]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d04d      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c52:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	ea02 0800 	and.w	r8, r2, r0
 8004c6a:	ea03 0901 	and.w	r9, r3, r1
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	014b      	lsls	r3, r1, #5
 8004c7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c80:	0142      	lsls	r2, r0, #5
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	ebb0 0008 	subs.w	r0, r0, r8
 8004c8a:	eb61 0109 	sbc.w	r1, r1, r9
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	018b      	lsls	r3, r1, #6
 8004c98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c9c:	0182      	lsls	r2, r0, #6
 8004c9e:	1a12      	subs	r2, r2, r0
 8004ca0:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	00d9      	lsls	r1, r3, #3
 8004cae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cb2:	00d0      	lsls	r0, r2, #3
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	eb12 0208 	adds.w	r2, r2, r8
 8004cbc:	eb43 0309 	adc.w	r3, r3, r9
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	0259      	lsls	r1, r3, #9
 8004cca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004cce:	0250      	lsls	r0, r2, #9
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	f7fb fa98 	bl	8000214 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e04a      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cfe:	f04f 0100 	mov.w	r1, #0
 8004d02:	ea02 0400 	and.w	r4, r2, r0
 8004d06:	ea03 0501 	and.w	r5, r3, r1
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	014b      	lsls	r3, r1, #5
 8004d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d1c:	0142      	lsls	r2, r0, #5
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	1b00      	subs	r0, r0, r4
 8004d24:	eb61 0105 	sbc.w	r1, r1, r5
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	018b      	lsls	r3, r1, #6
 8004d32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d36:	0182      	lsls	r2, r0, #6
 8004d38:	1a12      	subs	r2, r2, r0
 8004d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	00d9      	lsls	r1, r3, #3
 8004d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d4c:	00d0      	lsls	r0, r2, #3
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	1912      	adds	r2, r2, r4
 8004d54:	eb45 0303 	adc.w	r3, r5, r3
 8004d58:	f04f 0000 	mov.w	r0, #0
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	0299      	lsls	r1, r3, #10
 8004d62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d66:	0290      	lsls	r0, r2, #10
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	f7fb fa4c 	bl	8000214 <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4613      	mov	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	0f1b      	lsrs	r3, r3, #28
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	61bb      	str	r3, [r7, #24]
      break;
 8004d9a:	e002      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d9e:	61bb      	str	r3, [r7, #24]
      break;
 8004da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004da2:	69bb      	ldr	r3, [r7, #24]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	00f42400 	.word	0x00f42400
 8004db8:	007a1200 	.word	0x007a1200

08004dbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e28d      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8083 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ddc:	4b94      	ldr	r3, [pc, #592]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d019      	beq.n	8004e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004de8:	4b91      	ldr	r3, [pc, #580]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004df4:	4b8e      	ldr	r3, [pc, #568]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e00:	d00c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e02:	4b8b      	ldr	r3, [pc, #556]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d112      	bne.n	8004e34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4b88      	ldr	r3, [pc, #544]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	4b84      	ldr	r3, [pc, #528]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05b      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x124>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d157      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e25a      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCC_OscConfig+0x90>
 8004e3e:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a7b      	ldr	r2, [pc, #492]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e01d      	b.n	8004e88 <HAL_RCC_OscConfig+0xcc>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0xb4>
 8004e56:	4b76      	ldr	r3, [pc, #472]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a75      	ldr	r2, [pc, #468]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	4b73      	ldr	r3, [pc, #460]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a72      	ldr	r2, [pc, #456]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0xcc>
 8004e70:	4b6f      	ldr	r3, [pc, #444]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b6c      	ldr	r3, [pc, #432]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6b      	ldr	r2, [pc, #428]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7ff f9d8 	bl	8004244 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e98:	f7ff f9d4 	bl	8004244 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e21f      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	4b61      	ldr	r3, [pc, #388]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0xdc>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7ff f9c4 	bl	8004244 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec0:	f7ff f9c0 	bl	8004244 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	; 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e20b      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	4b57      	ldr	r3, [pc, #348]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x104>
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d06f      	beq.n	8004fce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004eee:	4b50      	ldr	r3, [pc, #320]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d017      	beq.n	8004f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004efa:	4b4d      	ldr	r3, [pc, #308]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d105      	bne.n	8004f12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f06:	4b4a      	ldr	r3, [pc, #296]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b47      	ldr	r3, [pc, #284]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d11c      	bne.n	8004f58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1e:	4b44      	ldr	r3, [pc, #272]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	4b41      	ldr	r3, [pc, #260]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_RCC_OscConfig+0x186>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1d3      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4937      	ldr	r1, [pc, #220]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f56:	e03a      	b.n	8004fce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f60:	4b34      	ldr	r3, [pc, #208]	; (8005034 <HAL_RCC_OscConfig+0x278>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7ff f96d 	bl	8004244 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7ff f969 	bl	8004244 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1b4      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f80:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b28      	ldr	r3, [pc, #160]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4925      	ldr	r1, [pc, #148]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	e015      	b.n	8004fce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa2:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_RCC_OscConfig+0x278>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7ff f94c 	bl	8004244 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb0:	f7ff f948 	bl	8004244 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e193      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d036      	beq.n	8005048 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d016      	beq.n	8005010 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7ff f92c 	bl	8004244 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7ff f928 	bl	8004244 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e173      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8005004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x234>
 800500e:	e01b      	b.n	8005048 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCC_OscConfig+0x27c>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005016:	f7ff f915 	bl	8004244 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501c:	e00e      	b.n	800503c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501e:	f7ff f911 	bl	8004244 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d907      	bls.n	800503c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e15c      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
 8005030:	40023800 	.word	0x40023800
 8005034:	42470000 	.word	0x42470000
 8005038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	4b8a      	ldr	r3, [pc, #552]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800503e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ea      	bne.n	800501e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8097 	beq.w	8005184 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505a:	4b83      	ldr	r3, [pc, #524]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	4b7f      	ldr	r3, [pc, #508]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	4a7e      	ldr	r2, [pc, #504]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005074:	6413      	str	r3, [r2, #64]	; 0x40
 8005076:	4b7c      	ldr	r3, [pc, #496]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005086:	4b79      	ldr	r3, [pc, #484]	; (800526c <HAL_RCC_OscConfig+0x4b0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d118      	bne.n	80050c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005092:	4b76      	ldr	r3, [pc, #472]	; (800526c <HAL_RCC_OscConfig+0x4b0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a75      	ldr	r2, [pc, #468]	; (800526c <HAL_RCC_OscConfig+0x4b0>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509e:	f7ff f8d1 	bl	8004244 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7ff f8cd 	bl	8004244 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e118      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	4b6c      	ldr	r3, [pc, #432]	; (800526c <HAL_RCC_OscConfig+0x4b0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x31e>
 80050cc:	4b66      	ldr	r3, [pc, #408]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a65      	ldr	r2, [pc, #404]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
 80050d8:	e01c      	b.n	8005114 <HAL_RCC_OscConfig+0x358>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x340>
 80050e2:	4b61      	ldr	r3, [pc, #388]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a60      	ldr	r2, [pc, #384]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
 80050ee:	4b5e      	ldr	r3, [pc, #376]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	4a5d      	ldr	r2, [pc, #372]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0x358>
 80050fc:	4b5a      	ldr	r3, [pc, #360]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a59      	ldr	r2, [pc, #356]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	4b57      	ldr	r3, [pc, #348]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a56      	ldr	r2, [pc, #344]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800510e:	f023 0304 	bic.w	r3, r3, #4
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7ff f892 	bl	8004244 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005122:	e00a      	b.n	800513a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f7ff f88e 	bl	8004244 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0d7      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ee      	beq.n	8005124 <HAL_RCC_OscConfig+0x368>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7ff f87c 	bl	8004244 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7ff f878 	bl	8004244 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0c1      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ee      	bne.n	8005150 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d105      	bne.n	8005184 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005178:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	4a3a      	ldr	r2, [pc, #232]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800517e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80ad 	beq.w	80052e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800518e:	4b36      	ldr	r3, [pc, #216]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b08      	cmp	r3, #8
 8005198:	d060      	beq.n	800525c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d145      	bne.n	800522e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a2:	4b33      	ldr	r3, [pc, #204]	; (8005270 <HAL_RCC_OscConfig+0x4b4>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7ff f84c 	bl	8004244 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b0:	f7ff f848 	bl	8004244 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e093      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	4b29      	ldr	r3, [pc, #164]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	3b01      	subs	r3, #1
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	071b      	lsls	r3, r3, #28
 80051fa:	491b      	ldr	r1, [pc, #108]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005200:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <HAL_RCC_OscConfig+0x4b4>)
 8005202:	2201      	movs	r2, #1
 8005204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7ff f81d 	bl	8004244 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520e:	f7ff f819 	bl	8004244 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e064      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x452>
 800522c:	e05c      	b.n	80052e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <HAL_RCC_OscConfig+0x4b4>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7ff f806 	bl	8004244 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523c:	f7ff f802 	bl	8004244 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e04d      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x480>
 800525a:	e045      	b.n	80052e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e040      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
 8005268:	40023800 	.word	0x40023800
 800526c:	40007000 	.word	0x40007000
 8005270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005274:	4b1f      	ldr	r3, [pc, #124]	; (80052f4 <HAL_RCC_OscConfig+0x538>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d030      	beq.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d129      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d122      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052a4:	4013      	ands	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d119      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	3b01      	subs	r3, #1
 80052be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d10f      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800

080052f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07b      	b.n	8005402 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531a:	d009      	beq.n	8005330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	61da      	str	r2, [r3, #28]
 8005322:	e005      	b.n	8005330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fe fc2a 	bl	8003ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005366:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	ea42 0103 	orr.w	r1, r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	f003 0104 	and.w	r1, r3, #4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	f003 0210 	and.w	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b088      	sub	sp, #32
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_SPI_Transmit+0x22>
 8005428:	2302      	movs	r3, #2
 800542a:	e126      	b.n	800567a <HAL_SPI_Transmit+0x270>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005434:	f7fe ff06 	bl	8004244 <HAL_GetTick>
 8005438:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800544a:	2302      	movs	r3, #2
 800544c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800544e:	e10b      	b.n	8005668 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <HAL_SPI_Transmit+0x52>
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005460:	e102      	b.n	8005668 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2203      	movs	r2, #3
 8005466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a8:	d10f      	bne.n	80054ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d007      	beq.n	80054e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f0:	d14b      	bne.n	800558a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0xf6>
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d13e      	bne.n	800557e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005524:	e02b      	b.n	800557e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d112      	bne.n	800555a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	86da      	strh	r2, [r3, #54]	; 0x36
 8005558:	e011      	b.n	800557e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800555a:	f7fe fe73 	bl	8004244 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d803      	bhi.n	8005572 <HAL_SPI_Transmit+0x168>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d102      	bne.n	8005578 <HAL_SPI_Transmit+0x16e>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800557c:	e074      	b.n	8005668 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ce      	bne.n	8005526 <HAL_SPI_Transmit+0x11c>
 8005588:	e04c      	b.n	8005624 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0x18e>
 8005592:	8afb      	ldrh	r3, [r7, #22]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d140      	bne.n	800561a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055be:	e02c      	b.n	800561a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d113      	bne.n	80055f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	7812      	ldrb	r2, [r2, #0]
 80055da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80055f4:	e011      	b.n	800561a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f6:	f7fe fe25 	bl	8004244 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d803      	bhi.n	800560e <HAL_SPI_Transmit+0x204>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d102      	bne.n	8005614 <HAL_SPI_Transmit+0x20a>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005618:	e026      	b.n	8005668 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1cd      	bne.n	80055c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fa55 	bl	8005ad8 <SPI_EndRxTxTransaction>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e000      	b.n	8005668 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005666:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005678:	7ffb      	ldrb	r3, [r7, #31]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08c      	sub	sp, #48	; 0x30
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005690:	2301      	movs	r3, #1
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x26>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e18a      	b.n	80059be <HAL_SPI_TransmitReceive+0x33c>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056b0:	f7fe fdc8 	bl	8004244 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d00f      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x70>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d8:	d107      	bne.n	80056ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <HAL_SPI_TransmitReceive+0x68>
 80056e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d003      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
 80056ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056f0:	e15b      	b.n	80059aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_SPI_TransmitReceive+0x82>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_SPI_TransmitReceive+0x82>
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800570a:	e14e      	b.n	80059aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b04      	cmp	r3, #4
 8005716:	d003      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2205      	movs	r2, #5
 800571c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	887a      	ldrh	r2, [r7, #2]
 8005736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	887a      	ldrh	r2, [r7, #2]
 8005742:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	887a      	ldrh	r2, [r7, #2]
 8005748:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d007      	beq.n	8005774 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577c:	d178      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_SPI_TransmitReceive+0x10a>
 8005786:	8b7b      	ldrh	r3, [r7, #26]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d166      	bne.n	800585a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	881a      	ldrh	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	1c9a      	adds	r2, r3, #2
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b0:	e053      	b.n	800585a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d11b      	bne.n	80057f8 <HAL_SPI_TransmitReceive+0x176>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d016      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x176>
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d113      	bne.n	80057f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	881a      	ldrh	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	1c9a      	adds	r2, r3, #2
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d119      	bne.n	800583a <HAL_SPI_TransmitReceive+0x1b8>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d014      	beq.n	800583a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	b292      	uxth	r2, r2
 800581c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	1c9a      	adds	r2, r3, #2
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005836:	2301      	movs	r3, #1
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800583a:	f7fe fd03 	bl	8004244 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005846:	429a      	cmp	r2, r3
 8005848:	d807      	bhi.n	800585a <HAL_SPI_TransmitReceive+0x1d8>
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d003      	beq.n	800585a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005858:	e0a7      	b.n	80059aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1a6      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x130>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1a1      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x130>
 800586e:	e07c      	b.n	800596a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_SPI_TransmitReceive+0x1fc>
 8005878:	8b7b      	ldrh	r3, [r7, #26]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d16b      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a4:	e057      	b.n	8005956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d11c      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x26c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d017      	beq.n	80058ee <HAL_SPI_TransmitReceive+0x26c>
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d114      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	7812      	ldrb	r2, [r2, #0]
 80058d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d119      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x2ae>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d014      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800592c:	2301      	movs	r3, #1
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005930:	f7fe fc88 	bl	8004244 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800593c:	429a      	cmp	r2, r3
 800593e:	d803      	bhi.n	8005948 <HAL_SPI_TransmitReceive+0x2c6>
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d102      	bne.n	800594e <HAL_SPI_TransmitReceive+0x2cc>
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005954:	e029      	b.n	80059aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1a2      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x224>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d19d      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800596a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f8b2 	bl	8005ad8 <SPI_EndRxTxTransaction>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d006      	beq.n	8005988 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005986:	e010      	b.n	80059aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	e000      	b.n	80059aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3730      	adds	r7, #48	; 0x30
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059d8:	f7fe fc34 	bl	8004244 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059e8:	f7fe fc2c 	bl	8004244 <HAL_GetTick>
 80059ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ee:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	0d1b      	lsrs	r3, r3, #20
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	fb02 f303 	mul.w	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059fe:	e054      	b.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d050      	beq.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a08:	f7fe fc1c 	bl	8004244 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d902      	bls.n	8005a1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d13d      	bne.n	8005a9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a36:	d111      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a40:	d004      	beq.n	8005a4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4a:	d107      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a64:	d10f      	bne.n	8005a86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e017      	b.n	8005aca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	bf0c      	ite	eq
 8005aba:	2301      	moveq	r3, #1
 8005abc:	2300      	movne	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d19b      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000018 	.word	0x20000018

08005ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <SPI_EndRxTxTransaction+0x7c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <SPI_EndRxTxTransaction+0x80>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0d5b      	lsrs	r3, r3, #21
 8005af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005af4:	fb02 f303 	mul.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b02:	d112      	bne.n	8005b2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2180      	movs	r1, #128	; 0x80
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff ff5a 	bl	80059c8 <SPI_WaitFlagStateUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e00f      	b.n	8005b4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b40:	2b80      	cmp	r3, #128	; 0x80
 8005b42:	d0f2      	beq.n	8005b2a <SPI_EndRxTxTransaction+0x52>
 8005b44:	e000      	b.n	8005b48 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b46:	bf00      	nop
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000018 	.word	0x20000018
 8005b58:	165e9f81 	.word	0x165e9f81

08005b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e041      	b.n	8005bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fe f9e4 	bl	8003f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f000 fb3c 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e041      	b.n	8005c90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fe f973 	bl	8003f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f000 faed 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <HAL_TIM_PWM_Start+0x24>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	bf14      	ite	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	2300      	moveq	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e022      	b.n	8005d02 <HAL_TIM_PWM_Start+0x6a>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d109      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0x3e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	bf14      	ite	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	2300      	moveq	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	e015      	b.n	8005d02 <HAL_TIM_PWM_Start+0x6a>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d109      	bne.n	8005cf0 <HAL_TIM_PWM_Start+0x58>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	e008      	b.n	8005d02 <HAL_TIM_PWM_Start+0x6a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	bf14      	ite	ne
 8005cfc:	2301      	movne	r3, #1
 8005cfe:	2300      	moveq	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e07c      	b.n	8005e04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Start+0x82>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d18:	e013      	b.n	8005d42 <HAL_TIM_PWM_Start+0xaa>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_PWM_Start+0x92>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	e00b      	b.n	8005d42 <HAL_TIM_PWM_Start+0xaa>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d104      	bne.n	8005d3a <HAL_TIM_PWM_Start+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d38:	e003      	b.n	8005d42 <HAL_TIM_PWM_Start+0xaa>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2201      	movs	r2, #1
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fcb4 	bl	80066b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2d      	ldr	r2, [pc, #180]	; (8005e0c <HAL_TIM_PWM_Start+0x174>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_TIM_PWM_Start+0xcc>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a2c      	ldr	r2, [pc, #176]	; (8005e10 <HAL_TIM_PWM_Start+0x178>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_PWM_Start+0xd0>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <HAL_TIM_PWM_Start+0xd2>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <HAL_TIM_PWM_Start+0x174>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_TIM_PWM_Start+0x136>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d01d      	beq.n	8005dce <HAL_TIM_PWM_Start+0x136>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1f      	ldr	r2, [pc, #124]	; (8005e14 <HAL_TIM_PWM_Start+0x17c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <HAL_TIM_PWM_Start+0x136>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_TIM_PWM_Start+0x180>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_TIM_PWM_Start+0x136>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <HAL_TIM_PWM_Start+0x184>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_TIM_PWM_Start+0x136>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_TIM_PWM_Start+0x178>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_TIM_PWM_Start+0x136>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <HAL_TIM_PWM_Start+0x188>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIM_PWM_Start+0x136>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a16      	ldr	r2, [pc, #88]	; (8005e24 <HAL_TIM_PWM_Start+0x18c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d111      	bne.n	8005df2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d010      	beq.n	8005e02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df0:	e007      	b.n	8005e02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	40010400 	.word	0x40010400
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40001800 	.word	0x40001800

08005e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d122      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0202 	mvn.w	r2, #2
 8005e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f9b6 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9a8 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9b9 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d122      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d11b      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0204 	mvn.w	r2, #4
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f98c 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f97e 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f98f 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d122      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0208 	mvn.w	r2, #8
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2204      	movs	r2, #4
 8005f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f962 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f954 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f965 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b10      	cmp	r3, #16
 8005f38:	d122      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d11b      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0210 	mvn.w	r2, #16
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2208      	movs	r2, #8
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f938 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f92a 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f93b 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d10e      	bne.n	8005fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d107      	bne.n	8005fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0201 	mvn.w	r2, #1
 8005fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f904 	bl	80061b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb6:	2b80      	cmp	r3, #128	; 0x80
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d107      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fc1c 	bl	8006810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d10e      	bne.n	8006004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d107      	bne.n	8006004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f900 	bl	8006204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b20      	cmp	r3, #32
 8006010:	d10e      	bne.n	8006030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b20      	cmp	r3, #32
 800601e:	d107      	bne.n	8006030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0220 	mvn.w	r2, #32
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fbe6 	bl	80067fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800604e:	2302      	movs	r3, #2
 8006050:	e0ac      	b.n	80061ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b0c      	cmp	r3, #12
 800605e:	f200 809f 	bhi.w	80061a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	0800609d 	.word	0x0800609d
 800606c:	080061a1 	.word	0x080061a1
 8006070:	080061a1 	.word	0x080061a1
 8006074:	080061a1 	.word	0x080061a1
 8006078:	080060dd 	.word	0x080060dd
 800607c:	080061a1 	.word	0x080061a1
 8006080:	080061a1 	.word	0x080061a1
 8006084:	080061a1 	.word	0x080061a1
 8006088:	0800611f 	.word	0x0800611f
 800608c:	080061a1 	.word	0x080061a1
 8006090:	080061a1 	.word	0x080061a1
 8006094:	080061a1 	.word	0x080061a1
 8006098:	0800615f 	.word	0x0800615f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f958 	bl	8006358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0204 	bic.w	r2, r2, #4
 80060c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6999      	ldr	r1, [r3, #24]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	619a      	str	r2, [r3, #24]
      break;
 80060da:	e062      	b.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f9a8 	bl	8006438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6999      	ldr	r1, [r3, #24]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	021a      	lsls	r2, r3, #8
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	619a      	str	r2, [r3, #24]
      break;
 800611c:	e041      	b.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 f9fd 	bl	8006524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0208 	orr.w	r2, r2, #8
 8006138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0204 	bic.w	r2, r2, #4
 8006148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69d9      	ldr	r1, [r3, #28]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	61da      	str	r2, [r3, #28]
      break;
 800615c:	e021      	b.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fa51 	bl	800660c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69d9      	ldr	r1, [r3, #28]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	021a      	lsls	r2, r3, #8
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	61da      	str	r2, [r3, #28]
      break;
 800619e:	e000      	b.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80061a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a40      	ldr	r2, [pc, #256]	; (800632c <TIM_Base_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d013      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3d      	ldr	r2, [pc, #244]	; (8006330 <TIM_Base_SetConfig+0x118>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3c      	ldr	r2, [pc, #240]	; (8006334 <TIM_Base_SetConfig+0x11c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3b      	ldr	r2, [pc, #236]	; (8006338 <TIM_Base_SetConfig+0x120>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3a      	ldr	r2, [pc, #232]	; (800633c <TIM_Base_SetConfig+0x124>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d108      	bne.n	800626a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2f      	ldr	r2, [pc, #188]	; (800632c <TIM_Base_SetConfig+0x114>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d02b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d027      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2c      	ldr	r2, [pc, #176]	; (8006330 <TIM_Base_SetConfig+0x118>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d023      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2b      	ldr	r2, [pc, #172]	; (8006334 <TIM_Base_SetConfig+0x11c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01f      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <TIM_Base_SetConfig+0x120>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a29      	ldr	r2, [pc, #164]	; (800633c <TIM_Base_SetConfig+0x124>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d017      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a28      	ldr	r2, [pc, #160]	; (8006340 <TIM_Base_SetConfig+0x128>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a27      	ldr	r2, [pc, #156]	; (8006344 <TIM_Base_SetConfig+0x12c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00f      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <TIM_Base_SetConfig+0x130>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a25      	ldr	r2, [pc, #148]	; (800634c <TIM_Base_SetConfig+0x134>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a24      	ldr	r2, [pc, #144]	; (8006350 <TIM_Base_SetConfig+0x138>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a23      	ldr	r2, [pc, #140]	; (8006354 <TIM_Base_SetConfig+0x13c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d108      	bne.n	80062dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0a      	ldr	r2, [pc, #40]	; (800632c <TIM_Base_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0xf8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a0c      	ldr	r2, [pc, #48]	; (800633c <TIM_Base_SetConfig+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d103      	bne.n	8006318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]
}
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40010000 	.word	0x40010000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40010400 	.word	0x40010400
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800
 800634c:	40001800 	.word	0x40001800
 8006350:	40001c00 	.word	0x40001c00
 8006354:	40002000 	.word	0x40002000

08006358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 0302 	bic.w	r3, r3, #2
 80063a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a20      	ldr	r2, [pc, #128]	; (8006430 <TIM_OC1_SetConfig+0xd8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_OC1_SetConfig+0x64>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a1f      	ldr	r2, [pc, #124]	; (8006434 <TIM_OC1_SetConfig+0xdc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10c      	bne.n	80063d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0308 	bic.w	r3, r3, #8
 80063c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 0304 	bic.w	r3, r3, #4
 80063d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a15      	ldr	r2, [pc, #84]	; (8006430 <TIM_OC1_SetConfig+0xd8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_OC1_SetConfig+0x8e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a14      	ldr	r2, [pc, #80]	; (8006434 <TIM_OC1_SetConfig+0xdc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d111      	bne.n	800640a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	621a      	str	r2, [r3, #32]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	40010000 	.word	0x40010000
 8006434:	40010400 	.word	0x40010400

08006438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f023 0210 	bic.w	r2, r3, #16
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0320 	bic.w	r3, r3, #32
 8006482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a22      	ldr	r2, [pc, #136]	; (800651c <TIM_OC2_SetConfig+0xe4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_OC2_SetConfig+0x68>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a21      	ldr	r2, [pc, #132]	; (8006520 <TIM_OC2_SetConfig+0xe8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10d      	bne.n	80064bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a17      	ldr	r2, [pc, #92]	; (800651c <TIM_OC2_SetConfig+0xe4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0x94>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a16      	ldr	r2, [pc, #88]	; (8006520 <TIM_OC2_SetConfig+0xe8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d113      	bne.n	80064f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40010000 	.word	0x40010000
 8006520:	40010400 	.word	0x40010400

08006524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800656c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a21      	ldr	r2, [pc, #132]	; (8006604 <TIM_OC3_SetConfig+0xe0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_OC3_SetConfig+0x66>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a20      	ldr	r2, [pc, #128]	; (8006608 <TIM_OC3_SetConfig+0xe4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d10d      	bne.n	80065a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a16      	ldr	r2, [pc, #88]	; (8006604 <TIM_OC3_SetConfig+0xe0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_OC3_SetConfig+0x92>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a15      	ldr	r2, [pc, #84]	; (8006608 <TIM_OC3_SetConfig+0xe4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d113      	bne.n	80065de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	621a      	str	r2, [r3, #32]
}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400

0800660c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	031b      	lsls	r3, r3, #12
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <TIM_OC4_SetConfig+0xa4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC4_SetConfig+0x68>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <TIM_OC4_SetConfig+0xa8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d109      	bne.n	8006688 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800667a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	019b      	lsls	r3, r3, #6
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40010400 	.word	0x40010400

080066b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	2201      	movs	r2, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	43db      	mvns	r3, r3
 80066da:	401a      	ands	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	fa01 f303 	lsl.w	r3, r1, r3
 80066f0:	431a      	orrs	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006718:	2302      	movs	r3, #2
 800671a:	e05a      	b.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d022      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d01d      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d018      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1b      	ldr	r2, [pc, #108]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10c      	bne.n	80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40000400 	.word	0x40000400
 80067e8:	40000800 	.word	0x40000800
 80067ec:	40000c00 	.word	0x40000c00
 80067f0:	40010400 	.word	0x40010400
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40001800 	.word	0x40001800

080067fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e03f      	b.n	80068b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fd fc22 	bl	8004094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f829 	bl	80068c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800687c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695a      	ldr	r2, [r3, #20]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800688c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800689c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	b09f      	sub	sp, #124	; 0x7c
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d6:	68d9      	ldr	r1, [r3, #12]
 80068d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	ea40 0301 	orr.w	r3, r0, r1
 80068e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006904:	f021 010c 	bic.w	r1, r1, #12
 8006908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800690e:	430b      	orrs	r3, r1
 8006910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800691c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691e:	6999      	ldr	r1, [r3, #24]
 8006920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	ea40 0301 	orr.w	r3, r0, r1
 8006928:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4bc5      	ldr	r3, [pc, #788]	; (8006c44 <UART_SetConfig+0x384>)
 8006930:	429a      	cmp	r2, r3
 8006932:	d004      	beq.n	800693e <UART_SetConfig+0x7e>
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4bc3      	ldr	r3, [pc, #780]	; (8006c48 <UART_SetConfig+0x388>)
 800693a:	429a      	cmp	r2, r3
 800693c:	d103      	bne.n	8006946 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800693e:	f7fe f877 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8006942:	6778      	str	r0, [r7, #116]	; 0x74
 8006944:	e002      	b.n	800694c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006946:	f7fe f85f 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 800694a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800694c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006954:	f040 80b6 	bne.w	8006ac4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800695a:	461c      	mov	r4, r3
 800695c:	f04f 0500 	mov.w	r5, #0
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	1891      	adds	r1, r2, r2
 8006966:	6439      	str	r1, [r7, #64]	; 0x40
 8006968:	415b      	adcs	r3, r3
 800696a:	647b      	str	r3, [r7, #68]	; 0x44
 800696c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006970:	1912      	adds	r2, r2, r4
 8006972:	eb45 0303 	adc.w	r3, r5, r3
 8006976:	f04f 0000 	mov.w	r0, #0
 800697a:	f04f 0100 	mov.w	r1, #0
 800697e:	00d9      	lsls	r1, r3, #3
 8006980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006984:	00d0      	lsls	r0, r2, #3
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	1911      	adds	r1, r2, r4
 800698c:	6639      	str	r1, [r7, #96]	; 0x60
 800698e:	416b      	adcs	r3, r5
 8006990:	667b      	str	r3, [r7, #100]	; 0x64
 8006992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	1891      	adds	r1, r2, r2
 800699e:	63b9      	str	r1, [r7, #56]	; 0x38
 80069a0:	415b      	adcs	r3, r3
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069ac:	f7f9 fc32 	bl	8000214 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4ba5      	ldr	r3, [pc, #660]	; (8006c4c <UART_SetConfig+0x38c>)
 80069b6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	011e      	lsls	r6, r3, #4
 80069be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c0:	461c      	mov	r4, r3
 80069c2:	f04f 0500 	mov.w	r5, #0
 80069c6:	4622      	mov	r2, r4
 80069c8:	462b      	mov	r3, r5
 80069ca:	1891      	adds	r1, r2, r2
 80069cc:	6339      	str	r1, [r7, #48]	; 0x30
 80069ce:	415b      	adcs	r3, r3
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069d6:	1912      	adds	r2, r2, r4
 80069d8:	eb45 0303 	adc.w	r3, r5, r3
 80069dc:	f04f 0000 	mov.w	r0, #0
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	00d9      	lsls	r1, r3, #3
 80069e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069ea:	00d0      	lsls	r0, r2, #3
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	1911      	adds	r1, r2, r4
 80069f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80069f4:	416b      	adcs	r3, r5
 80069f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	461a      	mov	r2, r3
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	1891      	adds	r1, r2, r2
 8006a04:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a06:	415b      	adcs	r3, r3
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a12:	f7f9 fbff 	bl	8000214 <__aeabi_uldivmod>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4b8c      	ldr	r3, [pc, #560]	; (8006c4c <UART_SetConfig+0x38c>)
 8006a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	2164      	movs	r1, #100	; 0x64
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	3332      	adds	r3, #50	; 0x32
 8006a2e:	4a87      	ldr	r2, [pc, #540]	; (8006c4c <UART_SetConfig+0x38c>)
 8006a30:	fba2 2303 	umull	r2, r3, r2, r3
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a3c:	441e      	add	r6, r3
 8006a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a40:	4618      	mov	r0, r3
 8006a42:	f04f 0100 	mov.w	r1, #0
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	1894      	adds	r4, r2, r2
 8006a4c:	623c      	str	r4, [r7, #32]
 8006a4e:	415b      	adcs	r3, r3
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a56:	1812      	adds	r2, r2, r0
 8006a58:	eb41 0303 	adc.w	r3, r1, r3
 8006a5c:	f04f 0400 	mov.w	r4, #0
 8006a60:	f04f 0500 	mov.w	r5, #0
 8006a64:	00dd      	lsls	r5, r3, #3
 8006a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a6a:	00d4      	lsls	r4, r2, #3
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	1814      	adds	r4, r2, r0
 8006a72:	653c      	str	r4, [r7, #80]	; 0x50
 8006a74:	414b      	adcs	r3, r1
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
 8006a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	1891      	adds	r1, r2, r2
 8006a84:	61b9      	str	r1, [r7, #24]
 8006a86:	415b      	adcs	r3, r3
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a92:	f7f9 fbbf 	bl	8000214 <__aeabi_uldivmod>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4b6c      	ldr	r3, [pc, #432]	; (8006c4c <UART_SetConfig+0x38c>)
 8006a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	2164      	movs	r1, #100	; 0x64
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	3332      	adds	r3, #50	; 0x32
 8006aae:	4a67      	ldr	r2, [pc, #412]	; (8006c4c <UART_SetConfig+0x38c>)
 8006ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	f003 0207 	and.w	r2, r3, #7
 8006aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4432      	add	r2, r6
 8006ac0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ac2:	e0b9      	b.n	8006c38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac6:	461c      	mov	r4, r3
 8006ac8:	f04f 0500 	mov.w	r5, #0
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	1891      	adds	r1, r2, r2
 8006ad2:	6139      	str	r1, [r7, #16]
 8006ad4:	415b      	adcs	r3, r3
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006adc:	1912      	adds	r2, r2, r4
 8006ade:	eb45 0303 	adc.w	r3, r5, r3
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	00d9      	lsls	r1, r3, #3
 8006aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006af0:	00d0      	lsls	r0, r2, #3
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	eb12 0804 	adds.w	r8, r2, r4
 8006afa:	eb43 0905 	adc.w	r9, r3, r5
 8006afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f04f 0100 	mov.w	r1, #0
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	008b      	lsls	r3, r1, #2
 8006b12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b16:	0082      	lsls	r2, r0, #2
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	f7f9 fb7a 	bl	8000214 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4b49      	ldr	r3, [pc, #292]	; (8006c4c <UART_SetConfig+0x38c>)
 8006b26:	fba3 2302 	umull	r2, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	011e      	lsls	r6, r3, #4
 8006b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b30:	4618      	mov	r0, r3
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	1894      	adds	r4, r2, r2
 8006b3c:	60bc      	str	r4, [r7, #8]
 8006b3e:	415b      	adcs	r3, r3
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b46:	1812      	adds	r2, r2, r0
 8006b48:	eb41 0303 	adc.w	r3, r1, r3
 8006b4c:	f04f 0400 	mov.w	r4, #0
 8006b50:	f04f 0500 	mov.w	r5, #0
 8006b54:	00dd      	lsls	r5, r3, #3
 8006b56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b5a:	00d4      	lsls	r4, r2, #3
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	462b      	mov	r3, r5
 8006b60:	1814      	adds	r4, r2, r0
 8006b62:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b64:	414b      	adcs	r3, r1
 8006b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f04f 0100 	mov.w	r1, #0
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	008b      	lsls	r3, r1, #2
 8006b7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b80:	0082      	lsls	r2, r0, #2
 8006b82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b86:	f7f9 fb45 	bl	8000214 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	; (8006c4c <UART_SetConfig+0x38c>)
 8006b90:	fba3 1302 	umull	r1, r3, r3, r2
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	2164      	movs	r1, #100	; 0x64
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	3332      	adds	r3, #50	; 0x32
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <UART_SetConfig+0x38c>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bae:	441e      	add	r6, r3
 8006bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	1894      	adds	r4, r2, r2
 8006bbe:	603c      	str	r4, [r7, #0]
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc8:	1812      	adds	r2, r2, r0
 8006bca:	eb41 0303 	adc.w	r3, r1, r3
 8006bce:	f04f 0400 	mov.w	r4, #0
 8006bd2:	f04f 0500 	mov.w	r5, #0
 8006bd6:	00dd      	lsls	r5, r3, #3
 8006bd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bdc:	00d4      	lsls	r4, r2, #3
 8006bde:	4622      	mov	r2, r4
 8006be0:	462b      	mov	r3, r5
 8006be2:	eb12 0a00 	adds.w	sl, r2, r0
 8006be6:	eb43 0b01 	adc.w	fp, r3, r1
 8006bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	008b      	lsls	r3, r1, #2
 8006bfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c02:	0082      	lsls	r2, r0, #2
 8006c04:	4650      	mov	r0, sl
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7f9 fb04 	bl	8000214 <__aeabi_uldivmod>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <UART_SetConfig+0x38c>)
 8006c12:	fba3 1302 	umull	r1, r3, r3, r2
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	2164      	movs	r1, #100	; 0x64
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	3332      	adds	r3, #50	; 0x32
 8006c24:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <UART_SetConfig+0x38c>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f003 020f 	and.w	r2, r3, #15
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4432      	add	r2, r6
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	377c      	adds	r7, #124	; 0x7c
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c42:	bf00      	nop
 8006c44:	40011000 	.word	0x40011000
 8006c48:	40011400 	.word	0x40011400
 8006c4c:	51eb851f 	.word	0x51eb851f

08006c50 <_ZdlPv>:
 8006c50:	f000 b97c 	b.w	8006f4c <free>

08006c54 <_ZdlPvj>:
 8006c54:	f7ff bffc 	b.w	8006c50 <_ZdlPv>

08006c58 <_Znwj>:
 8006c58:	2801      	cmp	r0, #1
 8006c5a:	bf38      	it	cc
 8006c5c:	2001      	movcc	r0, #1
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	4604      	mov	r4, r0
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 f96a 	bl	8006f3c <malloc>
 8006c68:	b930      	cbnz	r0, 8006c78 <_Znwj+0x20>
 8006c6a:	f000 f92d 	bl	8006ec8 <_ZSt15get_new_handlerv>
 8006c6e:	b908      	cbnz	r0, 8006c74 <_Znwj+0x1c>
 8006c70:	f000 f932 	bl	8006ed8 <abort>
 8006c74:	4780      	blx	r0
 8006c76:	e7f4      	b.n	8006c62 <_Znwj+0xa>
 8006c78:	bd10      	pop	{r4, pc}

08006c7a <__cxa_pure_virtual>:
 8006c7a:	b508      	push	{r3, lr}
 8006c7c:	f000 f91e 	bl	8006ebc <_ZSt9terminatev>

08006c80 <_ZNSaIcEC1Ev>:
 8006c80:	4770      	bx	lr

08006c82 <_ZNSaIcED1Ev>:
 8006c82:	4770      	bx	lr

08006c84 <_ZSt17__throw_bad_allocv>:
 8006c84:	b508      	push	{r3, lr}
 8006c86:	f000 f927 	bl	8006ed8 <abort>

08006c8a <_ZSt19__throw_logic_errorPKc>:
 8006c8a:	b508      	push	{r3, lr}
 8006c8c:	f000 f924 	bl	8006ed8 <abort>

08006c90 <_ZSt20__throw_length_errorPKc>:
 8006c90:	b508      	push	{r3, lr}
 8006c92:	f000 f921 	bl	8006ed8 <abort>

08006c96 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8006c96:	b10a      	cbz	r2, 8006c9c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8006c98:	f000 b960 	b.w	8006f5c <memcpy>
 8006c9c:	4770      	bx	lr
	...

08006ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006ca0:	b508      	push	{r3, lr}
 8006ca2:	680b      	ldr	r3, [r1, #0]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d302      	bcc.n	8006cb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006caa:	480d      	ldr	r0, [pc, #52]	; (8006ce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006cac:	f7ff fff0 	bl	8006c90 <_ZSt20__throw_length_errorPKc>
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d90b      	bls.n	8006ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006cb4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006cb8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006cbc:	d206      	bcs.n	8006ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006cbe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006cc2:	bf2a      	itet	cs
 8006cc4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8006cc8:	6008      	strcc	r0, [r1, #0]
 8006cca:	600b      	strcs	r3, [r1, #0]
 8006ccc:	6808      	ldr	r0, [r1, #0]
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d501      	bpl.n	8006cd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006cd2:	f7ff ffd7 	bl	8006c84 <_ZSt17__throw_bad_allocv>
 8006cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006cda:	f7ff bfbd 	b.w	8006c58 <_Znwj>
 8006cde:	bf00      	nop
 8006ce0:	0800a964 	.word	0x0800a964

08006ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006ce4:	f850 3b08 	ldr.w	r3, [r0], #8
 8006ce8:	4283      	cmp	r3, r0
 8006cea:	d002      	beq.n	8006cf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff bfaf 	b.w	8006c50 <_ZdlPv>
 8006cf2:	4770      	bx	lr

08006cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006cf4:	2a01      	cmp	r2, #1
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	d102      	bne.n	8006d00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8006cfa:	780a      	ldrb	r2, [r1, #0]
 8006cfc:	7002      	strb	r2, [r0, #0]
 8006cfe:	bd10      	pop	{r4, pc}
 8006d00:	f7ff ffc9 	bl	8006c96 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8006d04:	e7fb      	b.n	8006cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08006d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8006d06:	b508      	push	{r3, lr}
 8006d08:	1a52      	subs	r2, r2, r1
 8006d0a:	f7ff fff3 	bl	8006cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006d0e:	bd08      	pop	{r3, pc}

08006d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8006d10:	b508      	push	{r3, lr}
 8006d12:	1a52      	subs	r2, r2, r1
 8006d14:	f7ff ffee 	bl	8006cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006d18:	bd08      	pop	{r3, pc}

08006d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8006d1a:	4288      	cmp	r0, r1
 8006d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d1e:	4604      	mov	r4, r0
 8006d20:	460e      	mov	r6, r1
 8006d22:	d01e      	beq.n	8006d62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8006d24:	4603      	mov	r3, r0
 8006d26:	684d      	ldr	r5, [r1, #4]
 8006d28:	f853 2b08 	ldr.w	r2, [r3], #8
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	bf14      	ite	ne
 8006d30:	6882      	ldrne	r2, [r0, #8]
 8006d32:	220f      	moveq	r2, #15
 8006d34:	42aa      	cmp	r2, r5
 8006d36:	d20a      	bcs.n	8006d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8006d38:	a901      	add	r1, sp, #4
 8006d3a:	9501      	str	r5, [sp, #4]
 8006d3c:	f7ff ffb0 	bl	8006ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006d40:	4607      	mov	r7, r0
 8006d42:	4620      	mov	r0, r4
 8006d44:	f7ff ffce 	bl	8006ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006d48:	9b01      	ldr	r3, [sp, #4]
 8006d4a:	6027      	str	r7, [r4, #0]
 8006d4c:	60a3      	str	r3, [r4, #8]
 8006d4e:	b125      	cbz	r5, 8006d5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8006d50:	6831      	ldr	r1, [r6, #0]
 8006d52:	6820      	ldr	r0, [r4, #0]
 8006d54:	462a      	mov	r2, r5
 8006d56:	f7ff ffcd 	bl	8006cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	6065      	str	r5, [r4, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	555a      	strb	r2, [r3, r5]
 8006d62:	b003      	add	sp, #12
 8006d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006d66:	f100 0208 	add.w	r2, r0, #8
 8006d6a:	6002      	str	r2, [r0, #0]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	6042      	str	r2, [r0, #4]
 8006d70:	7202      	strb	r2, [r0, #8]
 8006d72:	4770      	bx	lr

08006d74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4604      	mov	r4, r0
 8006d78:	460e      	mov	r6, r1
 8006d7a:	3008      	adds	r0, #8
 8006d7c:	6020      	str	r0, [r4, #0]
 8006d7e:	f856 3b08 	ldr.w	r3, [r6], #8
 8006d82:	429e      	cmp	r6, r3
 8006d84:	460d      	mov	r5, r1
 8006d86:	d10b      	bne.n	8006da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8006d88:	2210      	movs	r2, #16
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	f7ff ff83 	bl	8006c96 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8006d90:	686b      	ldr	r3, [r5, #4]
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	2300      	movs	r3, #0
 8006d96:	602e      	str	r6, [r5, #0]
 8006d98:	606b      	str	r3, [r5, #4]
 8006d9a:	722b      	strb	r3, [r5, #8]
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	688b      	ldr	r3, [r1, #8]
 8006da4:	60a3      	str	r3, [r4, #8]
 8006da6:	e7f3      	b.n	8006d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08006da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4604      	mov	r4, r0
 8006dac:	f7ff ff9a 	bl	8006ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006db0:	4620      	mov	r0, r4
 8006db2:	bd10      	pop	{r4, pc}

08006db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4604      	mov	r4, r0
 8006db8:	f7ff ffaf 	bl	8006d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8006dc0:	6840      	ldr	r0, [r0, #4]
 8006dc2:	4770      	bx	lr

08006dc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8006dc4:	6800      	ldr	r0, [r0, #0]
 8006dc6:	4770      	bx	lr

08006dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8006dc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4616      	mov	r6, r2
 8006dce:	460d      	mov	r5, r1
 8006dd0:	b919      	cbnz	r1, 8006dda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8006dd2:	b112      	cbz	r2, 8006dda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8006dd4:	480d      	ldr	r0, [pc, #52]	; (8006e0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8006dd6:	f7ff ff58 	bl	8006c8a <_ZSt19__throw_logic_errorPKc>
 8006dda:	1b73      	subs	r3, r6, r5
 8006ddc:	2b0f      	cmp	r3, #15
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	d907      	bls.n	8006df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8006de2:	2200      	movs	r2, #0
 8006de4:	a901      	add	r1, sp, #4
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff ff5a 	bl	8006ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	6020      	str	r0, [r4, #0]
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	4632      	mov	r2, r6
 8006df4:	4629      	mov	r1, r5
 8006df6:	6820      	ldr	r0, [r4, #0]
 8006df8:	f7ff ff85 	bl	8006d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8006dfc:	9b01      	ldr	r3, [sp, #4]
 8006dfe:	6822      	ldr	r2, [r4, #0]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	2100      	movs	r1, #0
 8006e04:	54d1      	strb	r1, [r2, r3]
 8006e06:	b002      	add	sp, #8
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	bf00      	nop
 8006e0c:	0800a97c 	.word	0x0800a97c

08006e10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	f100 0308 	add.w	r3, r0, #8
 8006e16:	6003      	str	r3, [r0, #0]
 8006e18:	e9d1 5200 	ldrd	r5, r2, [r1]
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	442a      	add	r2, r5
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7ff ffcf 	bl	8006dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	4616      	mov	r6, r2
 8006e36:	460d      	mov	r5, r1
 8006e38:	b919      	cbnz	r1, 8006e42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006e3a:	b112      	cbz	r2, 8006e42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006e3c:	480d      	ldr	r0, [pc, #52]	; (8006e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8006e3e:	f7ff ff24 	bl	8006c8a <_ZSt19__throw_logic_errorPKc>
 8006e42:	1b73      	subs	r3, r6, r5
 8006e44:	2b0f      	cmp	r3, #15
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	d907      	bls.n	8006e5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	a901      	add	r1, sp, #4
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff ff26 	bl	8006ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006e54:	9b01      	ldr	r3, [sp, #4]
 8006e56:	6020      	str	r0, [r4, #0]
 8006e58:	60a3      	str	r3, [r4, #8]
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	f7ff ff56 	bl	8006d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	54d1      	strb	r1, [r2, r3]
 8006e6e:	b002      	add	sp, #8
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	bf00      	nop
 8006e74:	0800a97c 	.word	0x0800a97c

08006e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	f100 0308 	add.w	r3, r0, #8
 8006e7e:	4604      	mov	r4, r0
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	460d      	mov	r5, r1
 8006e84:	b159      	cbz	r1, 8006e9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8006e86:	4608      	mov	r0, r1
 8006e88:	f7f9 f9bc 	bl	8000204 <strlen>
 8006e8c:	182a      	adds	r2, r5, r0
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7ff ffcb 	bl	8006e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	bd38      	pop	{r3, r4, r5, pc}
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea2:	e7f4      	b.n	8006e8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08006ea4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006ea4:	b508      	push	{r3, lr}
 8006ea6:	4780      	blx	r0
 8006ea8:	f000 f816 	bl	8006ed8 <abort>

08006eac <_ZSt13get_terminatev>:
 8006eac:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <_ZSt13get_terminatev+0xc>)
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	f3bf 8f5b 	dmb	ish
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000024 	.word	0x20000024

08006ebc <_ZSt9terminatev>:
 8006ebc:	b508      	push	{r3, lr}
 8006ebe:	f7ff fff5 	bl	8006eac <_ZSt13get_terminatev>
 8006ec2:	f7ff ffef 	bl	8006ea4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006ec8 <_ZSt15get_new_handlerv>:
 8006ec8:	4b02      	ldr	r3, [pc, #8]	; (8006ed4 <_ZSt15get_new_handlerv+0xc>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	f3bf 8f5b 	dmb	ish
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	200000cc 	.word	0x200000cc

08006ed8 <abort>:
 8006ed8:	b508      	push	{r3, lr}
 8006eda:	2006      	movs	r0, #6
 8006edc:	f000 f936 	bl	800714c <raise>
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7fc ff1b 	bl	8003d1c <_exit>
	...

08006ee8 <__errno>:
 8006ee8:	4b01      	ldr	r3, [pc, #4]	; (8006ef0 <__errno+0x8>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000028 	.word	0x20000028

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	; (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	; (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	; (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	; (8006f38 <__libc_init_array+0x44>)
 8006f08:	f000 f94a 	bl	80071a0 <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	0800a9b0 	.word	0x0800a9b0
 8006f30:	0800a9b0 	.word	0x0800a9b0
 8006f34:	0800a9b0 	.word	0x0800a9b0
 8006f38:	0800a9b4 	.word	0x0800a9b4

08006f3c <malloc>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <malloc+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f000 b871 	b.w	8007028 <_malloc_r>
 8006f46:	bf00      	nop
 8006f48:	20000028 	.word	0x20000028

08006f4c <free>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <free+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f000 b819 	b.w	8006f88 <_free_r>
 8006f56:	bf00      	nop
 8006f58:	20000028 	.word	0x20000028

08006f5c <memcpy>:
 8006f5c:	440a      	add	r2, r1
 8006f5e:	4291      	cmp	r1, r2
 8006f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f64:	d100      	bne.n	8006f68 <memcpy+0xc>
 8006f66:	4770      	bx	lr
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f72:	4291      	cmp	r1, r2
 8006f74:	d1f9      	bne.n	8006f6a <memcpy+0xe>
 8006f76:	bd10      	pop	{r4, pc}

08006f78 <memset>:
 8006f78:	4402      	add	r2, r0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d100      	bne.n	8006f82 <memset+0xa>
 8006f80:	4770      	bx	lr
 8006f82:	f803 1b01 	strb.w	r1, [r3], #1
 8006f86:	e7f9      	b.n	8006f7c <memset+0x4>

08006f88 <_free_r>:
 8006f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d048      	beq.n	8007020 <_free_r+0x98>
 8006f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f92:	9001      	str	r0, [sp, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f1a1 0404 	sub.w	r4, r1, #4
 8006f9a:	bfb8      	it	lt
 8006f9c:	18e4      	addlt	r4, r4, r3
 8006f9e:	f000 f8f1 	bl	8007184 <__malloc_lock>
 8006fa2:	4a20      	ldr	r2, [pc, #128]	; (8007024 <_free_r+0x9c>)
 8006fa4:	9801      	ldr	r0, [sp, #4]
 8006fa6:	6813      	ldr	r3, [r2, #0]
 8006fa8:	4615      	mov	r5, r2
 8006faa:	b933      	cbnz	r3, 8006fba <_free_r+0x32>
 8006fac:	6063      	str	r3, [r4, #4]
 8006fae:	6014      	str	r4, [r2, #0]
 8006fb0:	b003      	add	sp, #12
 8006fb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fb6:	f000 b8eb 	b.w	8007190 <__malloc_unlock>
 8006fba:	42a3      	cmp	r3, r4
 8006fbc:	d90b      	bls.n	8006fd6 <_free_r+0x4e>
 8006fbe:	6821      	ldr	r1, [r4, #0]
 8006fc0:	1862      	adds	r2, r4, r1
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bf04      	itt	eq
 8006fc6:	681a      	ldreq	r2, [r3, #0]
 8006fc8:	685b      	ldreq	r3, [r3, #4]
 8006fca:	6063      	str	r3, [r4, #4]
 8006fcc:	bf04      	itt	eq
 8006fce:	1852      	addeq	r2, r2, r1
 8006fd0:	6022      	streq	r2, [r4, #0]
 8006fd2:	602c      	str	r4, [r5, #0]
 8006fd4:	e7ec      	b.n	8006fb0 <_free_r+0x28>
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b10b      	cbz	r3, 8006fe0 <_free_r+0x58>
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d9fa      	bls.n	8006fd6 <_free_r+0x4e>
 8006fe0:	6811      	ldr	r1, [r2, #0]
 8006fe2:	1855      	adds	r5, r2, r1
 8006fe4:	42a5      	cmp	r5, r4
 8006fe6:	d10b      	bne.n	8007000 <_free_r+0x78>
 8006fe8:	6824      	ldr	r4, [r4, #0]
 8006fea:	4421      	add	r1, r4
 8006fec:	1854      	adds	r4, r2, r1
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	d1dd      	bne.n	8006fb0 <_free_r+0x28>
 8006ff4:	681c      	ldr	r4, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	6053      	str	r3, [r2, #4]
 8006ffa:	4421      	add	r1, r4
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	e7d7      	b.n	8006fb0 <_free_r+0x28>
 8007000:	d902      	bls.n	8007008 <_free_r+0x80>
 8007002:	230c      	movs	r3, #12
 8007004:	6003      	str	r3, [r0, #0]
 8007006:	e7d3      	b.n	8006fb0 <_free_r+0x28>
 8007008:	6825      	ldr	r5, [r4, #0]
 800700a:	1961      	adds	r1, r4, r5
 800700c:	428b      	cmp	r3, r1
 800700e:	bf04      	itt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	bf04      	itt	eq
 8007018:	1949      	addeq	r1, r1, r5
 800701a:	6021      	streq	r1, [r4, #0]
 800701c:	6054      	str	r4, [r2, #4]
 800701e:	e7c7      	b.n	8006fb0 <_free_r+0x28>
 8007020:	b003      	add	sp, #12
 8007022:	bd30      	pop	{r4, r5, pc}
 8007024:	200000d0 	.word	0x200000d0

08007028 <_malloc_r>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	1ccd      	adds	r5, r1, #3
 800702c:	f025 0503 	bic.w	r5, r5, #3
 8007030:	3508      	adds	r5, #8
 8007032:	2d0c      	cmp	r5, #12
 8007034:	bf38      	it	cc
 8007036:	250c      	movcc	r5, #12
 8007038:	2d00      	cmp	r5, #0
 800703a:	4606      	mov	r6, r0
 800703c:	db01      	blt.n	8007042 <_malloc_r+0x1a>
 800703e:	42a9      	cmp	r1, r5
 8007040:	d903      	bls.n	800704a <_malloc_r+0x22>
 8007042:	230c      	movs	r3, #12
 8007044:	6033      	str	r3, [r6, #0]
 8007046:	2000      	movs	r0, #0
 8007048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704a:	f000 f89b 	bl	8007184 <__malloc_lock>
 800704e:	4921      	ldr	r1, [pc, #132]	; (80070d4 <_malloc_r+0xac>)
 8007050:	680a      	ldr	r2, [r1, #0]
 8007052:	4614      	mov	r4, r2
 8007054:	b99c      	cbnz	r4, 800707e <_malloc_r+0x56>
 8007056:	4f20      	ldr	r7, [pc, #128]	; (80070d8 <_malloc_r+0xb0>)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	b923      	cbnz	r3, 8007066 <_malloc_r+0x3e>
 800705c:	4621      	mov	r1, r4
 800705e:	4630      	mov	r0, r6
 8007060:	f000 f83c 	bl	80070dc <_sbrk_r>
 8007064:	6038      	str	r0, [r7, #0]
 8007066:	4629      	mov	r1, r5
 8007068:	4630      	mov	r0, r6
 800706a:	f000 f837 	bl	80070dc <_sbrk_r>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	d123      	bne.n	80070ba <_malloc_r+0x92>
 8007072:	230c      	movs	r3, #12
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	4630      	mov	r0, r6
 8007078:	f000 f88a 	bl	8007190 <__malloc_unlock>
 800707c:	e7e3      	b.n	8007046 <_malloc_r+0x1e>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	1b5b      	subs	r3, r3, r5
 8007082:	d417      	bmi.n	80070b4 <_malloc_r+0x8c>
 8007084:	2b0b      	cmp	r3, #11
 8007086:	d903      	bls.n	8007090 <_malloc_r+0x68>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	441c      	add	r4, r3
 800708c:	6025      	str	r5, [r4, #0]
 800708e:	e004      	b.n	800709a <_malloc_r+0x72>
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	42a2      	cmp	r2, r4
 8007094:	bf0c      	ite	eq
 8007096:	600b      	streq	r3, [r1, #0]
 8007098:	6053      	strne	r3, [r2, #4]
 800709a:	4630      	mov	r0, r6
 800709c:	f000 f878 	bl	8007190 <__malloc_unlock>
 80070a0:	f104 000b 	add.w	r0, r4, #11
 80070a4:	1d23      	adds	r3, r4, #4
 80070a6:	f020 0007 	bic.w	r0, r0, #7
 80070aa:	1ac2      	subs	r2, r0, r3
 80070ac:	d0cc      	beq.n	8007048 <_malloc_r+0x20>
 80070ae:	1a1b      	subs	r3, r3, r0
 80070b0:	50a3      	str	r3, [r4, r2]
 80070b2:	e7c9      	b.n	8007048 <_malloc_r+0x20>
 80070b4:	4622      	mov	r2, r4
 80070b6:	6864      	ldr	r4, [r4, #4]
 80070b8:	e7cc      	b.n	8007054 <_malloc_r+0x2c>
 80070ba:	1cc4      	adds	r4, r0, #3
 80070bc:	f024 0403 	bic.w	r4, r4, #3
 80070c0:	42a0      	cmp	r0, r4
 80070c2:	d0e3      	beq.n	800708c <_malloc_r+0x64>
 80070c4:	1a21      	subs	r1, r4, r0
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 f808 	bl	80070dc <_sbrk_r>
 80070cc:	3001      	adds	r0, #1
 80070ce:	d1dd      	bne.n	800708c <_malloc_r+0x64>
 80070d0:	e7cf      	b.n	8007072 <_malloc_r+0x4a>
 80070d2:	bf00      	nop
 80070d4:	200000d0 	.word	0x200000d0
 80070d8:	200000d4 	.word	0x200000d4

080070dc <_sbrk_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d06      	ldr	r5, [pc, #24]	; (80070f8 <_sbrk_r+0x1c>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7fc fe22 	bl	8003d30 <_sbrk>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_sbrk_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_sbrk_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	2000025c 	.word	0x2000025c

080070fc <_raise_r>:
 80070fc:	291f      	cmp	r1, #31
 80070fe:	b538      	push	{r3, r4, r5, lr}
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	d904      	bls.n	8007110 <_raise_r+0x14>
 8007106:	2316      	movs	r3, #22
 8007108:	6003      	str	r3, [r0, #0]
 800710a:	f04f 30ff 	mov.w	r0, #4294967295
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007112:	b112      	cbz	r2, 800711a <_raise_r+0x1e>
 8007114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007118:	b94b      	cbnz	r3, 800712e <_raise_r+0x32>
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f830 	bl	8007180 <_getpid_r>
 8007120:	462a      	mov	r2, r5
 8007122:	4601      	mov	r1, r0
 8007124:	4620      	mov	r0, r4
 8007126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800712a:	f000 b817 	b.w	800715c <_kill_r>
 800712e:	2b01      	cmp	r3, #1
 8007130:	d00a      	beq.n	8007148 <_raise_r+0x4c>
 8007132:	1c59      	adds	r1, r3, #1
 8007134:	d103      	bne.n	800713e <_raise_r+0x42>
 8007136:	2316      	movs	r3, #22
 8007138:	6003      	str	r3, [r0, #0]
 800713a:	2001      	movs	r0, #1
 800713c:	e7e7      	b.n	800710e <_raise_r+0x12>
 800713e:	2400      	movs	r4, #0
 8007140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007144:	4628      	mov	r0, r5
 8007146:	4798      	blx	r3
 8007148:	2000      	movs	r0, #0
 800714a:	e7e0      	b.n	800710e <_raise_r+0x12>

0800714c <raise>:
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <raise+0xc>)
 800714e:	4601      	mov	r1, r0
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f7ff bfd3 	b.w	80070fc <_raise_r>
 8007156:	bf00      	nop
 8007158:	20000028 	.word	0x20000028

0800715c <_kill_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	; (800717c <_kill_r+0x20>)
 8007160:	2300      	movs	r3, #0
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	4611      	mov	r1, r2
 8007168:	602b      	str	r3, [r5, #0]
 800716a:	f7fc fdc7 	bl	8003cfc <_kill>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	d102      	bne.n	8007178 <_kill_r+0x1c>
 8007172:	682b      	ldr	r3, [r5, #0]
 8007174:	b103      	cbz	r3, 8007178 <_kill_r+0x1c>
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	bd38      	pop	{r3, r4, r5, pc}
 800717a:	bf00      	nop
 800717c:	2000025c 	.word	0x2000025c

08007180 <_getpid_r>:
 8007180:	f7fc bdb4 	b.w	8003cec <_getpid>

08007184 <__malloc_lock>:
 8007184:	4801      	ldr	r0, [pc, #4]	; (800718c <__malloc_lock+0x8>)
 8007186:	f000 b809 	b.w	800719c <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	20000264 	.word	0x20000264

08007190 <__malloc_unlock>:
 8007190:	4801      	ldr	r0, [pc, #4]	; (8007198 <__malloc_unlock+0x8>)
 8007192:	f000 b804 	b.w	800719e <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	20000264 	.word	0x20000264

0800719c <__retarget_lock_acquire_recursive>:
 800719c:	4770      	bx	lr

0800719e <__retarget_lock_release_recursive>:
 800719e:	4770      	bx	lr

080071a0 <_init>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	bf00      	nop
 80071a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a6:	bc08      	pop	{r3}
 80071a8:	469e      	mov	lr, r3
 80071aa:	4770      	bx	lr

080071ac <_fini>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr
